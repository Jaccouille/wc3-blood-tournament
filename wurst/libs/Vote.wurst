package Vote

// Standard libs imports:
import ClosureTimers
import HashMap
import LinkedList

// Local imports:
import ColorUtils

public interface VoteCallback
    function execute()



public class Vote
    static let voteInstanceMap = new HashMap<string, Vote>

    private VoteCallback cb
    private LinkedList<player> hasVoted
    private string name
    private real timeRemaining
    private int amountToPass

    construct(string name, real timeRemaining, int amountToPass)
        this.name = name
        this.timeRemaining = timeRemaining
        this.amountToPass = amountToPass
        hasVoted = new LinkedList<player>()
        voteInstanceMap.put(name, this)
        doAfter(timeRemaining) ->
            if voteInstanceMap.has(name)
                this.endVote(true)

    function addAction(VoteCallback cb)
        this.cb = cb

    function castVote(player _p)
        if not hasVoted.has(_p)
            hasVoted.push(_p)
            let remainingVote = max(amountToPass - hasVoted.size(), 0)
            let msg = _p.getNameColored(true) +
                " has voted for " + this.name.color(SPECIAL_COLOR) +
                ", " + remainingVote.toString() + " vote remaining"
            printTimed(msg, 7)
            if hasVoted.size() >= amountToPass
                this.endVote(false)
        else
            printTimedToPlayer("You already voted for " + this.name, 5, _p)

    function endVote(boolean displayFailed)
        if voteInstanceMap.has(this.name)
            voteInstanceMap.remove(this.name)
        if hasVoted.size() >= amountToPass
            printTimed(this.name + " vote passed!", 5)
            cb.execute()
        else if displayFailed
            printTimed(this.name + " vote failed!", 5)
        destroy cb
        destroy hasVoted
        destroy this
