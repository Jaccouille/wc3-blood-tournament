package DebugCommande

// Standard libs imports:
import ClosureForGroups
import ClosureTimers
import ObjectIds
import Reflection

// Local imports:
import ArmySpawner
import ClosuresForItems
import OrderBlocker
import RoundController
import Toolkit
import UnitDeathTrigger
import UnitExtensions

init
    registerToolkitCommand("help") (player triggerPlayer, LinkedList<string> arguments) ->
        string msg = "" +
        "su : SpawnedUnits size" +
        "show-indexes : display army spawner indexes" +
        "al : roundParticipant size" +
        "lu [playerId] : List current units of playerId" +
        "clean : Kill every spawned units" +
        "attack : Order every unit to attack move center" +
        "order : Display current order of selected units" +
        "ci : display item on the ground count" +
        "ps : Log object instances > 0" +
        "psa : Log object instances > 100" +
        "er : end round" +
        "lr : list round"
        printTimedToPlayer(msg, 15, triggerPlayer)

    registerToolkitCommand("su") (player triggerPlayer, LinkedList<string> arguments) ->
        pDatas.forEach() (player key, PlayerData pData) ->
            Log.info("SpawnedUnits size : " + pData.spawnedUnits.size().toString() + " for " + key.getNameColored(true))

    registerToolkitCommand("show-indexes") (player triggerPlayer, LinkedList<string> arguments) ->
        pDatas.forEach() (player key, PlayerData pData) ->
            let idx = playerToArmySpawner.get(key).buildingIdx
            let nestedIdx = playerToArmySpawner.get(key).squadIdx
            let spawnFinished = playerToArmySpawner.get(key).hasSpawnFinished
            Log.info("spawnidx : " + idx.toString() +
                     " spawninestedIdx : " + nestedIdx.toString() +
                     " spawnFinished : " + spawnFinished.toString() +
                     " for " + key.getNameColored(true))

    registerToolkitCommand("al") (player triggerPlayer, LinkedList<string> arguments) ->
        Log.info("roundParticipant size : " + roundController.currentRound.roundParticipant.size().toString())
        roundController.currentRound.roundParticipant.forEach() (player t) ->
            Log.info("Participant remaining : " + t.getName())

    registerToolkitCommand("lu") (player triggerPlayer, LinkedList<string> arguments) ->
        if (arguments.size() > 1)
            let playerIdx = arguments.get(1).toInt()
            pDatas.get(players[playerIdx]).spawnedUnits.forEach() (unit u) ->
                Log.info("Unit : " + u.getName() +
                         " at pos :" + u.getPos().toString() +
                         " " + u.getTypeId().toRawCode() +
                         " length: " + u.getName().length().toString()
                         )
                if u.getName() == null
                    Log.info("null")

    registerToolkitCommand("clean") (player triggerPlayer, LinkedList<string> arguments) ->
        pDatas.forEach() (player key, PlayerData pData) ->
            pData.spawnedUnits.forEach() (unit t) ->
                if t.getName() == null
                    pData.spawnedUnits.remove(t)
                    t.remove()
                    checkIfPlayerDefeated(pData, null)

    registerToolkitCommand("attack") (player triggerPlayer, LinkedList<string> arguments) ->
        forUnitsAll() (unit u) ->
            if u.getMoveSpeed() > 1 and not u.isType(UNIT_TYPE_PEON)
                u.unpause()
                u.issuePointOrder("attack", CENTER)
        nullTimer() ->
            preventOrder = true
            orderBlocker.enable()

    registerToolkitCommand("order") (player triggerPlayer, LinkedList<string> arguments) ->
        forUnitsSelected(triggerPlayer) (unit target) ->
            let orderId = target.getCurrentOrder()
            // Print the basic information for this order.
            print("{0} was issued order {1}: {2}.".format(
                target.getName(),
                orderId.toString(),
                OrderId2StringBJ(orderId))
            )

    registerToolkitCommand("ci") (player triggerPlayer, LinkedList<string> arguments) ->
        int _count = 0
        forItemsInMap() (item i) ->
            _count += 1
        Log.info("Item count: " + _count.toString())

    registerToolkitCommand("ps") (player triggerPlayer, LinkedList<string> arguments) ->
        for i = 1 to maxTypeId()
            if instanceCount(i) > 0
                Log.info(typeIdToTypeName(i) + " " + instanceCount(i).toString() + " " + maxInstanceCount(i).toString())
        Log.info("Max type id : " + maxTypeId().toString())

    registerToolkitCommand("psa") (player triggerPlayer, LinkedList<string> arguments) ->
        for i = 1 to maxTypeId()
            if instanceCount(i) > 100
                Log.info(typeIdToTypeName(i) + " " + instanceCount(i).toString() + " " + maxInstanceCount(i).toString())
        Log.info("Max type id : " + maxTypeId().toString())

    registerToolkitCommand("er") (player triggerPlayer, LinkedList<string> arguments) ->
        for _p in pDatas
            playerToArmySpawner.get(_p).buildingList.clear()
        forUnitsAll() (unit u) ->
            if u.isSoldier()
                u.kill()

    registerToolkitCommand("lr") (player triggerPlayer, LinkedList<string> arguments) ->
        var sb = ""
        Log.info("Round count :" + roundController.rounds.size().toString())
        for round in roundController.rounds
            sb += "Round " + round.roundName + " : "
            for match in round.matchUp
                sb += players[match.a].getNameColored() + " vs " + players[match.b].getNameColored()
                sb += ", "
            print(sb)
            sb = ""
