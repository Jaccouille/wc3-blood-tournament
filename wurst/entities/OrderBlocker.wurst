package OrderBlocker

// Local imports:
import ColorUtils
import GameConstants
import HashSet
import OrderIds

public boolean preventOrder = false
public trigger orderBlocker

let validOrder = new HashSet<int>()
    ..add(OrderIds.bloodlust)
    ..add(OrderIds.bloodluston)
    ..add(OrderIds.innerfire)
    ..add(OrderIds.innerfireon)
    ..add(OrderIds.lightningshield)
    ..add(OrderIds.lightningshield)
    ..add(OrderIds.faeriefire)
    ..add(OrderIds.raisedead)
    ..add(OrderIds.heal)
    ..add(OrderIds.healon)
    ..add(OrderIds.spellsteal)
    ..add(OrderIds.stoneform)
    ..add(OrderIds.blizzard)
    ..add(OrderIds.phoenixmorph)
    ..add(OrderIds.curse)
    ..add(OrderIds.frostarmor)
    ..add(OrderIds.frostarmoron)
    ..add(OrderIds.undefend)
    ..add(OrderIds.healingwave)


function isValid() returns boolean
    return validOrder.has(GetIssuedOrderIdBJ())

public function disableOrderBlocker()
    orderBlocker.disable()
    preventOrder = false


init

    orderBlocker = CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER)
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER)
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER)
    // ..addCondition(Condition((function isValid)))
    ..addAction() ->
        let u = GetOrderedUnit()
        if not isValid() and preventOrder
            Log.info(u.getName())
            preventOrder = false
            // print(OrderId2StringBJ(GetIssuedOrderIdBJ()))
            u.issuePointOrder("attack", CENTER)
            preventOrder = true
            if u.isType(UNIT_TYPE_PEON)
                let msg = "Cannot control builder during round phase".color(SPECIAL_COLOR)
                printTimedToPlayer(msg, 4, u.getOwner())
            else
                printTimedToPlayer("Order blocked : " + OrderId2StringBJ(GetIssuedOrderIdBJ()) + " id : " + GetIssuedOrderIdBJ().toString(), 4, u.getOwner())
    disableOrderBlocker()
