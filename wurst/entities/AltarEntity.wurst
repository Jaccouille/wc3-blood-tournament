package AltarEntity

// Standard libs imports:
import ClosureEvents

// Local imports:
import GameConstants
import Indicators
import LocalAssets
import LocalObjectIDs

public AltarEntity altarEntity = null

class AltarEntity
    unit bloodOrb = null
    effect bloodOrbModel = null
    real bloodOrbScale = 1.
    texttag bloodPointCounterTag = null
    int bloodPointCounter = 0
    unit theUnit

    construct(unit whichUnit)
        theUnit = whichUnit
        altarEntity = this
        theUnit.setLevel(10, false)
        theUnit.setColor(players[0].getColor())

        bloodOrbModel = addEffect(LocalUnits.orbBloodX, theUnit, "overhead")
        bloodOrb = createUnit(ALTAR_PLAYER, UNIT_DUMMY_ORB_BLOOD, theUnit.getPos(), 270..asAngleDegrees())
        bloodOrb.pause()
        bloodOrbModel.setTimeScale(0.1)
        let pos = theUnit.getPos().withRealZ(theUnit).op_plus(vec3(-10, 0, -500))
        bloodPointCounterTag = createTTEx(pos, "0", 10)
            ..setColor(255, 0, 0, 255)

        EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
            if EventData.getKillingUnit() == bloodOrb
                bloodOrbScale = bloodOrbScale + 0.01
                bloodOrbModel.setScale(bloodOrbScale)
                bloodOrb.setPosFly(bloodOrb.getPos3Fly().add(0, 0, 0.8))
                bloodPointCounter += EventData.getDyingUnit().getPointValue()
                bloodPointCounterTag.setText(bloodPointCounter.toString(), 10)

        // bloodPointCounterTag.setText(bloodPointCounter.toString(), 10)

    function hideCounter()
        this.bloodPointCounterTag.setText("0", 10)
        this.bloodPointCounterTag.setVisibility(false)

    function showCounter()
        this.bloodPointCounterTag.setVisibility(true)

    function getOrbUnit() returns unit
        return this.bloodOrb

    function getArenaMaster() returns unit
        return theUnit

public function initAltar()
    registerIndicatorCallback(UNIT_ARENA_MASTER) (unit target) ->
        new AltarEntity(target)
