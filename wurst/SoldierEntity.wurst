package SoldierEntity

import UnitEntity
import LinkedList
import HashMap

import IDListConstant

let typeIDs = new LinkedList<int>
    ..addAll(HUMAN_UNITS)

interface LastArmyRemaining
    abstract function execute()

public LastArmyRemaining onLastArmyRemaining

interface AllUnitDead
    abstract function execute()

public AllUnitDead onAllUnitDead

public constant playerSoldiers = new HashMap<player, LinkedList<SoldierEntity>>

public class SoldierEntity extends UnitEntity
    construct(unit whichUnit)
        super(whichUnit)
        let soldierList = playerSoldiers.get(theUnit.getOwner())
        if soldierList == null
            playerSoldiers.put(theUnit.getOwner(), asList(this))
        else
            soldierList.add(this)

        EventListener.add(theUnit, EVENT_PLAYER_UNIT_DEATH, () -> begin
            playerSoldiers.get(theUnit.getOwner()).remove(this)
            if playerSoldiers.get(theUnit.getOwner()).isEmpty()
                playerSoldiers.remove(theUnit.getOwner())
                Log.info("Removed " + theUnit.getOwner().getName())
                if playerSoldiers.size() == 1
                    onLastArmyRemaining.execute()
                if playerSoldiers.size() == 0
                    onAllUnitDead.execute()
        end)

    override function postCreate()
        super.postCreate()


init
    typeIDs.forEach() (int typeID) ->
        SoldierEntity.register(typeID, target -> new SoldierEntity(target))
