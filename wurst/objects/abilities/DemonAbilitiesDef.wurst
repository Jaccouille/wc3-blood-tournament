package DemonAbilitiesDef

// Standard libs imports:
import Assets
import BuffObjEditing
import ClosureEvents
import ClosureForGroups
import InstantDummyCaster
import OrderIds
import ClosureTimers
import LinkedList

// Local imports:
import AbilityObjEditingCommons
import ArmySpawner
import BTAbilities
import BTAbilityTooltipGenerator
import ItemObjEditingCommon
import LocalObjectIDs
import TooltipsUtils
import PlayerData
import UnitObjEditingCommon
import PlayerExtension


@compiletime function createDemonAbilities()

    var tgen = new BTAbilityTooltipGenerator(
        "Increase the unit attack rate."
    )

    let BUFF_DEMONIC_FRENZY_ID = compiletime(BUFF_ID_GEN.next())
    new BuffDefinition(BUFF_DEMONIC_FRENZY_ID, BuffIds.enduranceAura)
        ..setIcon(Icons.bTNUnholyFrenzy)
        ..setArtTarget(Abilities.feralspiritdone)
        ..setTargetAttachments(1, 1)
        ..setTargetAttachmentPoint0(1, "overhead")
        ..setName(1, "Demonic Frenzy")
        ..setIcon(Icons.bTNUnholyFrenzy)
        ..setTooltipNormal(1, "Demonic Frenzy")
        ..setTooltipNormalExtended(1, "This unit has Demonic Frenzy;its attack " +
            "speed is greatly increased.")

    new AbilityDefinitionFrenzy(ABIL_DEMONIC_FRENZY)
        ..registerTooltipGenerator(tgen)
        ..setScalingFactor(1, 0)
        ..tooltipStartListen()
        ..setAttackSpeedIncrease(1, 0.8)
        ..addTooltipProperty("Attack Speed Increase", _ -> 0.8.toPercent())
        ..setBuffs(1, BUFF_DEMONIC_FRENZY_ID.toRawCode())
        ..setMovementSpeedIncrease(1, 0.0)
        ..presetDurationNormal(_ -> 3)
        ..presetCooldown(_ -> 12)
        ..setNameEnhance("Z", "Frenzy")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_DEMONIC_FRENZY, tgen.generateFullTooltip())

    new AbilityDefinitionCursecreep(ABIL_CURSE)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..setChancetoMiss(1, 0.6)
        ..addTooltipProperty("Chance to miss", _ -> 0.6.toPercent())
        ..presetDurationNormal(_ -> 6)
        ..presetManaCost(_ -> 40)
        ..presetCooldown(_ -> 3)
        ..presetCastRange(_ -> 700)
        ..setNameEnhance("Z", "Curse")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_CURSE, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Calls down waves of fire that damage units in an area.\n" +
        "Does not stack with other rain of fire."
    )


    let rainOfFire = new AbilityDefinitionRainofFirecreep(ABIL_RAIN_OF_FIRE)
        ..setAnimationNames("spell,slam")
        ..registerTooltipGenerator(tgen)
        // ..setBuffs(1, commaList(BuffIds.blizzardCaster))
        ..presetNumberofShards(_ -> 6)
        ..presetAreaofEffect(_ -> 300)
        ..presetCooldown(_ -> 0)
        ..tooltipStartListen()
        ..presetDamage(_ -> 50)
        ..presetDamagePerSecond(_ -> 25)
        ..presetMaximumDamageperWave(_ -> 1000)
        ..presetNumberofWaves(_ -> 4)
        ..presetDurationNormal(_ -> 3)
        ..presetManaCost(_ -> 100)
        ..presetCastRange(_ -> 800)
        ..setNameEnhance("Z", "Blizzard")
        ..tooltipStopListen(false)
        ..setTargetsAllowed(1, commaList(TargetsAllowed.enemies))

    createAutoCastedLongRangeEnemyAbility(ABIL_AUTOCAST_RAIN_OF_FIRE)
        ..setAnimationNames("spell,slam")
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 800)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 30)
        ..applyTooltip(rainOfFire)
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_RAIN_OF_FIRE, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "Calls an Infernal down from the sky, dealing damage and stunning enemy units."
    )


    let inferno = new AbilityDefinitionInferno(ABIL_INFERNO)
        ..setAnimationNames("spell,slam")
        ..setLevels(1)
        ..setHeroAbility(false)
        ..presetDuration(_ -> 180)
        ..registerTooltipGenerator(tgen)
        // ..setBuffs(1, commaList(BuffIds.blizzardCaster))
        ..setSummonedUnit(1, UNIT_INFERNAL.toRawCode())
        ..presetCooldown(_ -> 0)
        ..tooltipStartListen()
        ..presetDamage(_ -> 150)
        ..setDurationNormal(1, 3)
        ..addTooltipProperty("Stun Duration", _ -> "3")
        ..presetAreaofEffect(_ -> 300)
        ..presetManaCost(_ -> 150)
        ..presetCastRange(_ -> 800)
        ..setNameEnhance("Z", "Inferno")
        ..tooltipStopListen(false)
        ..setTargetsAllowed(1, commaList(TargetsAllowed.enemies))

    createAutoCastedLongRangeEnemyAbility(ABIL_AUTOCAST_INFERNO)
        ..setAnimationNames("spell,slam")
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 800)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 30)
        ..applyTooltip(inferno)
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_INFERNO, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "Instantly turns a creature or building inside-out."
    )

    new AbilityDefinitionFingerofDeath(ABIL_FINGER_OF_DEATH)
        ..setCheckDependencies(false)
        ..registerTooltipGenerator(tgen)
        ..presetManaCost(_ -> 0)
        ..presetCastRange(_ -> 900)
        ..tooltipStartListen()
        ..presetDamage(_ -> 99999)
        ..presetCooldown(_ -> 10)
        ..setNameEnhance("Z", "Finger of Death")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_FINGER_OF_DEATH, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "Burns nearby enemy units each seconds."
    )

    new AbilityDefinitionPermanentImmolation(ABIL_IMMOLATION)
        ..setCheckDependencies(false)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetDamageperInterval(_ -> 20)
        ..presetAreaofEffect(_ -> 200)
        ..setNameEnhance("Z", "Immolation")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_FINGER_OF_DEATH, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "Gives mana every seconds to a nearby ally."
        )
    new AbilityDefinitionSiphonManaCreep(ABIL_MANA_SHARE)
        ..setDummyAbility()
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetManaTransferredPerSecond(_ -> 50)
        ..presetDurationNormal(_ -> 3)
        ..setNameEnhance("Z", "Mana Share")
        ..tooltipStopListen(false)


    createAutoCastAlliedManaTarget(ABIL_AUTOCAST_MANA_SHARE)
        ..registerTooltipGenerator(tgen)
        ..presetManaCost(_ -> 0)
        ..tooltipStartListen()
        ..presetCastRange(_ -> 700)
        ..presetCooldown(_ -> 9)
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_MANA_SHARE, tgen.generateFullTooltip())


    createVisualAbility(ABIL_VISUAL_ILLIDAN_MISSILE)
        ..setArtTarget(Abilities.illidanMissile)
        ..setName("Visual Illidan Missile")
        ..setTargetAttachmentPoint("hand,right")
        ..setTargetAttachments(1)

    tgen = new BTAbilityTooltipGenerator(
        "Summons lesser demonic reinforcement."
    )
    createAutoCastedLongRangeEnemyAbility(ABIL_AUTOCAST_LESSER_DARK_PORTAL)
        ..setAnimationNames("stand,channel")
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 800)
        ..setCastingTime(1, 5)
        ..setArtCaster(Abilities.darkRitualCaster)
        ..tooltipStartListen()
        ..presetManaCost(_ -> 150)
        ..presetCooldown(_ -> 20)
        ..setNameEnhance("Z", "Lesser Dark Portal")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_AUTOCAST_LESSER_DARK_PORTAL, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Summons greater demonic reinforcement."
    )
    createAutoCastedLongRangeEnemyAbility(ABIL_AUTOCAST_GREATER_DARK_PORTAL)
        ..setAnimationNames("stand,channel")
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 800)
        ..setCastingTime(1, 5)
        ..setArtCaster(Abilities.darkRitualCaster)
        ..tooltipStartListen()
        ..presetManaCost(_ -> 150)
        ..presetCooldown(_ -> 20)
        ..setNameEnhance("Z", "Greater Dark Portal")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_AUTOCAST_LESSER_DARK_PORTAL, tgen.generateFullTooltip())

function genList(int unitId, int count) returns LinkedList<int>
    let unitList = new LinkedList<int>
    for i = 0 to count * 1 - 1
        unitList.add(unitId)
    return unitList


init
    EventListener.onTargetCast(ABIL_AUTOCAST_LESSER_DARK_PORTAL) (unit caster, unit target) ->
        let summonPos = caster.getPos().polarOffset(caster.getFacingAngle(), 150)
        let chance = GetRandomReal(0, 1)
        let unitToSummon = new LinkedList<int>()
        if chance < 0.1
            unitToSummon.addAll(genList(UNIT_DEMON_PIG, GetRandomInt(3, 6)))
        else if chance < 0.3
            unitToSummon.addAll(genList(UNIT_SATYR, GetRandomInt(2, 4)))
        else if chance < 0.5
            unitToSummon.addAll(genList(UNIT_LESSER_VOID_WALKER, GetRandomInt(2, 4)))
        else if chance < 0.7
            unitToSummon.addAll(genList(UNIT_SATYR, GetRandomInt(2, 4)))
            unitToSummon.addAll(genList(UNIT_LESSER_VOID_WALKER, GetRandomInt(2, 4)))
        else if chance < 0.8
            unitToSummon.addAll(genList(UNIT_UNBROKEN, GetRandomInt(1, 3)))
        else
            unitToSummon.addAll(genList(UNIT_UNBROKEN, GetRandomInt(1, 3)))
            unitToSummon.addAll(genList(UNIT_SATYR, GetRandomInt(1, 3)))
            unitToSummon.addAll(genList(UNIT_LESSER_VOID_WALKER, GetRandomInt(1, 3)))

        flashEffect(Abilities.darkPortalTarget, summonPos)
        doAfter(1.3) ->
            for unitId in unitToSummon
                let summonedUnit = createUnit(
                    caster.getOwner(), unitId, summonPos, caster.getFacingAngle())
                ArmySpawner.doOnSummonedUnit(summonedUnit)
            destroy unitToSummon

    EventListener.onTargetCast(ABIL_AUTOCAST_GREATER_DARK_PORTAL) (unit caster, unit target) ->
        let summonPos = caster.getPos().polarOffset(caster.getFacingAngle(), 150)
        let chance = GetRandomReal(0, 1)
        let unitToSummon = new LinkedList<int>()
        if chance < 0.1
            unitToSummon.addAll(genList(UNIT_DEMON_PIG, GetRandomInt(6, 10)))
        else if chance < 0.3
            unitToSummon.addAll(genList(UNIT_SATYR_TRICKSTER, GetRandomInt(2, 4)))
        else if chance < 0.5
            unitToSummon.addAll(genList(UNIT_GREATER_VOID_WALKER, GetRandomInt(1, 2)))
        else if chance < 0.7
            unitToSummon.addAll(genList(UNIT_SATYR_TRICKSTER, GetRandomInt(2, 4)))
            unitToSummon.addAll(genList(UNIT_GREATER_VOID_WALKER, GetRandomInt(1, 2)))
        else if chance < 0.8
            unitToSummon.addAll(genList(UNIT_DOOM_GUARD, GetRandomInt(1, 2)))
        else
            unitToSummon.addAll(genList(UNIT_DOOM_GUARD, GetRandomInt(1, 2)))
            unitToSummon.addAll(genList(UNIT_SATYR_TRICKSTER, GetRandomInt(1, 4)))
            unitToSummon.addAll(genList(UNIT_GREATER_VOID_WALKER, GetRandomInt(1, 2)))

        flashEffect(Abilities.darkPortalTarget, summonPos)
        doAfter(1.3) ->
            for unitId in unitToSummon
                let summonedUnit = createUnit(
                    caster.getOwner(), unitId, summonPos, caster.getFacingAngle())
                ArmySpawner.doOnSummonedUnit(summonedUnit)
            destroy unitToSummon
