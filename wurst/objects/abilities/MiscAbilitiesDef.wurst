package MiscAbilitiesDef

// Standard libs imports:
import ChannelAbilityPreset
import ClosureEvents
import Assets
import ClosureForGroups
import SimError
import SoundUtils

// Local imports:
import AbilityObjEditingCommons
import LocalObjectIDs
import TooltipsUtils
import GameConstants
import PlayerData
import BuffObjEditing
import GameStates
import GameConfig
import UnitCreationTrigger
import StandardTextTags
import ColorUtils
import OrderIds
import DummyCaster

let RECEIVE_GOLD = new SoundDefinition(Sounds.receiveGold1, false, true)

@compiletime function createRacePickingMiscAbilities()
    new ChannelAbilityPreset(ABIL_RANDOM_RACE, 1, true)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 0)
        ..setDummyAbility()
        ..setHotkeyEnhance("Z")
        ..setName("Pick Random Race")
        ..presetTooltipNormal(lvl -> makeToolTipNorm("Z", "Pick Random Race"))
        ..presetTooltipNormalExtended(lvl -> "Pick Random Race. Cannot repick.")
        ..setIconNormal(Icons.bTNSelectHeroOn)
        ..setIconResearch(Icons.bTNSelectHeroOn)
        ..setIconTurnOff(Icons.bTNSelectHeroOn)
        ..setRequirements(UPGD_RACE_PICK.toRawCode())
        ..setCheckDependencies(true)

    new ChannelAbilityPreset(ABIL_REPICK, 1, true)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 0)
        ..setDummyAbility()
        ..setHotkeyEnhance("X")
        ..setName("Repick builder")
        ..presetTooltipNormal(lvl -> makeToolTipNorm("X", "Repick builder"))
        ..presetTooltipNormalExtended(lvl -> "Repick builder, cannot repick with existing building")
        ..setIconNormal(Icons.bTNPatrol)
        ..setIconResearch(Icons.bTNPatrol)
        ..setIconTurnOff(Icons.bTNPatrol)
        ..setRequirements(UPGD_RACE_PICK.toRawCode())
        ..setCheckDependencies(true)


@compiletime function createShopSharingAbility()
    new AbilityDefinitionShopSharing(ABIL_SHOP_SHARING)
        ..setShowUnitIndicator(1, false)
        ..setShowSelectUnitButton(1, false)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(-11)
        ..setCastRange(1, 9000)
        ..setActivationRadius(1, 9000)

    new AbilityDefinition(ABIL_SHOP_PURCHASE, AbilityIds.shopPurchaseItem)
        ..setTargetsAllowed(1, commaList(TargetsAllowed.self))


@compiletime function createMoveBuildingAbility()
    new AbilityDefinitionBuildTinyScoutTower(ABIL_MOVE_BUILDING)
        ..setManaCost(1, 0)
        ..setCooldown(1, 0)
        ..setCastingTime(1, 0)
        ..setItemAbility(false)
        ..setCastRange(1, 9999)
        ..setUnitCreatedperplayerrace(1, BUILDING_FOOTMAN.toRawCode())
        ..setDurationNormal(1, 1000)
        ..setHotkeyEnhance("V")
        ..setIconNormal(Icons.bTNUproot)
        ..setName("Move building")
        ..presetTooltipNormal(lvl -> makeToolTipNorm("V", "Move building"))
        ..presetTooltipNormalExtended(lvl -> "Move this building to the target location")

@compiletime function createSpeedBoostAbility()
    let BUFF_ID = compiletime(BUFF_ID_GEN.next())

    new BuffDefinition(BUFF_ID, BuffIds.speedBonus)
        ..setArtSpecial(1,"")
        ..setTooltipNormal(1, "Speed boost")
        ..setTooltipNormalExtended(1, "Speed boost to reach middle faster")
        ..setName("Speed boost")

    new AbilityDefinitionAuraEnduranceCreep(ABIL_SPEED_BOOST)
        ..setIconNormal(Icons.bTNAnimalWarTraining)
        ..setBuffs(1, BUFF_ID.toRawCode())
        ..setName("Speed Boost")
        ..presetTooltipNormal(lvl -> makeToolTipNorm("V", "Speed Boost"))
        ..presetTooltipNormalExtended(lvl -> "Move this building to the target location")
        ..setAttackSpeedIncrease(1, 0)
        ..setMovementSpeedIncrease(1, 400)
        ..setAreaofEffect(1, 2000)
        ..presetTargetsAllowed(_ -> TargetsAllowed.ground)


@compiletime function createMoveUnitAbility()
    new ChannelAbilityPreset(ABIL_ORDER_UNIT, 1, true)
            ..presetManaCost(lvl -> 0)
            ..presetCooldown(lvl -> 2)
            ..presetCastRange(_ -> 99999)
            ..setHeroAbility(false)
            ..setItemAbility(false)
            ..presetTargetTypes(Targettype.POINT)
            ..presetTargetsAllowed(lvl -> TargetsAllowed.ground)
            ..setHotkeyEnhance("X")
            ..setName("Move unit")
            ..presetTooltipNormal(lvl -> makeToolTipNorm("X", "Move unit"))
            ..presetTooltipNormalExtended(lvl -> "Use this to unstuck units (works in round phase).")
            ..setIconNormal(Icons.bTNNagaUnBurrow)
            ..setIconResearch(Icons.bTNNagaUnBurrow)
            ..setIconTurnOff(Icons.bTNNagaUnBurrow)
            ..presetOption(Option.TARGETIMAGE, true)
            ..setAreaofEffect(1, 200)
            ..setOrderStringActivate("blizzard")
            ..setBaseOrderID(1, "blizzard")


function createStandardChannelAbility(int abilId) returns ChannelAbilityPreset
    return new ChannelAbilityPreset(abilId, 1, true)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 0)
        ..setHeroAbility(false)
        ..setItemAbility(false)
        ..presetTargetTypes(Targettype.NONE)
        ..setAnimationNames("")
        ..setArtEffect("")
        ..setArtDuration(1, 0)
        ..setArtTarget("")
        ..setArtCaster("")

let TOOLTIP_TRADE_GOLD = "Exchange {0} blood points for {1} gold."
let TOOLTIP_TRADE_BLOOD_POINT = "Exchange {0} gold for {1} blood points."

@compiletime function createTradeResourcesAbilities()
    createStandardChannelAbility(ABIL_TRADE_GOLD)
        ..setNameEnhance("D", "Trade Gold")
        ..setTooltipNormalExtended(1, TOOLTIP_TRADE_GOLD)
        ..setIconNormal(Icons.bTNMGExchange)
        ..setBaseOrderID(1, "berserk")

    createStandardChannelAbility(ABIL_TRADE_BLOOD_POINT)
        ..setNameEnhance("F", "Trade Blood Points")
        ..setTooltipNormalExtended(1, TOOLTIP_TRADE_BLOOD_POINT)
        ..setIconNormal(Icons.bTNCorpseExplode)


@compiletime function createSellBuilderAbility()
    new AbilityDefinitionAlchemistTransmute(ABIL_SELL_BUILDING)
        ..setCastRange(1, 99999)
        ..setManaCost(1, 0)
        ..setCooldown(1, 0)
        ..setGoldCostFactor(1, 1)
        ..setLumberCostFactor(1, 1)
        ..setHeroAbility(false)
        ..setMaxCreepLevel(1, 1)
        ..setTargetsAllowed(1, commaList(
            TargetsAllowed.player_t,
            TargetsAllowed.structure,
            TargetsAllowed.invulnerable,
            TargetsAllowed.nonancient
        ))
        ..setName("Sell building")
        ..presetTooltipNormal(lvl -> makeToolTipNorm("V", "Sell building"))
        ..presetTooltipNormalExtended(lvl -> "Sell the building and get 100% of its cost back.\nCannot sell upgraded buildings.")

    createStandardChannelAbility(ABIL_SELL_ALL)
        ..setNameEnhance("C", "Sell All")
        ..setTooltipNormalExtended(1, "Sell all sellable buildings.\nCannot sell upgraded buildings.")
        ..setIconNormal(Icons.bTNChestOfGold)


init
    GameStates.modesSelection.onExit() (state) ->
        let goldEx = gameConfig.getGoldExchange()
        let bpEx = gameConfig.getBloodPointExchange()
        setAbilityExtendedTooltip(ABIL_TRADE_GOLD,
            TOOLTIP_TRADE_GOLD.format(
                bpEx.toString().color(COLOR_RED), goldEx.toString().color(COLOR_GOLD)),
            0)
        setAbilityExtendedTooltip(ABIL_TRADE_BLOOD_POINT,
            TOOLTIP_TRADE_BLOOD_POINT.format(
                goldEx.toString().color(COLOR_GOLD), bpEx.toString().color(COLOR_RED)),
            0)

    EventListener.onCast(ABIL_TRADE_GOLD) (unit caster) ->
        let owner = caster.getOwner()
        if owner.getLumber() >= gameConfig.getBloodPointExchange()
            flashEffect(UI.goldCredit, caster.getPos3Real())
            owner.addGold(gameConfig.getGoldExchange())
            owner.addLumber(-gameConfig.getBloodPointExchange())
            createGoldBountyTextTag(caster, gameConfig.getGoldExchange(), owner)
            RECEIVE_GOLD.playOnPoint(caster.getPos3Fly())
        else
            simError(caster.getOwner(), "Not enough blood points for exchange")

    EventListener.onCast(ABIL_TRADE_BLOOD_POINT) (unit caster) ->
        let owner = caster.getOwner()
        if owner.getGold() >= gameConfig.getGoldExchange()
            flashEffect(Objects.humanSmallDeathExplode, caster.getPos3Real())
            owner.addLumber(gameConfig.getBloodPointExchange())
            owner.addGold(-gameConfig.getGoldExchange())
            createLumberBountyTextTag(caster, gameConfig.getBloodPointExchange(), owner)
                ..setColor(colorA(255, 0, 0, 255))
        else
            simError(caster.getOwner(), "Not enough gold for exchange")

    EventListener.onCast(ABIL_SELL_ALL) (unit caster) ->
        let bRect = pDatas.get(caster.getOwner()).buildingRect
        forUnitsInRect(bRect) (unit u) ->
            if u.isType(UNIT_TYPE_STRUCTURE)
                and not u.isType(UNIT_TYPE_ANCIENT)
                and u.getTypeId() != UNIT_RACE_PICKER
                new DummyCaster()
                    ..owner(caster.getOwner())
                    ..origin(caster.getPos())
                    ..castTarget(ABIL_SELL_BUILDING, 1, Orders.transmute, u)
                    ..delay(1)
                // BlzQueueTargetOrderById(caster, OrderIds.transmute, u)
                // caster.issueTargetOrderById(OrderIds.transmute, u)

    EventListener.add(EVENT_PLAYER_UNIT_CONSTRUCT_START) ->
        let u = EventData.getConstructingStructure()
        // When move ability is casted, it creates a unit in middle map
        // Following lines remove it
        if not u.getPos().isInRect(pDatas.get(u.getOwner()).buildingRect)
            u.remove()

    EventListener.onPointCast(ABIL_MOVE_BUILDING) (unit caster, vec2 target) ->
        // I believe it's necessary to prevent construction on target pos
        // But I am not sure
        caster.abortOrder()
        if target.isInRect(pDatas.get(caster.getOwner()).buildingRect)
            flashEffect(Abilities.polyMorphTarget, caster.getPos())
            caster.setPos(target)
            insertBuilding(pDatas.get(caster.getOwner()).buildingList, caster)
            flashEffect(Abilities.polyMorphTarget, caster.getPos())
        else
            simError(caster.getOwner(), "Cannot move building outside of your building zone")

    EventListener.onPointCast(ABIL_ORDER_UNIT) (unit caster, vec2 target) ->
        let msg = caster.getOwner().getNameColored() + " used move units"
        createTTEx(target.toVec3(), msg, 10)
            ..setVelocity(0, 0.03)
            ..setFadepoint(2.)
            ..setLifespan(3.0)
            ..setPermanent(false)
        forUnitsInRange(target, 200) (unit u) ->
            if u.getCurrentOrder() == 0
                and not u.isType(UNIT_TYPE_PEON)
                and not u.isType(UNIT_TYPE_STRUCTURE)
                u.issuePointOrder("attack", CENTER)
