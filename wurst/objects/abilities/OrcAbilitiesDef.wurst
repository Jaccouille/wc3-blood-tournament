package OrcAbilitiesDef

// Standard libs imports:
import Assets
import BuffObjEditing
import HashMap

// Local imports:
import AbilityObjEditingCommons
import ArmySpawner
import BTAbilities
import BTAbilityTooltipGenerator
import ItemObjEditingCommon
import LocalObjectIDs
import TooltipsUtils
import UnitObjEditingCommon
import LocalAssets

@compiletime function orcAbilities()
    var tgen = new BTAbilityTooltipGenerator(
        "Increases a friendly unit's attack and movement speed.")
    new AbilityDefinitionBloodlustCreep(ABIL_BLOODLUST)
        ..registerTooltipGenerator(tgen)
        ..setLevels(1)
        ..tooltipStartListen()
        ..setNameEnhance("Z", "Bloodlust")
        ..setAttackSpeedIncrease(1, 0.5)
        ..addTooltipProperty("Attack Speed Bonus", _ -> 0.5.toPercent())
        ..setMovementSpeedIncrease(1, 0.25)
        ..addTooltipProperty("Movement Speed Bonus", _ -> 0.25.toPercent())
        ..presetManaCost(_ -> 80)
        ..presetCooldown(_ -> 4)
        ..presetDurationNormal(_ -> 60)
        ..presetCastRange(_ -> 600)
        ..setScalingFactor(1, 0)
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_BLOODLUST, tgen.generateFullTooltip())

    let BUFF_BERSERK = BUFF_ID_GEN.next()

    new BuffDefinition(BUFF_BERSERK, BuffIds.berserk)
        ..setTargetAttachmentPoint0(1, "hand,left")
        ..setTargetAttachmentPoint1(1, "hand,right")

    tgen = new BTAbilityTooltipGenerator(
        "Upon killing, causes this unit to attack faster, but take more damage.")
    new AbilityDefinitionBerserk(ABIL_BERSERK)
        ..registerTooltipGenerator(tgen)
        ..setLevels(1)
        ..tooltipStartListen()
        ..setAttackSpeedIncrease(1, 1.5)
        ..addTooltipProperty("Attack Speed Bonus", _ -> "150%")
        ..setDamageTakenIncrease(1, 0.5)
        ..addTooltipProperty("Damage Taken Bonus", _ -> 0.5.toPercent())
        ..setMovementSpeedIncrease(1, 0.3)
        ..addTooltipProperty("Movement Speed Bonus", _ -> 0.3.toPercent())
        ..presetDurationNormal(_ -> 3)
        ..presetCooldown(_ -> 10)
        ..setNameEnhance("Z", "Berserk")
        ..tooltipStopListen(true)
        ..setBuffs(1, BUFF_BERSERK.toRawCode())

    abilTooltipMap.put(ABIL_BERSERK, tgen.generateFullTooltip())

    // Head hunter poison visual
    createVisualAbility(ABIL_POISON_VISUAL)
        ..setTargetAttachments(1)
        ..setTargetAttachmentPoint("weapon")
        ..setArtTarget(Abilities.bottleImpact)
        ..setName("Visual Poison")

    tgen = new BTAbilityTooltipGenerator(
        "Causes a target enemy unit to be bound to the ground so that it cannot" +
        " move.")
    new AbilityDefinitionWeb(ABIL_ENSNARE)
        ..setCheckDependencies(false)
        ..setMissileArt(Abilities.ensnaremissile)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetDurationNormal(_ -> 4)
        ..presetCooldown(_ -> 7)
        ..presetCastRange(_ -> 700)
        ..setNameEnhance("Z", "Ensnare")
        ..tooltipStopListen(true)
        ..setBuffs(1, commaList(BuffIds.ensnareAir, BuffIds.ensnareGround))
        ..setTargetsAllowed(1, commaList(TargetsAllowed.enemies))

    abilTooltipMap.put(ABIL_ENSNARE, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Reduces the effectiveness of healing and regeneration on enemy units.")
    new AbilityDefinitionHealReductionBonus(ABIL_BURNING_BLADE_50)
        ..setCheckDependencies(false)
        ..setArtTarget(Abilities.flameStrikeEmbers)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..setHealingMultiplier(1, 0.5)
        ..addTooltipProperty("Heal Reduction", _ -> 0.5.toPercent())
        ..presetDurationNormal(_ -> 4)
        ..setNameEnhance("Z", "Burning Blade")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_BURNING_BLADE_50, tgen.generateFullTooltip())

    let raiderCount = BTBuildingData.getUnitCount(BUILDING_RAIDER)
    var itm = createBasicItem(ITEM_BURNING_BLADE)
        ..setItemCost(0, 200, raiderCount, 1, 1)
        ..setNameEnhance("X", "Add Burning Blades")
        ..setInterfaceIcon(Icons.bTNArcaniteMelee)

    tgen = new BTAbilityTooltipGenerator(
        "Reduces the effectiveness of healing and regeneration on enemy units.")
    new AbilityDefinitionHealReductionBonus(ABIL_BURNING_BLADE_100)
        ..setCheckDependencies(false)
        ..setArtTarget(LocalAbilities.sweepFireLarge)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..setHealingMultiplier(1, 1)
        ..presetDamageBonus(_ -> 20)
        ..addTooltipProperty("Heal Reduction", _ -> "100%")
        ..presetDurationNormal(_ -> 4)
        ..setNameEnhance("Z", "Burning Blade")
        ..tooltipStopListen(true)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_BURNING_BLADE_100, tgen.generateFullTooltip())


    let witchDoctorCount = BTBuildingData.getUnitCount(BUILDING_WITCH_DOCTOR)
    itm = createBasicItem(ITEM_HEALING_WAVE)
        ..setItemCost(0, 100, 1, witchDoctorCount, witchDoctorCount)
        ..setNameEnhance("X", "Add 1 Healing Wave")
        ..setInterfaceIcon(Icons.bTNHealingWave)

    tgen = new BTAbilityTooltipGenerator(
        "Calls forth a wave of healing energy that bounces.")
    new AbilityDefinitionHealingWaveCreep(ABIL_HEALING_WAVE)
        ..registerTooltipGenerator(tgen)
        ..setLevels(1)
        ..setDummyAbility()
        ..tooltipStartListen()
        ..setNameEnhance("X", "Healing Wave")
        ..setDamageperTarget(1, 150)
        ..addTooltipProperty("Heal by target", _ -> "150")
        ..presetNumberofTargetsHit(_ -> 4)
        ..presetManaCost(_ -> 75)
        ..tooltipStopListen(false)

    createAutoCastedAllieHealdAbility(ABIL_AUTOCAST_HEALING_WAVE)
        ..presetCastRange(_ -> 700)
        ..presetManaCost(_ -> 75)
        ..tooltipStartListen()
        ..registerTooltipGenerator(tgen)
        ..presetCooldown(_ -> 6)
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_HEALING_WAVE, tgen.generateFullTooltip())

    itm = createBasicItem(ITEM_ACID_BOMB)
        ..setItemCost(0, 150, 1, 1, 1)
        ..setNameEnhance("X", "Replace 1 Healing Wave with 1 Acid Bomb")
        ..setInterfaceIcon(Icons.bTNAcidBomb)

    tgen = new BTAbilityTooltipGenerator(
        "Decreases armor of the target and nearby enemy units.")
    new AbilityDefinitionAlchemistAcidBomb(ABIL_ACID_BOMB)
        ..setLevels(1)
        ..setDummyAbility()
        ..setCheckDependencies(false)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetArmorPenalty(_ -> 4)
        ..presetPrimaryDamage(_ -> 30)
        ..presetSecondaryDamage(_ -> 20)
        ..presetDurationNormal(_ -> 6)
        ..presetManaCost(_ -> 100)
        ..presetAreaofEffect(_ -> 200)
        ..setNameEnhance("Z", "Acid Bomb")
        ..tooltipStopListen(false)

    createAutoCastedEnemyAbility(ABIL_AUTOCAST_ACID_BOMB)
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 700)
        ..presetManaCost(_ -> 100)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 8)
        ..tooltipStopListen(true)

    tgen.applyToDefItem(itm)


    itm = createBasicItem(ITEM_DRUNKEN_HAZE)
        ..setItemCost(0, 150, 1, 1, 1)
        ..setNameEnhance("Z", "Replace 1 Healing Wave with 1 Drunken Haze")
        ..setInterfaceIcon(Icons.bTNStrongDrink)

    tgen = new BTAbilityTooltipGenerator(
        "Drenches enemy units in alcohol, silencing them and causing their attack to miss.")
    new AbilityDefinitionBrewmasterDrunkenHaze(ABIL_DRUNKEN_HAZE)
        ..setLevels(1)
        ..setDummyAbility()
        ..setCheckDependencies(false)
        ..registerTooltipGenerator(tgen)
        ..presetAttacksPrevented(_ -> 4)
        ..tooltipStartListen()
        ..setChanceToMiss(1, 0.40)
        ..addTooltipProperty("Chance to miss", _ -> 0.40.toPercent())
        ..presetDurationNormal(_ -> 4)
        ..presetManaCost(_ -> 100)
        ..presetAreaofEffect(_ -> 200)
        ..setNameEnhance("Z", "Drunken Haze")
        ..tooltipStopListen(false)

    createAutoCastedLongRangeEnemyAbility(ABIL_AUTOCAST_DRUNKEN_HAZE)
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 700)
        ..presetManaCost(_ -> 100)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 6)
        ..tooltipStopListen(true)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_DRUNKEN_HAZE, tgen.generateFullTooltip())

    itm = createBasicItem(ITEM_MANA_WARD)
        ..setItemCost(0, 250, 1, 1, 1)
        ..setNameEnhance("C", "Replace 1 Healing Wave with 1 Mana Ward")
        ..setInterfaceIcon(Icons.bTNHealingWard)

    tgen = new BTAbilityTooltipGenerator(
        "Summons an immovable ward that restores mana every seconds to nearby allies."
        )

    let BUFF_ID = compiletime(BUFF_ID_GEN.next())
    new BuffDefinition(BUFF_ID, BuffIds.brillianceAura)
        ..setIcon(Icons.bTNHealingWard)
        ..setArtTarget(Abilities.aNrlTarget)
        ..setTargetAttachmentPoint0(1, "origin")
        ..setTooltipNormal(1, "Mana Ward")
        ..setTooltipNormalExtended(1, "This unit's mana is being restored " +
            " by a nearby ward")

    new AbilityDefinitionNeutralRegenmanaonly(ABIL_MANA_WARD_AURA)
        ..setLevels(1)
        ..setCheckDependencies(false)
        ..setArtTarget("")
        ..presetBuffs(_ -> commaList(BUFF_ID))
        ..registerTooltipGenerator(tgen)
        ..presetAmountRegenerated(_ -> 0.04)
        ..tooltipStartListen()
        ..addTooltipProperty("Mana Regeneration", _ -> "4%")
        ..setTargetsAllowed(1, commaList(TargetsAllowed.ground, TargetsAllowed.organic, TargetsAllowed.friend))
        ..presetAreaofEffect(_ -> 500)
        ..setNameEnhance("C", "Mana Ward Aura")
        ..tooltipStopListen(false)

    new AbilityDefinitionHealingWard(ABIL_MANA_WARD)
        ..setLevels(1)
        ..setWardUnitType(1, commaList(UNIT_MANA_WARD))
        ..presetCooldown(_ -> 0)
        ..setCheckDependencies(false)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetDurationNormal(_ -> 10)
        ..presetManaCost(_ -> 200)
        ..presetCastRange(_ -> 700)
        ..setNameEnhance("C", "Mana Ward")
        ..tooltipStopListen(false)

    createAutoCastAlliedManaTarget(ABIL_AUTOCAST_MANA_WARD)
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 700)
        ..presetManaCost(_ -> 200)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 10)
        ..tooltipStopListen(true)

    new UnitDefinition(UNIT_MANA_WARD, UnitIds.healingward)
        ..setNormalAbilities(commaList(ABIL_MANA_WARD_AURA))
        ..setName("Mana Ward")
        ..setTintingColorBlue(255)
        ..setTintingColorGreen(0)
        ..setTintingColorRed(0)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_MANA_WARD, tgen.generateFullTooltip())


    let shamanCount = BTBuildingData.getUnitCount(BUILDING_SHAMAN)
    itm = createBasicItem(ITEM_ORB_LIGHTNING)
        ..setItemCost(0, 200, shamanCount, 1, 1)
        ..setNameEnhance("Z", "Add 4 Lightning Orb")
        ..setInterfaceIcon(Icons.bTNOrbOfLightning)

    tgen = new BTAbilityTooltipGenerator(
        "Removes all buffs from a target unit, and slows its movement speed. " +
        "Deals damage to summoned units."
        )
    let abilId = ABIL_ID_GEN.next()
    new AbilityDefinitionOrbofLightning(ABIL_ORB_LIGHTNING)
        ..setEnabledAttackIndex(1, 0)
        ..presetChanceToHitUnits(_ -> 30)
        ..presetChanceToHitSummons(_ -> 60)
        ..setEffectAbility(1, abilId.toRawCode())
        ..setDamageBonus(1, 30)

    new AbilityDefinitionPurgeorb(abilId)
        ..presetCastRange(_ -> 700)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..addTooltipProperty("Chance to hit units", _ ->  0.3.toPercent())
        ..addTooltipProperty("Chance to hit summons", _ ->  0.6.toPercent())
        ..addTooltipProperty("Damage Bonus", _ -> "30")
        ..presetSummonedUnitDamage(_ -> 400)
        ..presetUnitPauseDuration(_ -> 1.5)
        ..presetDurationNormal(_ -> 5)
        ..setNameEnhance("Z", "Orb of Lightning")
        ..tooltipStopListen(true)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_ORB_LIGHTNING, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Summons a Spirit Wolf."
    )
    new AbilityDefinitionSpiritWolfcreep(ABIL_SUMMON_SPIRIT_WOLF1)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setAreaofEffect(1, 100)
        ..registerTooltipGenerator(tgen)
        ..setSummonedUnit(1, commaList(UNIT_SPIRIT_WOLF1))
        ..tooltipStartListen()
        ..setNumberofSummonedUnits(1, 1)
        ..presetManaCost(_ -> 0)
        ..presetDurationNormal(_ -> 30)
        ..presetCooldown(_ -> 45)
        ..setNameEnhance("Z", "Summon Spirit Wolf")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_SUMMON_SPIRIT_WOLF1, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "Summons 3 Spirit Wolf."
    )
    new AbilityDefinitionSpiritWolfcreep(ABIL_SUMMON_SPIRIT_WOLF2)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setAreaofEffect(1, 100)
        ..registerTooltipGenerator(tgen)
        ..setSummonedUnit(1, commaList(UNIT_SPIRIT_WOLF1))
        ..tooltipStartListen()
        ..setNumberofSummonedUnits(1, 3)
        ..presetManaCost(_ -> 0)
        ..presetDurationNormal(_ -> 45)
        ..presetCooldown(_ -> 45)
        ..setNameEnhance("Z", "Summon Spirit Wolf Pack")
        ..tooltipStopListen(true)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_SUMMON_SPIRIT_WOLF2, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "Calls forth a bolt of lightning that deals damage and bounce.")
    new AbilityDefinitionFarseerChainLightning(ABIL_CHAIN_LIGHTNING)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..setLevels(1)
        ..presetDamageReductionperTarget(_ -> 0)
        ..presetCooldown(_ -> 0)
        ..tooltipStartListen()
        ..presetDamageperTarget(_ -> 300)
        ..presetNumberofTargetsHit(_ -> 6)
        ..presetManaCost(_ -> 200)
        ..presetCastRange(_ -> 700)
        ..setNameEnhance("Z", "Chain Lightning")
        ..tooltipStopListen(false)

    createAutoCastedEnemyAbility(ABIL_AUTOCAST_CHAIN_LIGHTNING)
        ..setAnimationNames("spell,chain")
        ..presetManaCost(_ -> 200)
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 700)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 5)
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_CHAIN_LIGHTNING, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "The Ogre tosses a unit with its club, " +
        "deals damage to unit on landing zone and reduces " +
        "their attack and movement speed. " +
        "Cannot toss giant unit."
        )

    // new AbilityDefinitionMountainKingThunderClap(ABIL_OGRE_SWING_SLAM)
    //     ..setDummyAbility()
    //     ..setHeroAbility(false)
    //     ..setLevels(1)
    //     ..registerTooltipGenerator(tgen)
    //     ..tooltipStartListen()
    //     ..setAttackSpeedReduction(1, 0.2)
    //     ..addTooltipProperty("Attack Speed Reduction", _ -> 0.2.toPercent())
    //     ..setMovementSpeedReduction(1, 0.5)
    //     ..addTooltipProperty("Movement Speed Reduction", _ -> 0.5.toPercent())
    //     ..presetAOEDamage(_ -> 30)
    //     ..presetMaximumDamage(_ -> 300)
    //     ..presetAreaofEffect(_ -> 250)
    //     ..presetDurationNormal(_ -> 3.)
    //     ..tooltipStopListen(true)
    //     ..setName("Ogre Slam")

    new AbilityDefinitionAlchemistAcidBomb(ABIL_OGRE_SWING_SLAM)
        ..setDummyAbility()
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setMissileArt("")
        ..presetBuffs(_ -> commaList(BuffIds.thunderClap))
        ..registerTooltipGenerator(tgen)
        ..presetPrimaryDamage(_ -> 0)
        ..presetSecondaryDamage(_ -> 0)
        ..presetArmorPenalty(_ -> 0)
        ..tooltipStartListen()
        ..addTooltipProperty("Damage", _ -> "60")
        ..addTooltipProperty("Max damage", _ -> "600")
        ..setAttackSpeedReduction(1, -0.4)
        ..addTooltipProperty("Attack Speed Reduction", _ -> 0.4.toPercent())
        ..setMovementSpeedReduction(1, -0.5)
        ..addTooltipProperty("Movement Speed Reduction", _ -> 0.5.toPercent())
        ..presetAreaofEffect(_ -> 250)
        ..presetDurationNormal(_ -> 3.)
        ..tooltipStopListen(true)
        ..setTargetsAllowed(1, commaList(TargetsAllowed.enemies, TargetsAllowed.self))
        ..setName("Ogre Slam")

    createAutoCastedEnemyAbility(ABIL_OGRE_SWING)
        ..registerTooltipGenerator(tgen)
        ..setAnimationNames("attack,slam")
        ..setCastRange(1, 150)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 20)
        ..setNameEnhance("Z", "Ogre Swing")
        ..tooltipStopListen(true)
        ..setTargetsAllowed(1, commaList(
            TargetsAllowed.enemies,
            TargetsAllowed.ground,
            TargetsAllowed.nonancient
            ))

    abilTooltipMap.put(ABIL_OGRE_SWING, tgen.generateFullTooltip())

    // let BUFF_FIREBOLT_ID = compiletime(BUFF_ID_GEN.next())
    // new BuffDefinition(BUFF_FIREBOLT_ID, BuffIds.acidBomb)
    //     ..setIcon(Icons.bTNFire)
    //     ..setArtTarget(1, Abilities.flameStrikeDamageTarget)
    //     ..setName(1, "Firebolt")
    //     ..setTooltipNormal(1, "Firebolt")
    //     ..setTooltipNormalExtended(1, "This has been hit by a firebolt; is it taking damage over time")

    // tgen = new BTAbilityTooltipGenerator(
    //     "Hurls a fiery bolt that stuns a target enemy unit.")
    // new AbilityDefinitionAlchemistAcidBomb(ABIL_FIREBOLT)
    //     ..setHeroAbility(false)
    //     ..setMissileArc(0)
    //     ..setMissileArt(Abilities.phoenix_Missile)
    //     ..registerTooltipGenerator(tgen)
    //     ..setBuffs(1, commaList(BUFF_FIREBOLT_ID))
    //     ..setDummyAbility()
    //     ..setArmorPenalty(1, 0)
    //     ..tooltipStartListen()
    //     ..presetPrimaryDamage(_ -> 30)
    //     ..presetSecondaryDamage(_ -> 15)
    //     ..presetAreaofEffect(_ -> 200)
    //     ..presetDurationNormal(_ -> 5)
    //     ..presetManaCost(_ -> 125)
    //     ..setNameEnhance("Z", "Firebolt")
    //     ..tooltipStopListen(false)


    tgen = new BTAbilityTooltipGenerator(
        "Hurls a fiery bolt that stuns a target enemy unit.")
    new AbilityDefinitionFireBoltcreep(ABIL_FIREBOLT)
        ..setHeroAbility(false)
        ..setMissileArt(Abilities.fireBallMissile)
        ..registerTooltipGenerator(tgen)
        ..setDummyAbility()
        ..tooltipStartListen()
        ..presetDamage(_ -> 360)
        ..presetDurationNormal(_ -> 2)
        ..presetManaCost(_ -> 75)
        ..setNameEnhance("Z", "Firebolt")
        ..tooltipStopListen(false)

    createAutoCastedLongRangeEnemyAbility(ABIL_AUTOCAST_FIREBOLT)
        ..presetManaCost(_ -> 75)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetCastRange(_ -> 900)
        ..presetCooldown(_ -> 5)
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_FIREBOLT, tgen.generateFullTooltip())


    new BuffDefinition(BUFF_RAMPAGE, BuffIds.battleRoar)
        ..setIcon(Icons.bTNBerserk)
        ..setArtTarget(Abilities.trollBeserkerTarget)
        ..setTargetAttachmentPoint1(1, "head")
        ..setTooltipNormal(1, "Rampage")
        ..setTooltipNormalExtended(1, "This unit has rampage;" +
            " its attack damage has been increased.")

    itm = createBasicItem(ITEM_RAMPAGE)
        ..setItemCost(0, 500, 1, 1, 1)
        ..setNameEnhance("Z", "Add Rampage ability")
        ..setInterfaceIcon(Icons.bTNBerserk)
    tgen = new BTAbilityTooltipGenerator(
        "Increase nearby allies damage every time this unit kills an enemy. " +
        "Each chained kill increase the level of the ability. Level count is reset " +
        "when the buff expires."
    )
    new AbilityDefinitionBattleRoar(ABIL_RAMPAGE)
        ..setAnimationNames("")
        ..setIconNormal(Icons.bTNBerserk)
        ..setHeroAbility(false)
        ..presetDefenseIncrease(lvl -> 0)
        ..presetLifeRegenerationRate(lvl -> 0)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..setLevels(5)
        ..presetDamageIncrease(lvl -> 15. * lvl)
        ..presetAreaofEffect(lvl -> 200. + 25 * lvl)
        ..presetDurationNormal(lvl -> 5)
        ..setNameEnhance("Z", "Rampage")
        ..tooltipStopListen(true)
        ..presetBuffs(_ -> BUFF_RAMPAGE.toRawCode())
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 0)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_RAMPAGE, tgen.generateFullTooltip())


    new BuffDefinition(BUFF_KILLING_SPREE, BuffIds.battleRoar)
        ..setIcon(Icons.bTNChaosGrunt)
        ..setTargetAttachmentPoint1(1, "head")
        ..setTooltipNormal(1, "Killing Spree")
        ..setTooltipNormalExtended(1, "This unit is on a killing spree;" +
            " its attack damage is increased.")

    tgen = new BTAbilityTooltipGenerator(
        "This unit gains temporary damage boost on every kill. " +
        "Each chained kill increase the level of the ability. Level count is reset " +
        "when the buff expires."
    )
    new AbilityDefinitionRoar(ABIL_KILLING_SPREE)
        ..setAnimationNames("attack")
        ..setHeroAbility(false)
        ..presetAreaofEffect(lvl -> 1)
        ..presetDefenseIncrease(lvl -> 0)
        ..presetLifeRegenerationRate(lvl -> 0)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetDamageIncrease(lvl -> 0.4 * lvl)
        ..setLevels(5)
        ..addTooltipProperty("Damage Increase", lvl -> (0.4 * lvl * 100).percRound())
        ..presetDurationNormal(lvl -> 10)
        ..setNameEnhance("Z", "Killing Spree")
        ..tooltipStopListen(true)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 0)
        ..setArtCaster("")
        ..presetBuffs(_ -> BUFF_KILLING_SPREE.toRawCode())


    abilTooltipMap.put(ABIL_KILLING_SPREE, tgen.generateFullTooltip())
