package HumanAbilitiesDef

// Standard libs imports:
import Assets
import BuffObjEditing
import ClosureEvents
import ClosureForGroups
import HashMap
import InstantDummyCaster
import OrderIds

// Local imports:
import AbilityObjEditingCommons
import ArmySpawner
import BTAbilities
import BTAbilityTooltipGenerator
import ColorUtils
import ItemObjEditingCommon
import LocalObjectIDs
import TooltipsUtils
import UnitObjEditingCommon

let SLOW_AOE = 150.
let SLOW_TARGET_COUNT = 2

@compiletime function createHumanAbilities()
    var tgen = new BTAbilityTooltipGenerator("Heals 1 friendly unit.")
    new AbilityDefinitionHealCreepNormal(ABIL_HEAL)
        ..registerTooltipGenerator(tgen)
        ..setLevels(1)
        ..tooltipStartListen()
        ..setNameEnhance("Z", "Heal")
        ..presetHitPointsGained(_ -> 30)
        ..presetCooldown(_ -> 1)
        ..presetManaCost(_ -> 10)
        ..presetCastRange(_ -> 700)
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_HEAL, tgen.generateFullTooltip())

    let ARMOR_BLESSING_BUFF = BUFF_ID_GEN.next()
    new BuffDefinition(ARMOR_BLESSING_BUFF, BuffIds.innerFire)
        ..setIcon(Icons.bTNBarkSkin)
        ..setArtSpecial(1,"")
        ..setTooltipNormal(1, "Armor Blessing")
        ..setTooltipNormalExtended(1, "Gains additional armor")
        ..setArtTarget(1, Abilities.aIdaTarget)

    let priestCount = BTBuildingData.getUnitCount(BUILDING_PRIEST)
    var itm = createBasicItem(ITEM_ARMOR_BLESSING)
        ..setItemCost(0, 50, 1, priestCount, priestCount)
        ..setNameEnhance("X", "Replace 1 Heal with 1 Armor Blessing")
        ..setInterfaceIcon(Icons.bTNBarkSkin)

    tgen = new BTAbilityTooltipGenerator("Increases armor.")
    new AbilityDefinitionInnerFireCreep(ABIL_ARMOR_BLESSING)
        ..registerTooltipGenerator(tgen)
        ..setLevels(1)
        ..tooltipStartListen()
        ..setDamageIncrease(1, 0)
        ..setNameEnhance("X", "Armor Blessing")
        ..setName("Armor Blessing")
        ..presetDefenseIncrease(_ -> 4)
        ..presetCooldown(_ -> 2)
        ..presetManaCost(_ -> 50)
        ..presetCastRange(_ -> 700)
        ..setBuffs(1, ARMOR_BLESSING_BUFF.toRawCode())
        ..tooltipStopListen(true)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_ARMOR_BLESSING, tgen.generateFullTooltip())

    let WEAPON_BLESSING_BUFF = BUFF_ID_GEN.next()
    new BuffDefinition(WEAPON_BLESSING_BUFF, BuffIds.innerFire)
        ..setIcon(Icons.bTNTransmute)
        ..setArtSpecial(1,"")
        ..setTooltipNormal(1, "Weapon Blessing")
        ..setTooltipNormalExtended(1, "Gains additional damage")
        ..setArtTarget(1, Abilities.faerieDragonMissile)
        ..setTargetAttachmentPoint0("weapon")
        ..setTargetAttachments(1)

    itm = createBasicItem(ITEM_WEAPON_BLESSING)
        ..setItemCost(0, 50, 1, priestCount, priestCount)
        ..setNameEnhance("C", "Replace 1 Heal with 1 Weapon Blessing")
        ..setInterfaceIcon(Icons.bTNTransmute)

    tgen = new BTAbilityTooltipGenerator("Increases damage.")
    new AbilityDefinitionInnerFireCreep(ABIL_WEAPON_BLESSING)
        ..registerTooltipGenerator(tgen)
        ..setLevels(1)
        ..presetDefenseIncrease(_ -> 0)
        ..tooltipStartListen()
        ..setNameEnhance("C", "Weapon Blessing")
        ..setName("Weapon Blessing")
        ..addTooltipProperty("Damage Increase", _-> 0.5.toPercent())
        ..setDamageIncrease(1, 0.5)
        ..presetCooldown(_ -> 2)
        ..presetManaCost(_ -> 50)
        ..presetCastRange(_ -> 700)
        ..setBuffs(1, WEAPON_BLESSING_BUFF.toRawCode())
        ..tooltipStopListen(true)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_WEAPON_BLESSING, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "Slows a target enemy unit's attack rate and movement speed." +
        " Applies to multiple targets."
    )
    new AbilityDefinitionSlow(ABIL_DUMMY_CAST_SLOW)
        ..presetDurationNormal(_ -> 15)
        ..setDummyAbility()
        ..setNameEnhance("Z", "Slow Dummy")

    new AbilityDefinitionSlow(ABIL_SLOW)
        ..setLevels(1)
        ..tooltipStartListen()
        ..registerTooltipGenerator(tgen)
        ..presetAttackSpeedFactor(_ -> 0.25)
        ..presetMovementSpeedFactor(_ -> 0.4)
        ..presetDurationNormal(_ -> 15)
        ..addTooltipProperty("Target limit", _ -> SLOW_TARGET_COUNT.toString())
        ..presetAreaofEffect(_ -> SLOW_AOE)
        ..presetManaCost(_ -> 90)
        ..presetCooldown(_ -> 4)
        ..presetCastRange(_ -> 750)
        ..setNameEnhance("Z", "Slow")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_SLOW, tgen.generateFullTooltip())


    let sorceressCount = BTBuildingData.getUnitCount(BUILDING_SORCERESS)
    itm = createBasicItem(ITEM_DARK_MAGE)
        ..setItemCost(0, 100, 1, sorceressCount, sorceressCount)
        ..setNameEnhance("Z", "Add 1 Orb of Darkness")
        ..setInterfaceIcon(Icons.bTNOrbOfDarkness)

    tgen = new BTAbilityTooltipGenerator("Increases damage. Units killed "+
        "by the mage will spawn a Ghost."
        )
    let abilId = ABIL_ID_GEN.next()
    new AbilityDefinitionOrbofDarkness(ABIL_ORB_DARKNESS)
        ..setEnabledAttackIndex(1, 0)
        ..setEffectAbility(1, abilId.toRawCode())
        ..setDamageBonus(1, 30)

    new AbilityDefinitionOrbofDarknessBlackArrow(abilId)
        ..registerTooltipGenerator(tgen)
        ..presetSummonedUnitType(_ -> commaList(UNIT_GHOST))
        ..tooltipStartListen()
        ..presetDamageBonus(_ -> 30)
        ..presetNumberofSummonedUnits(_ -> 1)
        ..setNameEnhance("Z", "Orb of Darkness")
        ..tooltipStopListen(true)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_ORB_DARKNESS, tgen.generateFullTooltip())


    itm = createBasicItem(ITEM_FIRE_MAGE)
        ..setItemCost(0, 100, 1, sorceressCount, sorceressCount)
        ..setNameEnhance("X", "Add 1 Fire Orb")
        ..setInterfaceIcon(Icons.bTNOrbOfFire)

    createVisualAbility(ABIL_INCINERATE_VISUAL)
        ..setTargetAttachments(1)
        ..setTargetAttachmentPoint("weapon")
        ..setArtTarget(Abilities.aIfbTarget)
        ..setName("Visual Incinerate")

    tgen = new BTAbilityTooltipGenerator(
        "Increases damage. Units killed by the mage will explode.")
    new AbilityDefinitionFirelordIncinerate(ABIL_INCINERATE)
        ..setLevels(1)
        ..presetBonusDamageMultiplier(_ -> 0)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetDeathDamageFullAmount(_ -> 50)
        ..presetDeathDamageHalfAmount(_ -> 25)
        ..setNameEnhance("X", "Incinerate")
        ..tooltipStopListen(true)

    var tooltip = tgen.generateFullTooltip()

    tgen = new BTAbilityTooltipGenerator("Wreaths an enemy unit in magical flames "
    + "which cause damage over time, prevent the casting of spells, "
    + "and reduce attack damage. Replaces slow."
    )
    new AbilityDefinitionFirelordSoulBurn(ABIL_SOUL_BURN)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..setDummyAbility()
        ..presetManaCost(_ -> 50)
        ..tooltipStartListen()
        ..presetDamageAmount(_ -> 20)
        ..setDamagePenalty(1, 0.5)
        ..addTooltipProperty("Damage Reduction", _-> 0.5.toPercent())
        ..presetDurationNormal(_ -> 6)
        ..setNameEnhance("X", "Soul Burn")
        ..tooltipStopListen(false)

    createAutoCastedEnemyAbility(ABIL_AUTOCAST_SOUL_BURN)
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 750)
        ..presetManaCost(_ -> 80)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 5)
        ..tooltipStopListen(true)

    tooltip += "\n\n" + tgen.generateFullTooltipItem()
    itm.setTooltipExtended(tooltip)

    itm = createBasicItem(ITEM_ICE_MAGE)
        ..setItemCost(0, 100, 1, sorceressCount, sorceressCount)
        ..setNameEnhance("C", "Add 1 Frost Orb")
        ..setInterfaceIcon(Icons.bTNOrbOfFrost)

    tgen = new BTAbilityTooltipGenerator(
        "Increases damage. Slow the movement speed and attack "+
        "rate of the enemy for <AIob,Dur1> seconds."
    )
    new AbilityDefinitionFrostDamageBonus(ABIL_ORB_FROST)
        ..setEnabledAttackIndex(1, 0)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetDamageBonus(_ -> 20)
        ..setNameEnhance("Z", "Frost Orb")
        ..tooltipStopListen(true)

    tooltip = tgen.generateFullTooltip()

    tgen = new BTAbilityTooltipGenerator(
    "Blasts enemy units around a target enemy unit with a " +
    "wave of damaging frost that slows movement and attack rate. Replaces slow."
    )
    new AbilityDefinitionFrostNovacreep(ABIL_FROST_NOVA)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..setDummyAbility()
        ..tooltipStartListen()
        ..presetAreaofEffectDamage(_ -> 75)
        ..presetSpecificTargetDamage(_ -> 150)
        ..addTooltipProperty("Attack Speed Reduction", _ -> "25%")
        ..addTooltipProperty("Movement Speed Reduction", _ -> "50%")
        ..presetAreaofEffect(_ -> 150)
        ..presetManaCost(_ -> 125)
        ..presetDurationNormal(_ -> 3)
        ..setNameEnhance("X", "Frost Nova")
        ..tooltipStopListen(false)

    createAutoCastedEnemyAbility(ABIL_AUTOCAST_FROST_NOVA)
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 750)
        ..presetManaCost(_ -> 125)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 5)
        ..tooltipStopListen(true)

    tooltip += "\n\n" + tgen.generateFullTooltipItem()
    itm.setTooltipExtended(tooltip)

    tgen = new BTAbilityTooltipGenerator(
        "Calls down waves of freezing ice shards that damage units " +
        "in a target area. Does not stack with other blizzard."
    )

    new AbilityDefinitionBlizzardcreep(ABIL_BLIZZARD)
        ..setAnimationNames("stand,victory")
        ..setHeroAbility(false)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        // ..setBuffs(1, commaList(BuffIds.blizzardCaster))
        ..presetNumberofShards(_ -> 6)
        ..presetAreaofEffect(_ -> 300)
        ..presetCooldown(_ -> 0)
        ..tooltipStartListen()
        ..presetDamage(_ -> 50)
        ..presetMaximumDamageperWave(_ -> 400)
        ..presetNumberofWaves(_ -> 6)
        ..presetManaCost(_ -> 100)
        ..presetCastRange(_ -> 800)
        ..setNameEnhance("Z", "Blizzard")
        ..tooltipStopListen(false)
        ..setTargetsAllowed(1, commaList(TargetsAllowed.enemies))

    createAutoCastedLongRangeEnemyAbility(ABIL_AUTOCAST_BLIZZARD)
        ..setAnimationNames("stand,victory")
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 800)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 30)
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_BLIZZARD, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Reduces piercing damage. Can reflect piercing missile back to the attacker."
    )

    let footmanCount = BTBuildingData.getUnitCount(BUILDING_FOOTMAN) + 1
    itm = createBasicItem(ITEM_DEFEND)
        ..setItemCost(0, 300, footmanCount, 1, 1)
        ..setNameEnhance("X", "Add Defend ability")
        ..setInterfaceIcon(Icons.bTNDefend)

    new AbilityDefinitionDefend(ABIL_DEFEND)
        ..setCheckDependencies(false)
        ..registerTooltipGenerator(tgen)
        ..presetChancetoDeflect(_ -> 60)
        ..presetDamageDealt(_ -> 1)
        ..presetDamageTaken(_ -> 0.35)
        ..presetMovementSpeedFactor(_ -> 0.0)
        ..tooltipStartListen()
        ..addTooltipProperty("Chance to Deflect", _ -> "60%")
        ..addTooltipProperty("Damage Returned", _ -> "100%")
        ..addTooltipProperty("Damage Taken", _ -> "35%")
        // ..addTooltipProperty("Movement Speed Reduced", _ -> "30%")
        ..setNameEnhance("Z", "Defend")
        ..tooltipStopListen(true)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_DEFEND, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "Steals a positive buff from an enemy unit and applies it to a " +
        "nearby friendly unit, or takes a negative buff from a friendly " +
        "unit and applies it to a nearby enemy unit."
    )

    new AbilityDefinition(ABIL_SPELL_STEAL, AbilityIds.spellSteal)
        ..setCheckDependencies(false)
        ..presetAreaofEffect(_ -> 700)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 3)
        ..presetManaCost(_ -> 100)
        ..presetCastRange(_ -> 700)
        ..setNameEnhance("Z", "Spell Steal")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_SPELL_STEAL, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "Applies a burning damage over time, ignores armor."
    )
    let BUFF_BURN_ID_STACK = BUFF_ID_GEN.next()
    new BuffDefinition(BUFF_BURN_ID_STACK, BuffIds.slowPoisonStacking)
        ..setIcon(Icons.bTNArcaniteMelee)
        ..setTooltipNormal(1, "Holy Blade burn")
        ..setTooltipNormalExtended(1, "This unit is burning; takes pure damage over time.")
        ..setTargetAttachments(1, 1)
        ..setTargetAttachmentPoint0(1, "chest")
        ..setArtTarget(1, Abilities.breathOfFireDamage)

    let BUFF_BURN_ID_NON_STACK = BUFF_ID_GEN.next()
    new BuffDefinition(BUFF_BURN_ID_NON_STACK, BuffIds.slowPoisonNonStacking)
        ..setIcon(Icons.bTNArcaniteMelee)
        ..setTooltipNormal(1, "Holy Blade burn")
        ..setTooltipNormalExtended(1, "This unit is burning; takes pure damage over time.")
        ..setTargetAttachments(1, 1)
        ..setTargetAttachmentPoint0(1, "chest")
        ..setArtTarget(1, Abilities.breathOfFireDamage)

    createVisualAbility(ABIL_HOLY_BLADE_VISUAL)
        ..setTargetAttachments(1)
        ..setTargetAttachmentPoint("weapon,right")
        ..setArtTarget(Abilities.sunderingBlades)
        ..setName("Visual Holy Blade")

    new AbilityDefinitionSlowPoison(ABIL_HOLY_BLADE)
        ..setCheckDependencies(false)
        ..setMovementSpeedFactor(1, 0)
        ..setAttackSpeedFactor(1, 0)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetDamagePerSecond(_ -> 15)
        ..presetDurationNormal(_ -> 5)
        ..setNameEnhance("Z", "Holy Blade")
        ..tooltipStopListen(true)
        ..setTargetsAllowed(1, commaList(TargetsAllowed.ground))
        ..setBuffs(1, commaList(BUFF_BURN_ID_STACK, BUFF_BURN_ID_NON_STACK))

    abilTooltipMap.put(ABIL_HOLY_BLADE, tgen.generateFullTooltip())


    // tgen = new BTAbilityTooltipGenerator(
    //     "Add splash damage."
    // )
    // let riflemanCount = BTBuildingData.getUnitCount(BUILDING_RIFLEMAN)
    // itm = createBasicItem(ITEM_EXPLOSIVE_AMMO)
    //     ..setItemCost(0, 50, 1, riflemanCount, riflemanCount)
    //     ..setNameEnhance("X", "Add 1 Explosive Ammo")
    //     ..setInterfaceIcon(Icons.bTNHumanMissileUpThree)

    // new AbilityDefinitionOrbofAnnihilation(ABIL_EXPLOSIVE_AMMO)
    //     ..setCastRange(1, 0)
    //     ..setManaCost(1, 0)
    //     ..presetDamageBonus(_ -> 0)
    //     ..setFullDamageRadius(1, 25)
    //     ..setHalfDamageRadius(1, 100)
    //     ..setAreaofEffect(1, 150)
    //     ..setMediumDamageFactor(1, 0.4)
    //     ..setSmallDamageFactor(1, 0.1)
    //     ..setArtSpecial("")
    //     ..setSpecialAttachmentPoint("")
    //     ..setMissileArt(Abilities.cannonTowerMissile)
    //     ..setArtTarget(Abilities.cannonTowerMissile)
    //     ..tooltipStartListen()
    //     ..setNameEnhance("Z", "Explosive Ammo Visual")

    // tgen.applyToDefItem(itm)
    // abilTooltipMap.put(ABIL_EXPLOSIVE_AMMO, tgen.generateFullTooltip())

    createVisualAbility(ABIL_EXPLOSIVE_AMMO_VISUAL)
        ..setTargetAttachments(1)
        ..setTargetAttachmentPoint("weapon")
        ..setArtTarget(Abilities.cannonTowerMissile)
        ..setName("Visual Explosive Ammo")


    tgen = new BTAbilityTooltipGenerator(
        "Summon Water Elemental."
    )
    new AbilityDefinitionArchMageSummonWaterElemental(ABIL_WATER_ELEMENTAL)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..setSummonedUnitType(1, commaList(UNIT_WATER_ELEMENTAL))
        ..tooltipStartListen()
        ..setSummonedUnitCount(1, 1)
        ..presetManaCost(_ -> 100)
        ..presetDurationNormal(_ -> 30)
        ..presetCooldown(_ -> 60)
        ..setNameEnhance("Z", "Summon Water Elemental")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_WATER_ELEMENTAL, tgen.generateFullTooltip())


    let BUFF_INSPIRE_ID = BUFF_ID_GEN.next()
    new BuffDefinition(BUFF_INSPIRE_ID, BuffIds.roar)
        ..setIcon(Icons.bTNPriestMaster)
        ..setTooltipNormal(1, "Inspire")
        ..setTooltipNormalExtended(1, "This unit is inspired; regains hit point at high rate.")
        ..setTargetAttachments(1, 1)
        ..setTargetAttachmentPoint0(1, "chest")
        ..setArtTarget(1, Abilities.staff_Sanctuary_Target)

    itm = createBasicItem(ITEM_INSPIRE)
        ..setItemCost(0, 500, 1, 1, 1)
        ..setNameEnhance("X", "Add Inspire ability")
        ..setInterfaceIcon(Icons.bTNInnerFire)
    tgen = new BTAbilityTooltipGenerator(
        "Inspires nearby troops, regenerating their hit points every " +
        "seconds over the duration."
    )
    new AbilityDefinitionRoar(ABIL_INSPIRE)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setDamageIncrease(1, 0)
        ..setDefenseIncrease(1, 0)
        ..setArtCaster(Abilities.resurrectcaster)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetLifeRegenerationRate(_ -> 35)
        ..presetAreaofEffect(_ -> 500)
        ..presetManaCost(_ -> 100)
        ..presetDurationNormal(_ -> 10)
        ..presetCooldown(_ -> 0)
        ..setBuffs(1, BUFF_INSPIRE_ID.toRawCode())
        ..setNameEnhance("Z", "Inspire")
        ..tooltipStopListen(false)

    createAutoCastedEnemyAbility(ABIL_AUTOCAST_INSPIRE)
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 125)
        ..presetManaCost(_ -> 100)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 20)
        ..tooltipStopListen(true)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_INSPIRE, tgen.generateFullTooltip())


init
    EventListener.onTargetCast(ABIL_SLOW) (unit caster, unit target) ->
        int _count = 0
        forUnitsInRange(target.getPos(), SLOW_AOE) (unit u) ->
            if _count < SLOW_TARGET_COUNT
                and u.isEnemyOf(caster)
                and not u.hasAbility(BuffIds.slow)
                InstantDummyCaster.castTarget(
                    caster.getOwner(),
                    ABIL_DUMMY_CAST_SLOW, 1, OrderIds.slow, u)
                _count++
