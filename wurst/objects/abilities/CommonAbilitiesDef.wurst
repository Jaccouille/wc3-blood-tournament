package CommonAbilitiesDef

// Standard libs imports:
import Assets
import BuffObjEditing

// Local imports:
import AbilityObjEditingCommons
import BTAbilities
import BTAbilityTooltipGenerator
import LocalObjectIDs
import TooltipsUtils

function createCleave(int abilId, real distributedDamage, real aoe) returns AbilityDefinitionPitLordCleavingAttack
    let tgen = new BTAbilityTooltipGenerator(
        "This unit damage strikes through to enemies near the primary attacked unit.")
    let abilDef =  new AbilityDefinitionPitLordCleavingAttack(abilId)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..setArtTarget("")
        ..registerTooltipGenerator(tgen)
        ..presetDistributedDamageFactor(_ -> distributedDamage)
        ..tooltipStartListen()
        ..presetAreaofEffect(_ -> aoe)
        ..setName("Cleave " + distributedDamage.toPercent())
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createCriticalStrike(int abilId, real chance, real multiplier) returns AbilityDefinitionCriticalStrikecreep
    let tgen = new BTAbilityTooltipGenerator(
        "Gives a chance to do multiply total damage on an attack. Critical strike never misses.")
    let abilDef = new AbilityDefinitionCriticalStrikecreep(abilId)
        ..registerTooltipGenerator(tgen)
        ..presetChancetoCriticalStrike(_ -> chance)
        ..presetDamageMultiplier(_ -> multiplier)
        ..presetNeverMiss(_ -> true)
        ..tooltipStartListen()
        ..setName("Critical Strike " + chance.toPercent() + ", " + multiplier.toString() + "x")
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createEvasion(int abilId, real value) returns AbilityDefinitionEvasioncreep
    let tgen = new BTAbilityTooltipGenerator(
        "Gives a chance to avoid an attack.")
    let abilDef = new AbilityDefinitionEvasioncreep(abilId)
        ..registerTooltipGenerator(tgen)
        ..setItemAbility(false)
        ..tooltipStartListen()
        ..setName("Evasion " + value.toPercent())
        ..tooltipStopListen()
        ..presetChancetoEvade(_ -> value)
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createBash(int abilId, real value) returns AbilityDefinitionBashcreep
    let tgen = new BTAbilityTooltipGenerator(
        "Gives a chance to stun the target.")
    let abilDef = new AbilityDefinitionBashcreep(abilId)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..setName("Bash " + value.toPercent())
        ..tooltipStopListen()
        ..presetDamageBonus(_ -> 0)
        ..presetChancetoBash(_ -> value)
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createLifeSteal(int abilId, real value) returns AbilityDefinitionVampiricattack
    let tgen = new BTAbilityTooltipGenerator(
        "Recover hit points when hitting an enemy unit.")
    let abilDef = new AbilityDefinitionVampiricattack(abilId)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..setName("Lifesteal " + value.toPercent())
        ..tooltipStopListen()
        ..presetLifeStolenPerAttack(_ -> value)
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createHardenedSkin(int abilId, real value) returns AbilityDefinitionHardenedSkin
    let tgen = new BTAbilityTooltipGenerator("Reduces all attacks damage by {0}."
        .format(value.toInt().toString()))
    let abilDef = new AbilityDefinitionHardenedSkin(abilId)
        ..setCheckDependencies(false)
        ..registerTooltipGenerator(tgen)
        ..presetChancetoReduceDamage(_ -> 100)
        ..presetIgnoredDamage(_ -> value)
        ..presetMinimumDamage(_ -> 3)
        ..tooltipStartListen()
        ..setName("Hardened Skin " + value.toString(0))
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createDevotionAura(int abilId, real value) returns AbilityDefinitionPaladinDevotionAura
    let tgen = new BTAbilityTooltipGenerator(
        "Gives additional armor to nearby friendly units.")
    let abilDef = new AbilityDefinitionPaladinDevotionAura(abilId)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetArmorBonus(_ -> value)
        ..presetAreaofEffect(_ -> 1200)
        ..setName("Devotion Aura " + value.toString(0))
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createBrillianceAura(int abilId, real value) returns AbilityDefinitionArchMageBrillianceAura
    let tgen = new BTAbilityTooltipGenerator(
        "Gives additional mana regeneration to nearby friendly units.")
    let abilDef = new AbilityDefinitionArchMageBrillianceAura(abilId)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetManaRegenerationIncrease(_ -> value)
        ..presetAreaofEffect(_ -> 1200)
        ..setName("Brilliance Aura " + value.toString(0))
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createMeleeAura(int abilId, real value) returns AbilityDefinitionAuraCommandCreep
    let tgen = new BTAbilityTooltipGenerator(
        "Gives extra damage to the attacks of nearby melee friendly units.")
    let abilDef = new AbilityDefinitionAuraCommandCreep(abilId)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..presetRangedBonus(_ -> false)
        ..presetFlatBonus(_ -> true)
        ..tooltipStartListen()
        ..presetAttackDamageIncrease(_ -> value)
        ..presetAreaofEffect(_ -> 1200)
        ..setName("Melee Aura " + value.toString(0))
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createRangedAura(int abilId, real value) returns AbilityDefinitionAuraTrueshotCreep
    let tgen = new BTAbilityTooltipGenerator(
        "Gives extra damage to the attacks of nearby ranged friendly units.")
    let abilDef = new AbilityDefinitionAuraTrueshotCreep(abilId)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..setArtTarget(Abilities.trueshotAura)
        ..setBuffs(1, BuffIds.trueshotAura.toRawCode())
        ..registerTooltipGenerator(tgen)
        ..presetRangedBonus(_ -> true)
        ..presetFlatBonus(_ -> false)
        ..presetDamageBonus(_ -> value)
        ..tooltipStartListen()
        ..addTooltipProperty("Damage Bonus", _ -> (value * 100).percRound())
        ..presetAreaofEffect(_ -> 1200)
        ..setName("Ranged Aura " + (value * 100).percRound())
        ..tooltipStopListen()

    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createMagicResistance(int abilId, real value) returns AbilityDefinitionElunesGrace
    let tgen = new BTAbilityTooltipGenerator(
        "Reduces the damage taken from Spells and Magic attacks.")
    let abilDef = new AbilityDefinitionElunesGrace(abilId)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..setMagicDamageReduction(1, value)
        ..setDamageTaken(1, 1)
        ..setChancetoDeflect(1, 0)
        ..setDeflectDamageTakenPiercing(1, 1)
        ..setDeflectDamageTakenSpells(1, 0)
        ..tooltipStartListen()
        ..setName("Magic Resistance " + value.toPercent())
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createDeflect(int abilId, real value) returns AbilityDefinitionHardenedSkin
    let tgen = new BTAbilityTooltipGenerator(
        "Deflect incoming ranged damage, reducing their damage.")
    let abilDef = new AbilityDefinitionHardenedSkin(abilId)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..setArtCaster(Abilities.defendCaster)
        ..registerTooltipGenerator(tgen)
        ..setIncludeMeleeDamage(1, false)
        ..setIncludeRangedDamage(1, true)
        ..tooltipStartListen()
        ..setChancetoReduceDamage(1, value)
        ..addTooltipProperty("Chance to deflect", _ -> value.toPercent() )
        ..presetIgnoredDamage(_ -> 60)
        ..presetMinimumDamage(_ -> 5)
        ..setCheckDependencies(false)
        ..setRequirements("")
        ..setName("Deflect " + value.toPercent())
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createDamageAura(int abilId, real value) returns AbilityDefinitionAuraWarDrumsKodobeast
    let tgen = new BTAbilityTooltipGenerator(
        "Adds a damage increase to the attacks of nearby friendly units.")
    let abilDef = new AbilityDefinitionAuraWarDrumsKodobeast(abilId)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..setAttackDamageIncrease(1, value)
        ..tooltipStartListen()
        ..presetAreaofEffect(_ -> 1200)
        ..setName("Damage Bonus " + value.toPercent())
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createEnduranceAura(int abilId, real value) returns AbilityDefinitionAuraEnduranceCreep
    let tgen = new BTAbilityTooltipGenerator(
        "Increases attack speed of nearby friendly units.")
    let abilDef = new AbilityDefinitionAuraEnduranceCreep(abilId)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..presetMovementSpeedIncrease(_ -> 0)
        ..presetAttackSpeedIncrease(_ -> value)
        ..tooltipStartListen()
        ..presetAreaofEffect(_ -> 1200)
        ..setName("Attack Speed Bonus " + value.toPercent())
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createSpikedCarapace(int abilId, real value) returns AbilityDefinitionCryptLordSpikedCarapace

    let tgen = new BTAbilityTooltipGenerator(
        "Returns damage to melee attacker.")
    let abilDef = new AbilityDefinitionCryptLordSpikedCarapace(abilId)
        ..setLevels(1)
        ..setDefenseBonus(1, 0)
        ..presetReturnedDamageFactor(_ -> value)
        ..registerTooltipGenerator(tgen)
        ..setItemAbility(false)
        ..tooltipStartListen()
        ..setName("Spiked Carapace " + value.toPercent())
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef


@compiletime function createCleaveAbilities()
    createCleave(ABIL_CLEAVE_10, 0.10, 150.)
    createCleave(ABIL_CLEAVE_20, 0.20, 150.)
    createCleave(ABIL_CLEAVE_30, 0.30, 150.)

@compiletime function createCriticalStrikeAbilities()
    createCriticalStrike(ABIL_CRITICAL_STRIKE_10, 10, 2.)
    createCriticalStrike(ABIL_CRITICAL_STRIKE_20, 20, 2.)
    createCriticalStrike(ABIL_CRITICAL_STRIKE_30, 30, 2.)
    createCriticalStrike(ABIL_CRITICAL_STRIKE_40, 40, 2.)
    createCriticalStrike(ABIL_CRITICAL_STRIKE_50, 50, 2.)
    createCriticalStrike(ABIL_CRITICAL_STRIKE_60, 60, 2.)

@compiletime function createEvasionAbilities()
    createEvasion(ABIL_EVASION_10, 0.10)
    createEvasion(ABIL_EVASION_20, 0.20)
    createEvasion(ABIL_EVASION_30, 0.30)

@compiletime function createBashAbilities()
    createBash(ABIL_BASH_10, 0.10)
    createBash(ABIL_BASH_20, 0.20)
    createBash(ABIL_BASH_30, 0.30)

@compiletime function createLifeStealAbilities()
    createLifeSteal(ABIL_LIFESTEAL_50, 0.50)
    createLifeSteal(ABIL_LIFESTEAL_75, 0.75)
    createLifeSteal(ABIL_LIFESTEAL_100, 1.)

@compiletime function createHardenedSkinAbilities()
    createHardenedSkin(ABIL_HARDENED_SKIN_5, 5)
    createHardenedSkin(ABIL_HARDENED_SKIN_10, 10)
    createHardenedSkin(ABIL_HARDENED_SKIN_15, 15)

@compiletime function createDevotionAbilities()
    createDevotionAura(ABIL_DEVOTION_AURA_2, 2)
    createDevotionAura(ABIL_DEVOTION_AURA_4, 4)

@compiletime function createBrillianceAbilities()
    createBrillianceAura(ABIL_BRILLANCE_AURA_1, 1)
    createBrillianceAura(ABIL_BRILLANCE_AURA_2, 2)

@compiletime function createMeleeAuraAbilities()
    createMeleeAura(ABIL_MELEE_AURA_FLAT_10, 10)
    createMeleeAura(ABIL_MELEE_AURA_FLAT_20, 20)

@compiletime function createMagicResistanceAbilities()
    createMagicResistance(ABIL_MAGIC_ARMOR_30, 0.3)
    createMagicResistance(ABIL_MAGIC_ARMOR_50, 0.5)

@compiletime function createDeflectAbilities()
    createDeflect(ABIL_DEFLECT_30, 30)
    createDeflect(ABIL_DEFLECT_75, 75)

@compiletime function createDamageAuraAbilities()
    createDamageAura(ABIL_DAMAGE_AURA_25, 0.25)

@compiletime function createEnduranceAuraAbilities()
    createEnduranceAura(ABIL_ENDURANCE_AURA_25, 0.25)

@compiletime function createRangedAuraAbilities()
    createRangedAura(ABIL_RANGED_AURA_15, 0.15)
    createRangedAura(ABIL_RANGED_AURA_25, 0.25)


@compiletime function createSpikedCarapaceAbilities()
    let BUFF_ID = compiletime(BUFF_ID_GEN.next())
    new BuffDefinition(BUFF_ID, BuffIds.spikedCarapace)
        ..setArtTarget(1, "")
        ..setName(1, "Spiked Carapace")
        ..setTooltipNormal(1, "Spiked Carapace")
        ..setTooltipNormalExtended(1, "This unit returns damage to melee attackers.")

    createSpikedCarapace(ABIL_SPIKED_CARAPACE_30, 0.3)
        ..setBuffs(1, BUFF_ID.toRawCode())
    createSpikedCarapace(ABIL_SPIKED_CARAPACE_50, 0.5)
        ..setBuffs(1, BUFF_ID.toRawCode())


@compiletime function createArrowAbilites()
    var tgen = new BTAbilityTooltipGenerator("Add Spell damage.")
    new AbilityDefinitionSearingArrowscreep(ABIL_FIRE_ARROW)
        ..registerTooltipGenerator(tgen)
        ..setLevels(1)
        ..tooltipStartListen()
        ..presetDamageBonus(_ -> 25)
        ..setNameEnhance("Z", "Fire Arrow")
        ..tooltipStopListen(true)
        ..presetManaCost(_ -> 0)
        ..presetCastRange(_ -> 700)
    abilTooltipMap.put(ABIL_FIRE_ARROW, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator("Slow target movement and attack speed.")
    new AbilityDefinitionColdArrowscreep(ABIL_FROST_ARROW)
        ..registerTooltipGenerator(tgen)
        ..setLevels(1)
        ..presetAttackSpeedFactor(_ -> 0.35)
        ..presetMovementSpeedFactor(_ -> 0.35)
        ..tooltipStartListen()
        ..addTooltipProperty("Attack Speed Reduction", _ -> "35%")
        ..addTooltipProperty("Movement Speed Reduction", _ -> "35%")
        ..presetDurationNormal(_ -> 3)
        ..setNameEnhance("Z", "Frost Arrow")
        ..tooltipStopListen(true)
        ..presetManaCost(_ -> 0)
        ..presetCastRange(_ -> 700)
    abilTooltipMap.put(ABIL_FROST_ARROW, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator("" +
        "Reduces the effectiveness of healing and regeneration on enemy units.")
    new AbilityDefinitionHealReductionBonus(ABIL_BURNING_ARROW)
        ..registerTooltipGenerator(tgen)
        ..setEnabledAttackIndex(1, 0)
        ..setArtTarget(Abilities.flameStrikeEmbers)
        ..setMissileArt(Abilities.flamingArrowMissile)
        ..tooltipStartListen()
        ..setHealingMultiplier(1, 0.5)
        ..addTooltipProperty("Heal Reduction", _ -> 0.5.toPercent())
        ..presetDurationNormal(_ -> 4)
        ..setNameEnhance("Z", "Burning Arrow")
        ..tooltipStopListen(true)
        ..presetManaCost(_ -> 0)
    abilTooltipMap.put(ABIL_BURNING_ARROW, tgen.generateFullTooltip())


@compiletime function createManashield()
    let tgen = new BTAbilityTooltipGenerator(
        "Activates a shield that absorbs 2 damage per point of mana."
    )
    new AbilityDefinitionManaShieldCreep(ABIL_MANA_SHIELD)
        ..registerTooltipGenerator(tgen)
        ..setManaperHitPoint(1, 2)
        ..presetManaCost(_ -> 0)
        ..setLevels(1)
        ..tooltipStartListen()
        ..setNameEnhance("Z", "Mana Shield")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_MANA_SHIELD, tgen.generateFullTooltip())
