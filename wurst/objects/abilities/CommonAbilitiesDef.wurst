package CommonAbilitiesDef

import LocalObjectIDs
import AbilityTooltipGenerator
import AbilityObjEditingCommons
import BTAbilities
import TooltipsUtils

function createCleave(int abilId, real distributedDamage, real aoe) returns AbilityDefinitionPitLordCleavingAttack
    let tgen = new BTAbilityTooltipGenerator(
        "This unit damage strikes through to enemies near the primary attacked unit.")
    let abilDef =  new AbilityDefinitionPitLordCleavingAttack(abilId)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..presetDistributedDamageFactor(_ -> distributedDamage)
        ..tooltipStartListen()
        ..presetAreaofEffect(_ -> aoe)
        ..setName("Cleave " + distributedDamage.toPercent())
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createCriticalStrike(int abilId, real chance, real multiplier) returns AbilityDefinitionCriticalStrikecreep
    let tgen = new BTAbilityTooltipGenerator(
        "Gives a chance to do multiply total damage on an attack.")
    let abilDef = new AbilityDefinitionCriticalStrikecreep(abilId)
        ..registerTooltipGenerator(tgen)
        ..presetChancetoCriticalStrike(_ -> chance)
        ..tooltipStartListen()
        ..presetDamageMultiplier(_ -> multiplier)
        ..presetNeverMiss(_ -> true)
        ..setName("Critical Strike " + chance.toPercent() + ", " + multiplier.toString() + "x")
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createEvasion(int abilId, real value) returns AbilityDefinitionEvasioncreep
    let tgen = new BTAbilityTooltipGenerator(
        "Gives a chance to avoid an attack.")
    let abilDef = new AbilityDefinitionEvasioncreep(abilId)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..setName("Evasion " + value.toPercent())
        ..tooltipStopListen()
        ..presetChancetoEvade(_ -> value)
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createBash(int abilId, real value) returns AbilityDefinitionBashcreep
    let tgen = new BTAbilityTooltipGenerator(
        "Gives a chance to stun the target.")
    let abilDef = new AbilityDefinitionBashcreep(abilId)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..setName("Bash " + value.toPercent())
        ..tooltipStopListen()
        ..presetDamageBonus(_ -> 0)
        ..presetChancetoBash(_ -> value)
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createLifeSteal(int abilId, real value) returns AbilityDefinitionVampiricattack
    let tgen = new BTAbilityTooltipGenerator(
        "Recover hit points when hitting an enemy unit.")
    let abilDef = new AbilityDefinitionVampiricattack(abilId)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..setName("Lifesteal " + value.toPercent())
        ..tooltipStopListen()
        ..presetLifeStolenPerAttack(_ -> value)
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createHardenedSkin(int abilId, real value) returns AbilityDefinitionHardenedSkin
    let tgen = new BTAbilityTooltipGenerator(
        "Reduces all attacks damage.")
    let abilDef = new AbilityDefinitionHardenedSkin(abilId)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetChancetoReduceDamage(_ -> 100)
        ..presetIgnoredDamage(_ -> value)
        ..presetMinimumDamage(_ -> 3)
        ..setName("Hardened Skin " + value.toString())
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createDevotionAura(int abilId, real value) returns AbilityDefinitionPaladinDevotionAura
    let tgen = new BTAbilityTooltipGenerator(
        "Gives additional armor to nearby friendly units.")
    let abilDef = new AbilityDefinitionPaladinDevotionAura(abilId)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetArmorBonus(_ -> value)
        ..presetAreaofEffect(_ -> 900)
        ..setName("Devotion Aura " + value.toString(0))
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createBrillianceAura(int abilId, real value) returns AbilityDefinitionArchMageBrillianceAura
    let tgen = new BTAbilityTooltipGenerator(
        "Gives additional mana regeneration to nearby friendly units.")
    let abilDef = new AbilityDefinitionArchMageBrillianceAura(abilId)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetManaRegenerationIncrease(_ -> value)
        ..presetAreaofEffect(_ -> 900)
        ..setName("Brilliance Aura " + value.toString(0))
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createMeleeAura(int abilId, real value) returns AbilityDefinitionAuraCommandCreep
    let tgen = new BTAbilityTooltipGenerator(
        "Gives extra damage to the attacks of nearby melee friendly units.")
    let abilDef = new AbilityDefinitionAuraCommandCreep(abilId)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..presetRangedBonus(_ -> false)
        ..presetFlatBonus(_ -> true)
        ..tooltipStartListen()
        ..presetAttackDamageIncrease(_ -> value)
        ..presetAreaofEffect(_ -> 900)
        ..setName("Melee Aura " + value.toString(0))
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

function createMagicResistance(int abilId, real value) returns AbilityDefinitionElunesGrace
    let tgen = new BTAbilityTooltipGenerator(
        "Reduces the damage taken from Spells and Magic attacks.")
    let abilDef = new AbilityDefinitionElunesGrace(abilId)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..setMagicDamageReduction(1, value)
        ..setDamageTaken(1, 1)
        ..setChancetoDeflect(1, 0)
        ..setDeflectDamageTakenPiercing(1, 1)
        ..setDeflectDamageTakenSpells(1, 0)
        ..tooltipStartListen()
        ..setName("Magic Resistance " + value.toPercent())
        ..tooltipStopListen()
    abilTooltipMap.put(abilId, tgen.generateFullTooltip())
    return abilDef

@compiletime function createCleaveAbilities()
    createCleave(ABIL_CLEAVE_10, 0.10, 150.)
    createCleave(ABIL_CLEAVE_20, 0.20, 150.)
    createCleave(ABIL_CLEAVE_30, 0.30, 150.)

@compiletime function createCriticalStrikeAbilities()
    createCriticalStrike(ABIL_CRITICAL_STRIKE_10, 0.10, 2.)
    createCriticalStrike(ABIL_CRITICAL_STRIKE_20, 0.20, 2.)
    createCriticalStrike(ABIL_CRITICAL_STRIKE_30, 0.30, 2.)

@compiletime function createEvasionAbilities()
    createEvasion(ABIL_EVASION_10, 0.10)
    createEvasion(ABIL_EVASION_20, 0.20)
    createEvasion(ABIL_EVASION_30, 0.30)

@compiletime function createBashAbilities()
    createBash(ABIL_BASH_10, 0.10)
    createBash(ABIL_BASH_20, 0.20)
    createBash(ABIL_BASH_30, 0.30)

@compiletime function createLifeStealAbilities()
    createLifeSteal(ABIL_LIFESTEAL_50, 0.50)
    createLifeSteal(ABIL_LIFESTEAL_75, 0.75)
    createLifeSteal(ABIL_LIFESTEAL_100, 1.)

@compiletime function createHardenedSkinAbilities()
    createHardenedSkin(ABIL_HARDENED_SKIN_5, 5)
    createHardenedSkin(ABIL_HARDENED_SKIN_10, 10)
    createHardenedSkin(ABIL_HARDENED_SKIN_15, 15)

@compiletime function createDevotionAbilities()
    createDevotionAura(ABIL_DEVOTION_AURA_2, 2)
    createDevotionAura(ABIL_DEVOTION_AURA_4, 4)

@compiletime function createBrillianceAbilities()
    createBrillianceAura(ABIL_BRILLANCE_AURA_1, 1)
    createBrillianceAura(ABIL_BRILLANCE_AURA_2, 2)

@compiletime function createMeleeAuraAbilities()
    createMeleeAura(ABIL_MELEE_AURA_FLAT_10, 10)
    createMeleeAura(ABIL_MELEE_AURA_FLAT_20, 20)

@compiletime function createMagicResistanceAbilities()
    createMagicResistance(ABIL_MAGIC_ARMOR_30, 0.3)
    createMagicResistance(ABIL_MAGIC_ARMOR_50, 0.5)

@compiletime function createArrowAbilites()
    var tgen = new BTAbilityTooltipGenerator("Add Spell damage.")
    new AbilityDefinitionSearingArrowscreep(ABIL_FIRE_ARROW)
        ..registerTooltipGenerator(tgen)
        ..setLevels(1)
        ..tooltipStartListen()
        ..presetDamageBonus(_ -> 25)
        ..tooltipStopListen(true)
        ..presetManaCost(_ -> 0)
        ..presetCastRange(_ -> 700)
        ..setNameEnhance("Z", "Fire Arrow")
    abilTooltipMap.put(ABIL_FIRE_ARROW, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator("Slow target movement and attack speed.")
    new AbilityDefinitionColdArrowscreep(ABIL_FROST_ARROW)
        ..registerTooltipGenerator(tgen)
        ..setLevels(1)
        ..tooltipStartListen()
        ..presetAttackSpeedFactor(_ -> 0.35)
        ..presetMovementSpeedFactor(_ -> 0.35)
        ..presetDurationNormal(_ -> 3)
        ..tooltipStopListen(true)
        ..presetManaCost(_ -> 0)
        ..presetCastRange(_ -> 700)
        ..setNameEnhance("Z", "Frost Arrow")
    abilTooltipMap.put(ABIL_FROST_ARROW, tgen.generateFullTooltip())


@compiletime function createManashield()
    let tgen = new BTAbilityTooltipGenerator(
        "Activates a shield that absorbs 3 damage per point of mana."
    )
    new AbilityDefinitionManaShieldCreep(ABIL_MANA_SHIELD)
        ..registerTooltipGenerator(tgen)
        ..setManaperHitPoint(1, 3)
        ..presetManaCost(_ -> 0)
        ..setLevels(1)
        ..tooltipStartListen()
        ..setNameEnhance("Z", "Mana Shield")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_MANA_SHIELD, tgen.generateFullTooltip())
