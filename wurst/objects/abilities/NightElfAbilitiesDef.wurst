package NightElfAbilitiesDef

import BTAbilities
import AbilityTooltipGenerator
import AbilityObjEditingCommons
import Assets
import ItemObjEditingCommon
import UnitObjEditingCommon
import BuffObjEditing
import TooltipsUtils

import LocalObjectIDs

@compiletime function createNightElfAbilities()

    var tgen = new BTAbilityTooltipGenerator("Can attack multiple target. " +
        "Multishot deals half damage to additional targets.")
    new AbilityDefinitionRocketAttack(ABIL_MULTISHOT_3)
        ..setCheckDependencies(false)
        ..setMissileArt(Abilities.arrowMissile1)
        ..presetDamagePerTarget(_ -> 25)
        ..presetAreaofEffect(_ -> 800)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetMaximumNumberofTargets(_ -> 2)
        ..setNameEnhance("Z", "Multishot 2")
        ..tooltipStopListen(true)
        ..setTargetsAllowed(1, commaList(TargetsAllowed.enemies))

    abilTooltipMap.put(ABIL_MULTISHOT_3, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator("Can attack multiple target.")
    new AbilityDefinitionRocketAttack(ABIL_MULTISHOT_5)
        ..setCheckDependencies(false)
        ..setMissileArt(Abilities.moonPriestessMissile)
        ..presetDamagePerTarget(_ -> 110)
        ..presetAreaofEffect(_ -> 800)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetMaximumNumberofTargets(_ -> 4)
        ..setNameEnhance("Z", "Multishot 4")
        ..tooltipStopListen(true)
        ..setTargetsAllowed(1, commaList(TargetsAllowed.enemies))

    abilTooltipMap.put(ABIL_MULTISHOT_5, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator("Blink on enemy ranged unit.")
    new AbilityDefinitionWardenBlink(ABIL_BLINK)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetMaximumRange(_ -> 1000)
        ..presetCooldown(_ -> 5)
        ..presetManaCost(_ -> 10)
        ..setNameEnhance("Z", "Blink")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_BLINK, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "The Warden hurls a flurry of knives, damaging nearby enemies. " +
        "Is casted after blink.")
    new AbilityDefinitionWardenFanofKnives(ABIL_FAN_OF_KNIVES)
        ..setHeroAbility(false)
        ..presetCooldown(_ -> 0)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetDamagePerTarget(_ -> 100)
        ..presetMaximumTotalDamage(_ -> 600)
        ..presetAreaofEffect(_ -> 150)
        ..presetManaCost(_ -> 100)
        ..setNameEnhance("W", "Fan of Knives")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_FAN_OF_KNIVES, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "The Warden attacks destroy mana per hit. " +
        "The mana combusts, dealing damage to the attacked unit."
    )
    new AbilityDefinitionFeedback(ABIL_FEEDBACK)
        ..setHeroAbility(false)
        ..presetCooldown(_ -> 0)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetMaxManaDrainedUnits(_ -> 40)
        ..setNameEnhance("C", "Feedback")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_FEEDBACK, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "The closest enemies are forced to attack this unit.")
    new AbilityDefinitionTaunt(ABIL_TAUNT)
        ..setHeroAbility(false)
        ..setCheckDependencies(false)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..presetCooldown(_ -> 0)
        ..tooltipStartListen()
        ..presetPreferHostiles(_ -> 15)
        ..presetAreaofEffect(_ -> 450)
        ..setNameEnhance("Z", "Taunt")
        ..tooltipStopListen(false)

    createAutoCastedEnemyAbility(ABIL_AUTOCAST_TAUNT)
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 250)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 10)
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_TAUNT, tgen.generateFullTooltip())

    let STARFALL_EFFECT = BUFF_ID_GEN.next()
    new BuffDefinition(STARFALL_EFFECT, BuffIds.blizzardEffect)
        ..setEffect(1, Abilities.starfallTarget)

    tgen = new BTAbilityTooltipGenerator(
        "Calls down waves of falling stars; " +
        "each wave deals damage to units in an area.")
    new AbilityDefinitionArchMageBlizzard(ABIL_STARFALL)
        ..setHeroAbility(false)
        ..setBuffs(1, "")
        ..setAnimationNames("spell")
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 0)
        ..presetCastRange(_ -> 9999)
        ..presetDamage(_ -> 100)
        ..presetMaximumDamageperWave(_ -> 600)
        ..presetNumberofShards(_ -> 8)
        ..presetNumberofWaves(_ -> 3)
        ..presetManaCost(_ -> 100)
        ..presetAreaofEffect(_ -> 300)
        ..setNameEnhance("Z", "Star fall")
        ..tooltipStopListen(false)
        ..setEffects(1, commaList(STARFALL_EFFECT))
        ..setTargetsAllowed(1, commaList(TargetsAllowed.enemies))

    createAutoCastedEnemyAbility(ABIL_AUTOCAST_STARFALL)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetCastRange(_ -> 800)
        ..presetCooldown(_ -> 30)
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_STARFALL, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Reduces a target enemy unit's armor."
    )
    new AbilityDefinitionFaerieFire(ABIL_FAERIE_FIRE)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetDefenseReduction(_ -> 4)
        ..presetDurationNormal(_ -> 40)
        ..presetManaCost(_ -> 40)
        ..presetCooldown(_ -> 1)
        ..presetCastRange(_ -> 700)
        ..setNameEnhance("Z", "Faerie Fire")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_FAERIE_FIRE, tgen.generateFullTooltip())

    var itm = createBasicItem(ITEM_ENTANGLING_ROOT)
        ..setItemCost(0, 100, 1, 4, 4)
        ..setNameEnhance("Z", "Add 1 Entangling Root")
        ..setInterfaceIcon(Icons.bTNEntanglingRoots)

    tgen = new BTAbilityTooltipGenerator(
        "Causes roots to burst from the ground, immobilizing, " +
        "disarming and damaging a target enemy temporarily."
        )
    new AbilityDefinitionEntanglingRootscreep(ABIL_ENTANGLING_ROOT)
        ..setHeroAbility(false)
        ..setCheckDependencies(false)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 800)
        ..presetCooldown(_ -> 80)
        ..tooltipStartListen()
        ..presetDamageperSecond(_ -> 20)
        ..presetDurationNormal(_ -> 4)
        ..presetManaCost(_ -> 0)
        ..setNameEnhance("W", "Entangling Root")
        ..tooltipStopListen(false)

    createAutoCastedEnemyAbility(ABIL_AUTOCAST_ENTANGLING_ROOT)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 5)
        ..presetManaCost(_ -> 80)
        ..presetCastRange(_ -> 800)
        ..tooltipStopListen(true)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_ENTANGLING_ROOT, tgen.generateFullTooltip())

    itm = createBasicItem(ITEM_WAND_OF_ILLUSION)
        ..setItemCost(0, 100, 1, 4, 4)
        ..setNameEnhance("Z", "Add 1 Wand of Illusion")
        ..setInterfaceIcon(Icons.bTNWand)

    tgen = new BTAbilityTooltipGenerator(
        "Create an illusion of an allied unit, takes 2x damage.")
    new AbilityDefinitionItemIllusion(ABIL_WAND_OF_ILLUSION)
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 500)
        ..presetCooldown(_ -> 0)
        ..presetManaCost(_ -> 60)
        ..presetAreaofEffect(_ -> 100)
        ..tooltipStartListen()
        ..presetDamageReceivedMultiplier(_ -> 2)
        ..presetDurationNormal(_ -> 40)
        ..setNameEnhance("W", "Wand of Illusion")
        ..tooltipStopListen(false)

    createAutoCastedAlliedAbility(ABIL_AUTOCAST_WAND_OF_ILLUSION)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 3)
        ..presetManaCost(_ -> 60)
        ..presetCastRange(_ -> 500)
        ..tooltipStopListen(true)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_WAND_OF_ILLUSION, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Deals damage in a small area."
    )
    new AbilityDefinitionSelfDestruct(ABIL_WISP_EXPLODE)
        ..setHeroAbility(false)
        ..setExplodesonDeath(1, true)
        ..presetCooldown(_ -> 0)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetFullDamageAmount(_ -> 200)
        ..presetFullDamageRadius(_ -> 100)
        ..presetPartialDamageAmount(_ -> 100)
        ..presetPartialDamageRadius(_ -> 200)
        ..setTargetsAllowed(1, commaList(TargetsAllowed.enemies))
        ..setNameEnhance("Z", "Wisp Explode")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_WISP_EXPLODE, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Summon Wisps that explode on target.")
    new AbilityDefinitionSummonSeaElemental(ABIL_SUMMON_WISP)
        ..registerTooltipGenerator(tgen)
        ..presetCooldown(_ -> 0)
        ..presetManaCost(_ -> 100)
        ..presetAreaofEffect(_ -> 100)
        ..presetSummonedUnitType(_ -> commaList(UNIT_WISP))
        ..tooltipStartListen()
        ..presetSummonedUnitCount(_ -> 3)
        ..presetDurationNormal(_ -> 40)
        ..setNameEnhance("Z", "Summon Wisp")
        ..tooltipStopListen(false)

    createAutoCastedEnemyAbility(ABIL_AUTOCAST_SUMMON_WISP)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 10)
        ..presetManaCost(_ -> 100)
        ..tooltipStopListen(true)
        ..presetCastRange(_ -> 600)

    abilTooltipMap.put(ABIL_SUMMON_WISP, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Deal damage per second and slow target movement and " +
        "attack speed.")
    new AbilityDefinitionSlowPoison(ABIL_POISON_SPEAR)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetDamagePerSecond(_ -> 10)
        ..presetAttackSpeedFactor(_ -> 0.20)
        ..presetMovementSpeedFactor(_ -> 0.30)
        ..presetDurationNormal(_ -> 5)
        ..setNameEnhance("Z", "Poison Spear")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_POISON_SPEAR, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Poisoned target cannot be healed.")

    new AbilityDefinitionParasite(ABIL_PARASITE_SEED)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetDamageperSecond(_ -> 20)
        ..presetSummonedUnitCount(_ -> 2)
        ..presetSummonedUnitDuration(_ -> 80)
        ..presetCooldown(_ -> 2)
        ..presetManaCost(_ -> 40)
        ..setNameEnhance("Z", "Parasite Seed")
        ..tooltipStopListen(true)
        ..presetUnitType(_ -> commaList(UNIT_TREANT))

    abilTooltipMap.put(ABIL_PARASITE_SEED, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "An aura that gives friendly nearby units a damage shield, "+
        "which returns a percentage of a melee attacker's damage back to it."
    )
    new AbilityDefinitionKeeperoftheGroveThornsAura(ABIL_THORN_AURA)
        ..registerTooltipGenerator(tgen)
        ..presetDamageDealttoAttackers(_ -> 0.4)
        ..tooltipStartListen()
        ..addTooltipProperty("Damage returned", _ -> 0.4.toPercent())
        ..presetAreaofEffect(_ -> 900)
        ..setNameEnhance("X", "Thorn Aura")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_THORN_AURA, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "Heals a target friendly unit over the duration."
    )
    new AbilityDefinitionRejuvinationcreep(ABIL_REJUVENATION)
        ..registerTooltipGenerator(tgen)
        ..presetCooldown(_ -> 0)
        ..presetManaCost(_ -> 60)
        ..tooltipStartListen()
        ..presetHitPointsGained(_ -> 600)
        ..presetDurationNormal(_ -> 12)
        ..presetCastRange(_ -> 600)
        ..setNameEnhance("Z", "Rejuvenation")
        ..tooltipStopListen(false)

    createAutoCastedAlliedAbility(ABIL_AUTOCAST_REJUVENATION)
        ..registerTooltipGenerator(tgen)
        ..setBuffs(1, BuffIds.rejuvenation.toRawCode())
        ..tooltipStartListen()
        ..presetCooldown(_ -> 4)
        ..presetManaCost(_ -> 60)
        ..tooltipStopListen(true)
        ..presetCastRange(_ -> 600)

    abilTooltipMap.put(ABIL_REJUVENATION, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "An aura that gives friendly nearby units a damage shield, "+
        "which returns a percentage of a melee attacker's damage back to it."
    )
    new AbilityDefinitionFrenzy(ABIL_DRUID_FRENZY)
        ..registerTooltipGenerator(tgen)
        ..setScalingFactor(1, 0)
        ..tooltipStartListen()
        ..presetAttackSpeedIncrease(_ -> 0.4)
        ..presetMovementSpeedIncrease(_ -> 0.3)
        ..presetDurationNormal(_ -> 6)
        ..presetCooldown(_ -> 20)
        ..setNameEnhance("Z", "Frenzy")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_DRUID_FRENZY, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "The closest enemies are forced to attack this unit.")
    new AbilityDefinitionPitLordHowlofTerror(ABIL_HOWL_OF_TERROR)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..presetCooldown(_ -> 0)
        ..tooltipStartListen()
        ..presetDamageIncrease(_ -> 0.30)
        ..presetDurationNormal(_ -> 6)
        ..presetAreaofEffect(_ -> 500)
        ..presetManaCost(_ -> 75)
        ..setNameEnhance("Z", "Howl Of Terror")
        ..tooltipStopListen(false)

    createAutoCastedEnemyAbility(ABIL_AUTOCAST_HOWL_OF_TERROR)
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 125)
        ..tooltipStartListen()
        ..presetManaCost(_ -> 0)
        ..presetCooldown(_ -> 10)
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_HOWL_OF_TERROR, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "Raises a feral spectre from a corpse."
    )
    new AbilityDefinitionVengeance(ABIL_SPIRIT_OF_VENGEANCE)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetMaxUnitsSummoned(_ -> 3)
        ..presetUnitTypeOne(_ -> UNIT_SPECTRE.toRawCode())
        ..presetUnitsSummonedTypeOne(_ -> 1)
        ..presetManaCost(_ -> 40)
        ..presetDurationNormal(_ -> 30)
        ..presetCooldown(_ -> 5)
        ..presetCastRange(_ -> 600)
        ..setNameEnhance("Z", "Spirit of Vengeance")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_SPIRIT_OF_VENGEANCE, tgen.generateFullTooltip())
