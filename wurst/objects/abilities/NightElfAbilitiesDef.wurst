package NightElfAbilitiesDef

// Standard libs imports:
import Assets
import BuffObjEditing
import ClosureEvents
import ClosureForGroups
import InstantDummyCaster
import OrderIds

// Local imports:
import AbilityObjEditingCommons
import ArmySpawner
import BTAbilities
import BTAbilityTooltipGenerator
import ItemObjEditingCommon
import LocalObjectIDs
import TooltipsUtils
import UnitObjEditingCommon

let FAERIE_FIRE_AOE = 150.
let FAERIE_FIRE_TARGET_COUNT = 3

@compiletime function createNightElfAbilities()

    var tgen = new BTAbilityTooltipGenerator("Fire projectile to additional target.")
    new AbilityDefinitionRocketAttack(ABIL_MULTISHOT_1)
        ..setCheckDependencies(false)
        ..setMissileArt(Abilities.arrowMissile1)
        ..setMissileSpeed(STANDARD_PROJECTILE_SPEED)
        ..presetDamagePerTarget(_ -> 0)
        ..presetAreaofEffect(_ -> 800)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetMaximumNumberofTargets(_ -> 1)
        ..setNameEnhance("Z", "Multishot 1")
        ..setIconNormal(Icons.bTNImprovedBows)
        ..tooltipStopListen(true)
        ..setTargetsAllowed(1, commaList(TargetsAllowed.enemies))

    abilTooltipMap.put(ABIL_MULTISHOT_1, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator("Can attack multiple target.")
    new AbilityDefinitionRocketAttack(ABIL_MULTISHOT_5)
        ..setCheckDependencies(false)
        ..setMissileArt(Abilities.moonPriestessMissile)
        ..setMissileSpeed(STANDARD_PROJECTILE_SPEED)
        ..presetDamagePerTarget(_ -> 110)
        ..presetAreaofEffect(_ -> 800)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetMaximumNumberofTargets(_ -> 4)
        ..setNameEnhance("Z", "Multishot 4")
        ..setIconNormal(Icons.bTNImprovedBows)
        ..tooltipStopListen(true)
        ..setTargetsAllowed(1, commaList(TargetsAllowed.enemies))

    abilTooltipMap.put(ABIL_MULTISHOT_5, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator("Blink on enemy ranged unit.")
    new AbilityDefinitionWardenBlink(ABIL_BLINK)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetMaximumRange(_ -> 1000)
        ..presetCooldown(_ -> 5)
        ..presetManaCost(_ -> 10)
        ..setNameEnhance("Z", "Blink")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_BLINK, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "The Warden hurls a flurry of knives, damaging nearby enemies. " +
        "Is casted after blink.")
    new AbilityDefinitionWardenFanofKnives(ABIL_FAN_OF_KNIVES)
        ..setHeroAbility(false)
        ..presetCooldown(_ -> 0)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetDamagePerTarget(_ -> 100)
        ..presetMaximumTotalDamage(_ -> 600)
        ..presetAreaofEffect(_ -> 150)
        ..presetManaCost(_ -> 100)
        ..setNameEnhance("W", "Fan of Knives")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_FAN_OF_KNIVES, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "The Warden attacks destroy mana per hit. " +
        "The mana combusts, dealing damage to the attacked unit."
    )
    new AbilityDefinitionFeedback(ABIL_FEEDBACK)
        ..setHeroAbility(false)
        ..presetCooldown(_ -> 0)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetMaxManaDrainedUnits(_ -> 40)
        ..setNameEnhance("C", "Feedback")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_FEEDBACK, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "The closest enemies are forced to attack this unit.")
    let taunt = new AbilityDefinitionTaunt(ABIL_TAUNT)
        ..setHeroAbility(false)
        ..setCheckDependencies(false)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..presetCooldown(_ -> 0)
        ..tooltipStartListen()
        ..presetPreferHostiles(_ -> 30)
        ..presetAreaofEffect(_ -> 600)
        ..setNameEnhance("Z", "Taunt")
        ..tooltipStopListen(false)

    createAutoCastedEnemyAbility(ABIL_AUTOCAST_TAUNT)
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 250)
        ..applyTooltip(taunt)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 15)
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_TAUNT, tgen.generateFullTooltip())

    let STARFALL_EFFECT = BUFF_ID_GEN.next()
    new BuffDefinition(STARFALL_EFFECT, BuffIds.blizzardEffect)
        ..setEffect(1, Abilities.starfallTarget)

    tgen = new BTAbilityTooltipGenerator(
        "Calls down waves of falling stars; " +
        "each wave deals damage to units in an area. Does not stack with other starfall.")
    let starFall = new AbilityDefinitionArchMageBlizzard(ABIL_STARFALL)
        ..setHeroAbility(false)
        ..setBuffs(1, "")
        ..setAnimationNames("spell")
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 0)
        ..presetCastRange(_ -> 9999)
        ..presetDamage(_ -> 60)
        ..presetMaximumDamageperWave(_ -> 800)
        ..presetNumberofShards(_ -> 8)
        ..presetNumberofWaves(_ -> 3)
        ..presetManaCost(_ -> 100)
        ..presetAreaofEffect(_ -> 300)
        ..setNameEnhance("Z", "Star Fall")
        ..tooltipStopListen(false)
        ..setIconNormal(Icons.bTNStarFall)
        ..setEffects(1, commaList(STARFALL_EFFECT))
        ..setTargetsAllowed(1, commaList(TargetsAllowed.enemies))

    createAutoCastedLongRangeEnemyAbility(ABIL_AUTOCAST_STARFALL)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetCastRange(_ -> 800)
        ..presetCooldown(_ -> 30)
        ..applyTooltip(starFall)
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_STARFALL, tgen.generateFullTooltip())


    let murgulWarlockCount = BTBuildingData.getUnitCount(BUILDING_MURGUL_WARLOCK)
    let itmFree = createBasicItem(ITEM_FREE_FAERIE_FIRE)
        ..setItemCost(0, 0, 1, murgulWarlockCount, murgulWarlockCount)
        ..setNameEnhance("C", "Replace autocasted spell with Faerie Fire")
        ..setInterfaceIcon(Icons.bTNFaerieFire)

    tgen = new BTAbilityTooltipGenerator(
        "Reduces a target enemy unit's armor. Applies to multiple targets."
    )
    new AbilityDefinitionFaerieFire(ABIL_DUMMY_CAST_FAERIE_FIRE)
        ..presetDefenseReduction(_ -> 4)
        ..presetDurationNormal(_ -> 15)
        ..setDummyAbility()
        ..setNameEnhance("Z", "Faerie Fire Dummy")

    new AbilityDefinitionFaerieFire(ABIL_FAERIE_FIRE)
        ..setLevels(1)
        ..tooltipStartListen()
        ..registerTooltipGenerator(tgen)
        ..presetDefenseReduction(_ -> 4)
        ..presetDurationNormal(_ -> 15)
        ..addTooltipProperty("Target limit", _ -> FAERIE_FIRE_TARGET_COUNT.toString())
        ..presetAreaofEffect(_ -> FAERIE_FIRE_AOE)
        ..presetManaCost(_ -> 60)
        ..presetCooldown(_ -> 4)
        ..presetCastRange(_ -> 700)
        ..setNameEnhance("Z", "Faerie Fire")
        ..tooltipStopListen(true)

    tgen.applyToDefItem(itmFree)
    abilTooltipMap.put(ABIL_FAERIE_FIRE, tgen.generateFullTooltip())

    let druidTalonCount = BTBuildingData.getUnitCount(BUILDING_DRUID_TALON)
    var goldCost = 0
    var lumberCost = 200
    var itm = createBasicItem(ITEM_ENTANGLING_ROOT)
        ..setItemCost(goldCost, lumberCost, 1, 3, 3)
        ..setNameEnhance("Z", "Replace 1 Faerie Fire with 1 Entangling Root")
        ..setInterfaceIcon(Icons.bTNEntanglingRoots)

    tgen = new BTAbilityTooltipGenerator(
        "Causes roots to burst from the ground, reducing " +
        "movement and attack speed of nearby enemies."
        )

    let BUFF_ROOT_SLOW_ID = compiletime(BUFF_ID_GEN.next())
    new BuffDefinition(BUFF_ROOT_SLOW_ID, BuffIds.enduranceAura)
        ..setIcon(Icons.bTNEntanglingRoots)
        ..setArtTarget(Abilities.stasisTotemTarget)
        ..setTargetAttachments(1, 1)
        ..setTargetAttachmentPoint0(1, "overhead")
        ..setName(1, "Entangling Root")
        ..setIcon(Icons.bTNEntanglingRoots)
        ..setTooltipNormal(1, "Entangling Root")
        ..setTooltipNormalExtended(1, "This unit is being slowed by a nearby " +
            " entangling root")

    let ABIL_ROOT_SLOW = compiletime(ABIL_ID_GEN.next())
    new AbilityDefinitionAuraEnduranceCreep(ABIL_ROOT_SLOW)
        ..setLevels(1)
        ..setCheckDependencies(false)
        ..setArtTarget("")
        ..presetBuffs(_ -> commaList(BUFF_ROOT_SLOW_ID))
        ..registerTooltipGenerator(tgen)
        ..setMovementSpeedIncrease(1, -0.5)
        ..setAttackSpeedIncrease(1, -0.3)
        ..tooltipStartListen()
        ..addTooltipProperty("Movement Speed Reduction", _ -> "50%")
        ..addTooltipProperty("Attack Speed Reduction", _ -> "30%")
        ..setTargetsAllowed(1, commaList(TargetsAllowed.enemies))
        ..presetAreaofEffect(_ -> 300)
        ..setNameEnhance("C", "Entangling Root Aura")
        ..tooltipStopListen(false)

    let entanglingRoot = new AbilityDefinitionHealingWard(ABIL_ENTANGLING_ROOT)
        ..setHeroAbility(false)
        ..setWardUnitType(1, commaList(UNIT_ENTANGLING_ROOT))
        ..setDummyAbility()
        ..setCheckDependencies(false)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetDurationNormal(_ -> 6)
        ..presetManaCost(_ -> 125)
        ..presetCastRange(_ -> 700)
        ..setNameEnhance("W", "Entangling Root")
        ..tooltipStopListen(false)

    createAutoCastedEnemyAbility(ABIL_AUTOCAST_ENTANGLING_ROOT)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 5)
        ..presetManaCost(_ -> 120)
        ..presetCastRange(_ -> 700)
        ..applyTooltip(entanglingRoot)
        ..addTooltipProperty("Bounty Bonus", _ -> computeItemPointValue(goldCost, lumberCost))
        ..addTooltipProperty("Army Points Bonus", _ -> computeItemPointValue(goldCost, lumberCost))
        ..tooltipStopListen(true)

    new UnitDefinition(UNIT_ENTANGLING_ROOT, UnitIds.healingward)
        ..setModelFile(Abilities.entanglingRootsTarget)
        ..setNormalAbilities(commaList(ABIL_ROOT_SLOW))
        ..setScalingValue(1.5)
        ..setHitPointsMaximumBase(100)
        ..setName("Entangling Root")

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_ENTANGLING_ROOT, tgen.generateFullTooltip())

    goldCost = 0
    lumberCost = 100
    itm = createBasicItem(ITEM_WAND_OF_ILLUSION)
        ..setItemCost(goldCost, lumberCost, 1, druidTalonCount, druidTalonCount)
        ..setNameEnhance("Z", "Replace 1 Faerie Fire with 1 Wand of Illusion")
        ..setInterfaceIcon(Icons.bTNWand)

    tgen = new BTAbilityTooltipGenerator(
        "Create an illusion of an allied unit, takes 2x damage.")
    let woi = new AbilityDefinitionItemIllusion(ABIL_WAND_OF_ILLUSION)
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 500)
        ..presetCooldown(_ -> 0)
        ..presetManaCost(_ -> 60)
        ..presetAreaofEffect(_ -> 100)
        ..tooltipStartListen()
        ..presetDamageReceivedMultiplier(_ -> 2)
        ..presetDurationNormal(_ -> 40)
        ..setNameEnhance("W", "Wand of Illusion")
        ..tooltipStopListen(false)

    createAutoCastedAlliedAbility(ABIL_AUTOCAST_WAND_OF_ILLUSION)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 3)
        ..presetManaCost(_ -> 60)
        ..presetCastRange(_ -> 600)
        ..applyTooltip(woi)
        ..addTooltipProperty("Bounty Bonus", _ -> computeItemPointValue(goldCost, lumberCost))
        ..addTooltipProperty("Army Points Bonus", _ -> computeItemPointValue(goldCost, lumberCost))
        ..tooltipStopListen(true)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_WAND_OF_ILLUSION, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Deals damage in a small area."
    )
    new AbilityDefinitionSelfDestruct(ABIL_WISP_EXPLODE)
        ..setHeroAbility(false)
        ..setExplodesonDeath(1, true)
        ..presetCooldown(_ -> 0)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetFullDamageAmount(_ -> 200)
        ..presetFullDamageRadius(_ -> 100)
        ..presetPartialDamageAmount(_ -> 100)
        ..presetPartialDamageRadius(_ -> 200)
        ..setTargetsAllowed(1, commaList(TargetsAllowed.enemies))
        ..setNameEnhance("Z", "Wisp Explode")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_WISP_EXPLODE, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Summon Wisps that explode on target.")
    let summonWisp = new AbilityDefinitionSummonSeaElemental(ABIL_SUMMON_WISP)
        ..registerTooltipGenerator(tgen)
        ..presetCooldown(_ -> 0)
        ..presetManaCost(_ -> 100)
        ..presetAreaofEffect(_ -> 100)
        ..presetSummonedUnitType(_ -> commaList(UNIT_WISP))
        ..tooltipStartListen()
        ..presetSummonedUnitCount(_ -> 3)
        ..presetDurationNormal(_ -> 40)
        ..setIconNormal(Icons.bTNWisp)
        ..setNameEnhance("Z", "Summon Wisp")
        ..tooltipStopListen(false)

    createAutoCastedEnemyAbility(ABIL_AUTOCAST_SUMMON_WISP)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 10)
        ..presetManaCost(_ -> 100)
        ..applyTooltip(summonWisp)
        ..tooltipStopListen(true)
        ..presetCastRange(_ -> 600)

    abilTooltipMap.put(ABIL_SUMMON_WISP, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Deal damage per second and slow target movement and " +
        "attack speed.")
    new AbilityDefinitionSlowPoison(ABIL_POISON_SPEAR)
        ..registerTooltipGenerator(tgen)
        ..presetAttackSpeedFactor(_ -> 0.20)
        ..presetMovementSpeedFactor(_ -> 0.30)
        ..tooltipStartListen()
        ..presetDamagePerSecond(_ -> 20)
        ..addTooltipProperty("Attack Speed Reduction",_ -> 0.2.toPercent())
        ..addTooltipProperty("Movement Speed Reduction",_ -> 0.3.toPercent())
        ..presetDurationNormal(_ -> 5)
        ..setNameEnhance("Z", "Poison Spear")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_POISON_SPEAR, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Afflicts a target enemy unit with a deadly parasite " +
        "that deals damage over duration. " +
        "If the afflicted unit dies while under the effect of Parasite, " +
        " a treant will spawn from its corpse.")

    new AbilityDefinitionParasite(ABIL_PARASITE_SEED)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetDamageperSecond(_ -> 80)
        ..presetSummonedUnitCount(_ -> 2)
        ..presetSummonedUnitDuration(_ -> 80)
        ..presetCooldown(_ -> 2)
        ..presetCastRange(_ -> 900)
        ..presetDurationNormal(_ -> 10)
        ..presetManaCost(_ -> 40)
        ..setNameEnhance("Z", "Parasite Seed")
        ..tooltipStopListen(true)
        ..presetUnitType(_ -> commaList(UNIT_TREANT))

    abilTooltipMap.put(ABIL_PARASITE_SEED, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "An aura that gives friendly nearby units a damage shield, "+
        "which returns a percentage of a melee attacker's damage back to it."
    )
    new AbilityDefinitionKeeperoftheGroveThornsAura(ABIL_THORN_AURA)
        ..registerTooltipGenerator(tgen)
        ..setHeroAbility(false)
        ..presetDamageDealttoAttackers(_ -> 0.4)
        ..tooltipStartListen()
        ..addTooltipProperty("Damage returned", _ -> 0.4.toPercent())
        ..presetAreaofEffect(_ -> 1200)
        ..setNameEnhance("X", "Thorn Aura")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_THORN_AURA, tgen.generateFullTooltip())



    let dryadCount = BTBuildingData.getUnitCount(BUILDING_DRYAD)
    goldCost = 0
    lumberCost = 250
    itm = createBasicItem(ITEM_REJUVENATION)
        ..setItemCost(goldCost, lumberCost, dryadCount, 1, 1)
        ..setNameEnhance("Z", "Replace Abolish Magic by Rejuvenation")
        ..setInterfaceIcon(Icons.bTNRejuvenation)

    tgen = new BTAbilityTooltipGenerator(
        "Heals a target friendly unit over the duration."
    )
    let rejuvenation = new AbilityDefinitionRejuvinationcreep(ABIL_REJUVENATION)
        ..setDummyAbility()
        ..registerTooltipGenerator(tgen)
        ..presetManaCost(_ -> 60)
        ..tooltipStartListen()
        ..presetHitPointsGained(_ -> 600)
        ..presetDurationNormal(_ -> 12)
        ..setNameEnhance("Z", "Rejuvenation")
        ..tooltipStopListen(false)

    createAutoCastedAllieHealdAbility(ABIL_AUTOCAST_REJUVENATION)
        ..registerTooltipGenerator(tgen)
        ..setBuffs(1, BuffIds.rejuvenation.toRawCode())
        ..tooltipStartListen()
        ..presetCooldown(_ -> 4)
        ..presetManaCost(_ -> 60)
        ..applyTooltip(rejuvenation)
        ..addTooltipProperty("Bounty Bonus", _ -> computeItemPointValue(goldCost, lumberCost))
        ..addTooltipProperty("Army Points Bonus", _ -> computeItemPointValue(goldCost, lumberCost))
        ..tooltipStopListen(true)
        ..presetCastRange(_ -> 900)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_REJUVENATION, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "Increase the unit attack rate and movement speed."
    )
    new AbilityDefinitionFrenzy(ABIL_DRUID_FRENZY)
        ..registerTooltipGenerator(tgen)
        ..setScalingFactor(1, 0)
        ..tooltipStartListen()
        ..setAttackSpeedIncrease(1, 0.5)
        ..addTooltipProperty("Attack Speed Increase", _ -> 0.5.toPercent())
        ..setMovementSpeedIncrease(1, 0.3)
        ..addTooltipProperty("Movement Speed Increase", _ -> 0.3.toPercent())
        ..presetDurationNormal(_ -> 4)
        ..presetCooldown(_ -> 20)
        ..setNameEnhance("Z", "Frenzy")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_DRUID_FRENZY, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "The closest enemies are forced to attack this unit.")
    new AbilityDefinitionPitLordHowlofTerror(ABIL_HOWL_OF_TERROR)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..presetDamageIncrease(_ -> 0.40)
        ..tooltipStartListen()
        ..addTooltipProperty("Damage Reduction", _ -> "40%")
        ..presetDurationNormal(_ -> 6)
        ..presetAreaofEffect(_ -> 500)
        ..presetManaCost(_ -> 75)
        ..presetCooldown(_ -> 6)
        ..setNameEnhance("Z", "Howl Of Terror")
        ..tooltipStopListen(false)

    abilTooltipMap.put(ABIL_HOWL_OF_TERROR, tgen.generateFullTooltip())

    createAutoCastedEnemyAbility(ABIL_AUTOCAST_HOWL_OF_TERROR)
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 125)
        ..presetManaCost(_ -> 0)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 6)
        ..tooltipStopListen(true)

    // abilTooltipMap.put(ABIL_HOWL_OF_TERROR, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "Raises a feral spectre from a corpse."
    )
    new AbilityDefinitionVengeance(ABIL_SPIRIT_OF_VENGEANCE)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetMaxUnitsSummoned(_ -> 3)
        ..presetUnitTypeOne(_ -> UNIT_SPECTRE.toRawCode())
        ..presetUnitsSummonedTypeOne(_ -> 1)
        ..presetManaCost(_ -> 40)
        ..presetDurationNormal(_ -> 30)
        ..presetCooldown(_ -> 5)
        ..presetCastRange(_ -> 600)
        ..setNameEnhance("Z", "Spirit of Vengeance")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_SPIRIT_OF_VENGEANCE, tgen.generateFullTooltip())


    new BuffDefinition(BUFF_HAUNTED, BuffIds.shadowStrike)
        // ..setIcon(Icons.bTNCurse)
        // ..setArtTarget(1, Abilities.curseTarget)
        // ..setTargetAttachmentPoint0("overhead")
        ..setTooltipNormal(1, "Haunted")
        ..setIcon(Icons.bTNPossession)
        ..setTooltipNormalExtended(1, "This unit is haunted; it cannot fight.")


    tgen = new BTAbilityTooltipGenerator(
        "Haunts a target, making it unable to attack."
        )
    let abilId = ABIL_ID_GEN.next()
    let terrifyOrb = new AbilityDefinitionOrbofLightning(ABIL_TERRIFY_ORB)
        ..setMissileArt(Abilities.vengeanceMissile)
        ..setArtTarget("")
        ..setEnabledAttackIndex(1, 0)
        ..presetChanceToHitUnits(_ -> 20)
        ..presetChanceToHitSummons(_ -> 20)
        ..setEffectAbility(1, abilId.toRawCode())
        ..setIconNormal(Icons.bTNPossession)
        ..setDamageBonus(1, 0)
        ..setNameEnhance("Z", "Haunts")

    new AbilityDefinitionBrewmasterDrunkenHaze(abilId)
        ..setIconNormal(Icons.bTNCurse)
        ..presetCastRange(_ -> 700)
        ..setAreaofEffect(1, 0)
        ..setBuffs(1, BUFF_HAUNTED.toRawCode())
        ..setLevels(1)
        ..setManaCost(1, 0)
        ..setMissileArc(0)
        ..setMissileSpeed(600)
        ..setHeroAbility(false)
        ..setChanceToMiss(1, 0)
        ..setAttacksPrevented(1, 15) // All checkbox checks
        ..setMissileArt(Abilities.shadowStrikeMissile)
        ..registerTooltipGenerator(tgen)
        ..addTooltipProperty("Chance to hit summons", _ ->  0.2.toPercent())
        ..tooltipStartListen()
        ..addTooltipProperty("Chance to hit units", _ ->  0.2.toPercent())
        ..setMovementSpeedModifier(1, 0.75)
        ..addTooltipProperty("Movement speed reduction", _ -> 0.8.toPercent())
        ..presetDurationNormal(_ -> 4)
        ..presetCooldown(_ -> 15)
        ..setNameEnhance("Z", "Haunts")
        ..applyTooltip(terrifyOrb)
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_TERRIFY_ORB, tgen.generateFullTooltip())


    let BUFF_TERROR = compiletime(BUFF_ID_GEN.next())
    new BuffDefinition(BUFF_TERROR, BuffIds.enduranceAura)
        ..setIcon(Icons.bTNAuraOfDarkness)
        ..setArtTarget(1, Abilities.orbCorruptionSpecialArt)
        ..setTargetAttachmentPoint0(1, "chest")
        ..setTooltipNormal(1, "Terror Aura")
        ..setTooltipNormalExtended(1,
            "This unit is terrified; its attack speed is reduced."
        )

    tgen = new BTAbilityTooltipGenerator(
            "Decrease the attack speed of nearby enemies.")
    new AbilityDefinitionAuraEnduranceCreep(ABIL_TERROR_AURA)
        ..setLevels(1)
        ..setBuffs(1, BUFF_TERROR.toRawCode())
        ..setArtTarget(Abilities.obsidianRegenAura)
        ..setHeroAbility(false)
        ..setMovementSpeedIncrease(1, 0)
        ..presetTargetsAllowed(_ -> commaList(
            TargetsAllowed.enemies
            ))
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..setAttackSpeedIncrease(1, -0.3)
        ..setIconNormal(Icons.bTNAuraOfDarkness)
        ..addTooltipProperty("Attack Speed Decrease", _ -> 0.3.toPercent())
        ..presetAreaofEffect(_ -> 600)
        ..setName("Terror Aura")
        ..tooltipStopListen()

    abilTooltipMap.put(ABIL_TERROR_AURA, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "Gives bonus damage to nearby friendly units.")
    let roar = new AbilityDefinitionRoar(ABIL_ROAR)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..registerTooltipGenerator(tgen)
        ..presetCooldown(_ -> 0)
        ..presetDamageIncrease(_ -> 0.30)
        ..tooltipStartListen()
        ..addTooltipProperty("Damage Increase", _ -> "30%")
        ..presetDurationNormal(_ -> 6)
        ..presetAreaofEffect(_ -> 500)
        ..presetManaCost(_ -> 125)
        ..setNameEnhance("Z", "Roar")
        ..tooltipStopListen(false)

    createAutoCastedEnemyAbility(ABIL_AUTOCAST_ROAR)
        ..registerTooltipGenerator(tgen)
        ..presetCastRange(_ -> 125)
        ..tooltipStartListen()
        ..presetManaCost(_ -> 125)
        ..presetCooldown(_ -> 15)
        ..applyTooltip(roar)
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_ROAR, tgen.generateFullTooltip())


    tgen = new BTAbilityTooltipGenerator(
        "Dispels positive buffs from enemy units, " +
        "and negative buffs from friendly units. " +
        "Deals damage to summoned units."
    )
    new AbilityDefinitionAbolishMagic(ABIL_ABOLISH_MAGIC)
        ..setCheckDependencies(false)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetSummonedUnitDamage(_ -> 200)
        ..presetManaCost(_ -> 30)
        ..presetCooldown(_ -> 2)
        ..presetCastRange(_ -> 900)
        ..setNameEnhance("Z", "Abolish Magic")
        ..tooltipStopListen(true)

    abilTooltipMap.put(ABIL_ABOLISH_MAGIC, tgen.generateFullTooltip())




init
    EventListener.onTargetCast(ABIL_FAERIE_FIRE) (unit caster, unit target) ->
        int _count = 0
        forUnitsInRange(target.getPos(), FAERIE_FIRE_AOE) (unit u) ->
            if _count < FAERIE_FIRE_TARGET_COUNT
                and u.isEnemyOf(caster)
                and not u.hasAbility(BuffIds.faerieFire)
                InstantDummyCaster.castTarget(
                    caster.getOwner(),
                    ABIL_DUMMY_CAST_FAERIE_FIRE, 1, OrderIds.faeriefire, u)
                _count++
