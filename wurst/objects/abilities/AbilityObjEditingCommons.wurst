package AbilityObjEditingCommons

// Standard libs imports:
import AbilityObjEditing
import Assets
import BuffObjEditing
import ErrorHandling
import ObjectIdGenerator
import ObjectIds

// Local imports:
import GridHotkeyPosition
import TooltipsUtils

public function AbilityDefinition.setNameEnhance(string hotkey, string name)
    this.setHotkeyEnhance(hotkey)
    this.setName(name)
    this.setTooltipNormal(1, makeToolTipNorm(hotkey, name))

public function AbilityDefinition.applyTooltip(AbilityDefinition def)
    this.tooltipGen.applyToDef(def)

public function AbilityDefinition.applyTooltip()
    this.tooltipGen.applyToDef(this)

public function AbilityDefinition.setHotkeyEnhance(string hotkey)
    if not hotKeyMapping.has(hotkey)
        error("Hotkey button position mapping has no \"{0}\" element".format(hotkey))
        return
    this.setHotkeyNormal(hotkey)
    this.presetButtonPosNormal(hotKeyMapping.get(hotkey).x, hotKeyMapping.get(hotkey).y)

/** Apparently parasite will prioritize farhest target */
public function createAutoCastedLongRangeEnemyAbility(int abilId) returns AbilityDefinitionParasite
    let someBuff = createDummyBuffObject("Dummy buff parasite", "Dummy buff parasite", Icons.bTNFarm)

    return new AbilityDefinitionParasite(abilId)
        ..presetAttackSpeedFactor(_ -> 0)
        ..presetDamageperSecond(_ -> 0)
        ..presetSummonedUnitCount(_ -> 0)
        ..presetUnitType(_ -> "")
        ..presetManaCost(_ -> 0)
        ..presetDurationNormal(_ -> 0.1)
        ..presetBuffs(_ -> someBuff.buffId.toRawCode())
        ..setArtTarget("")
        ..setMissileArt("")
        ..setTargetsAllowed(1, commaList(TargetsAllowed.enemies))
        ..setLevels(1)
        ..setCheckDependencies(false)

public function createAutoCastedEnemyAbility(int abilId) returns AbilityDefinitionCursecreep
    // Need to do this otherwise the ability still apply default curse buff
    let buffId = BUFF_ID_GEN.next()
    new BuffDefinition(buffId, 'Basl')
        ..setName(1, "Dummy buff place holder (curse)")
        ..setTooltipNormal(1, "Ignore this")
        ..setTooltipNormalExtended(1, "")
        ..setIcon("")
    let someBuff = createDummyBuffObject("Dummy buff curse", "Dummy buff curse", Icons.bTNFarm)
    return new AbilityDefinitionCursecreep(abilId)
        ..presetManaCost(_ -> 0)
        ..presetDurationNormal(_ -> 0.1)
        ..presetChancetoMiss(_ -> 0)
        ..presetBuffs(_ -> someBuff.buffId.toRawCode())
        ..setArtTarget("")
        ..setLevels(1)
        ..setCheckDependencies(false)

public function createDummyBuffAllied(int buffId) returns BuffDefinition
    return new BuffDefinition(buffId, BuffIds.innerFire)
        ..setArtSpecial(1,"")
        ..setArtTarget("")
        ..setIcon(Icons.bTNtemp)
        ..setTooltipNormal(1, "Dummy buff")
        ..setTooltipNormalExtended(1, "")

public function createAutoCastedAlliedAbility(int abilId) returns AbilityDefinitionInnerFire
    let DUMMY_BUFF = BUFF_ID_GEN.next()
    createDummyBuffAllied(DUMMY_BUFF)
        ..setIcon(Icons.bTNAntiMagicShell)
        ..setName(1, "Dummy Buff")
        ..setTooltipNormal(1, "Dummy Buff")
        ..setTooltipNormalExtended("Used to hide buff art")

    return new AbilityDefinitionInnerFire(abilId)
        ..setCheckDependencies(false)
        ..presetManaCost(_ -> 0)
        ..presetDurationNormal(_ -> 0.01)
        ..presetDamageIncrease(_ -> 0)
        ..presetDefenseIncrease(_ -> 0)
        ..presetBuffs(_ -> "")
        ..setArtTarget("")
        ..setLevels(1)
        ..setBuffs(1, DUMMY_BUFF.toRawCode())

public function createAutoCastedAllieHealdAbility(int abilId) returns AbilityDefinitionHeal
    let DUMMY_BUFF = BUFF_ID_GEN.next()
    createDummyBuffAllied(DUMMY_BUFF)
        ..setIcon(Icons.bTNAntiMagicShell)
        ..setName(1, "Dummy Buff")
        ..setTooltipNormal(1, "Dummy Buff")
        ..setTooltipNormalExtended("Used to hide buff art")

    return new AbilityDefinitionHeal(abilId)
        ..setCheckDependencies(false)
        ..presetManaCost(_ -> 0)
        ..presetHitPointsGained(_ -> 0)
        ..presetDurationNormal(_ -> 0.01)
        ..presetTargetsAllowed(_ -> commaList(TargetsAllowed.friend))
        ..presetBuffs(_ -> "")
        ..setArtTarget("")
        ..setLevels(1)
        ..setBuffs(1, DUMMY_BUFF.toRawCode())


public function createAutoCastAlliedManaTarget(int abilId) returns AbilityDefinitionManaBatteryObsidianStatue
    return new AbilityDefinitionManaBatteryObsidianStatue(abilId)
        ..setCheckDependencies(false)
        ..presetAutocastRequirement(_ -> 0)
        ..presetManaGained(_ -> -1)
        ..presetManaCost(_ -> 0)
        ..presetDurationNormal(_ -> 0.01)
        ..presetBuffs(_ -> "")
        ..setArtTarget("")
        ..setTargetsAllowed(1, commaList(
            TargetsAllowed.friend,
            TargetsAllowed.self
        ))
        ..setLevels(1)

public function createAutoCastDispell(int abilId) returns AbilityDefinitionAbolishMagicCreep
    return new AbilityDefinitionAbolishMagicCreep(abilId)
        ..setSummonedUnitDamage(1, 0)
        ..setManaLoss(1, 0)
        ..setCheckDependencies(false)
        ..presetManaCost(_ -> 0)
        ..presetDurationNormal(_ -> 0.01)
        ..presetBuffs(_ -> "")
        ..setArtTarget("")
        ..setLevels(1)

public function createOrbAbility(int abilId) returns AbilityDefinitionOrbofLightning
    return new  AbilityDefinitionOrbofLightning(abilId)
        ..presetChanceToHitUnits(_ -> 100)
        ..presetChanceToHitHeros(_ -> 100)
        ..presetChanceToHitSummons(_ -> 100)
        ..presetDamageBonus(_ -> 0)
        ..setArtSpecial("")
        ..setArtTarget("")

public function createVisualAbility(int abilId) returns AbilityDefinitionDefenseBonusPlus1
    return new AbilityDefinitionDefenseBonusPlus1(abilId)
        ..setDefenseBonus(1, 0)
        ..setName("Visual buff ability")
