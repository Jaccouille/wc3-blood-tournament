package AbilityObjEditingCommons

// Standard libs imports:
import AbilityObjEditing
import ErrorHandling
import TooltipsUtils
import BuffObjEditing
import Assets
import ObjectIdGenerator
import ObjectIds

// Local imports:
import GridHotkeyPosition


public function AbilityDefinition.setNameEnhance(string hotkey, string name)
    this.setHotkeyEnhance(hotkey)
    this.setName(name)
    this.setTooltipNormal(1, makeToolTipNorm(hotkey, name))

public function AbilityDefinition.setHotkeyEnhance(string hotkey)
    if not hotKeyMapping.has(hotkey)
        error("Hotkey button position mapping has no \"{0}\" element".format(hotkey))
        return
    this.setHotkeyNormal(hotkey)
    this.presetButtonPosNormal(hotKeyMapping.get(hotkey).x, hotKeyMapping.get(hotkey).y)

public function createAutoCastedEnemyAbility(int abilId) returns AbilityDefinitionCursecreep
    return new AbilityDefinitionCursecreep(abilId)
        ..presetManaCost(_ -> 0)
        ..presetDurationNormal(_ -> 0.01)
        ..presetChancetoMiss(_ -> 0)
        ..presetBuffs(_ -> "")
        ..setArtTarget("")
        ..setLevels(1)
        ..setCheckDependencies(false)

public function createDummyBuffAllied(int buffId) returns BuffDefinition
    return new BuffDefinition(buffId, BuffIds.innerFire)
        ..setArtSpecial(1,"")
        ..setArtTarget("")
        ..setIcon(Icons.bTNtemp)
        ..setTooltipNormal(1, "Dummy buff")
        ..setTooltipNormalExtended(1, "")

public function createAutoCastedAlliedAbility(int abilId) returns AbilityDefinitionInnerFire
    let DUMMY_BUFF = BUFF_ID_GEN.next()
    createDummyBuffAllied(DUMMY_BUFF)
        ..setIcon(Icons.bTNAntiMagicShell)
        ..setName(1, "Dummy Buff")
        ..setTooltipNormal(1, "Dummy Buff")
        ..setTooltipNormalExtended("Used to hide buff art")

    return new AbilityDefinitionInnerFire(abilId)
        ..setCheckDependencies(false)
        ..presetManaCost(_ -> 0)
        ..presetDurationNormal(_ -> 0.01)
        ..presetDamageIncrease(_ -> 0)
        ..presetDefenseIncrease(_ -> 0)
        ..presetBuffs(_ -> "")
        ..setArtTarget("")
        ..setLevels(1)
        ..setBuffs(1, DUMMY_BUFF.toRawCode())

public function createOrbAbility(int abilId) returns AbilityDefinitionOrbofLightning
    return new  AbilityDefinitionOrbofLightning(abilId)
        ..presetChanceToHitUnits(_ -> 100)
        ..presetChanceToHitHeros(_ -> 100)
        ..presetChanceToHitSummons(_ -> 100)
        ..presetDamageBonus(_ -> 0)
        ..setArtSpecial("")
        ..setArtTarget("")

public function createVisualAbility(int abilId) returns AbilityDefinitionDefenseBonusPlus1
    return new AbilityDefinitionDefenseBonusPlus1(abilId)
        ..setDefenseBonus(1, 0)
        ..setName("Visual buff ability")
