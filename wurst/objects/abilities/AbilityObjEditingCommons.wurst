package AbilityObjEditingCommons

// Standard libs imports:
import AbilityObjEditing
import ErrorHandling
import TooltipsUtils

// Local imports:
import GridHotkeyPosition


public function AbilityDefinition.setNameEnhance(string hotkey, string name)
    this.setHotkeyEnhance(hotkey)
    this.setName(name)
    this.setTooltipNormal(1, makeToolTipNorm(hotkey, name))

public function AbilityDefinition.setHotkeyEnhance(string hotkey)
    if not hotKeyMapping.has(hotkey)
        error("Hotkey button position mapping has no \"{0}\" element".format(hotkey))
        return
    this.setHotkeyNormal(hotkey)
    this.presetButtonPosNormal(hotKeyMapping.get(hotkey).x, hotKeyMapping.get(hotkey).y)

public function createAutoCastedEnenmyAbility(int abilId) returns AbilityDefinitionCursecreep
    return new AbilityDefinitionCursecreep(abilId)
        ..presetManaCost(_ -> 0)
        ..presetDurationNormal(_ -> 0.01)
        ..presetChancetoMiss(_ -> 0)
        ..presetBuffs(_ -> "")
        ..setArtTarget("")
        ..setLevels(1)
        ..setCheckDependencies(false)

public function createAutoCastedAlliedAbility(int abilId) returns AbilityDefinitionLichFrostArmorAutocast
    return new AbilityDefinitionLichFrostArmorAutocast(abilId)
        ..presetManaCost(_ -> 0)
        ..presetArmorDuration(_ -> 0.01)
        ..presetDurationNormal(_ -> 0.01)
        ..presetArmorBonus(_ -> 0)
        ..presetBuffs(_ -> "")
        ..setArtTarget("")
        ..setLevels(1)

public function createOrbAbility(int abilId) returns AbilityDefinitionOrbofLightning
    return new  AbilityDefinitionOrbofLightning(abilId)
        ..presetChanceToHitUnits(_ -> 100)
        ..presetChanceToHitHeros(_ -> 100)
        ..presetChanceToHitSummons(_ -> 100)
        ..presetDamageBonus(_ -> 0)
        ..setArtSpecial("")
        ..setArtTarget("")
