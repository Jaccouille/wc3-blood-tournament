package UndeadAbilitiesDef

// Standard libs imports:
import Assets
import BuffObjEditing
import ClosureEvents
import ClosureForGroups
import DummyCaster
import OrderIds

// Local imports:
import AbilityObjEditingCommons
import ArmySpawner
import BTAbilities
import BTAbilityTooltipGenerator
import ItemObjEditingCommon
import LocalObjectIDs
import TooltipsUtils
import UnitObjEditingCommon

let DEATH_COIL_AOE = 150.
let DEATH_COIL_TARGET_COUNT = 3

@compiletime function createUndeadAbilities()
    let bansheeCount = BTBuildingData.getUnitCount(BUILDING_BANSHEE)
    var itm = createBasicItem(ITEM_UNHOLY_FRENZY)
        ..setItemCost(0, 100, 1, bansheeCount, bansheeCount)
        ..setNameEnhance("Z", "Replace 1 Anti-Magic Shell with 1 Unholy Frenzy")
        ..setInterfaceIcon(Icons.bTNUnholyFrenzy)

    var tgen = new BTAbilityTooltipGenerator("Increases the attack rate of a " +
        "target unit but drains hit points.")
    new AbilityDefinitionUnholyFrenzycreep(ABIL_UNHOLY_FRENZY)
        ..setCheckDependencies(false)
        ..setDummyAbility()
        ..registerTooltipGenerator(tgen)
        ..presetAttackSpeedBonus(_ -> 0.60)
        ..tooltipStartListen()
        ..addTooltipProperty("Attack Speed Bonus", _ -> "60%")
        ..presetDamageperSecond(_ -> 10)
        ..presetManaCost(_ -> 40)
        ..presetDurationNormal(_ -> 45)
        ..setNameEnhance("Z", "Unholy Frenzy")
        ..tooltipStopListen(false)

    createAutoCastedAlliedAbility(ABIL_AUTOCAST_UNHOLY_FRENZY)
        ..presetManaCost(_ -> 40)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 3)
        ..presetCastRange(_ -> 700)
        ..presetDurationNormal(_ -> 45)
        ..tooltipStopListen(true)
        ..setIconNormal(Icons.bTNUnholyFrenzy)
        ..setIconTurnOff(Icons.bTNUnholyFrenzy)
        ..setBuffs(1, BuffIds.unholyFrenzy.toRawCode())

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_UNHOLY_FRENZY, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator("Creates a barrier that block spell " +
        "and magic damage from affecting a target unit.")
    new AbilityDefinitionAntimagicShieldcreep(ABIL_ANTI_MAGIC_SHELL)
        ..setDummyAbility()
        ..setCheckDependencies(false)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetShieldLife(_ -> 300)
        ..presetManaCost(_ -> 40)
        ..presetDurationNormal(_ -> 90)
        ..setNameEnhance("X", "Anti-Magic Shell")
        ..setBuffs(1, BuffIds.antiMagicShellExtra.toRawCode())
        ..tooltipStopListen(false)

    createAutoCastedAlliedAbility(ABIL_AUTOCAST_ANTI_MAGIC_SHELL)
        ..presetManaCost(_ -> 40)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetCooldown(_ -> 2)
        ..presetDurationNormal(_ -> 90)
        ..tooltipStopListen(true)
        ..presetCastRange(_ -> 500)
        ..setNameEnhance("X", "Anti-Magic Shell")
        ..setBuffs(1, BuffIds.antiMagicShellExtra.toRawCode())
        ..setIconNormal(Icons.bTNAntiMagicShell)
        ..setIconTurnOff(Icons.bTNAntiMagicShell)

    abilTooltipMap.put(ABIL_ANTI_MAGIC_SHELL, tgen.generateFullTooltip())

    itm = createBasicItem(ITEM_FROST_ARMOR)
        ..setItemCost(0, 50, 1, bansheeCount, bansheeCount)
        ..setNameEnhance("X", "Replace 1 Anti-Magic Shell with 1 Frost Armor")
        ..setInterfaceIcon(Icons.bTNFrostArmor)

    tgen = new BTAbilityTooltipGenerator(
        "Creates a shield of frost around a target friendly unit." +
        " The shield adds armor and slows melee units that attack it"
    )
    new AbilityDefinitionLichFrostArmorAutocast(ABIL_FROST_ARMOR)
        ..setLevels(1)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetArmorBonus(_ -> 4)
        ..presetArmorDuration(_ -> 30)
        ..addTooltipProperty("Attack Speed Reduction", _ -> "25%")
        ..addTooltipProperty("Movement Speed Reduction", _ -> "50%")
        ..presetDurationNormal(_ -> 5)
        ..presetCooldown(_ -> 4)
        ..presetManaCost(_ -> 50)
        ..setNameEnhance("X", "Frost Armor")
        ..tooltipStopListen(true)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_FROST_ARMOR, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator("Raises skeletons from a corpse.")
    new AbilityDefinitionRaiseDeadCreep(ABIL_RAISE_SKELETON)
        ..registerTooltipGenerator(tgen)
        ..presetAreaofEffect(_ -> 1000)
        ..presetUnitTypeOne(_ -> commaList(UNIT_SKELETON))
        ..presetUnitTypeForLimitCheck(_ -> commaList(UNIT_SKELETON))
        ..presetUnitsSummonedTypeOne(_ -> 1)
        ..tooltipStartListen()
        ..addTooltipProperty("Summoned Unit Count", _ -> "1")
        ..presetManaCost(_ -> 75)
        ..presetCastRange(_ -> 1000)
        ..presetCooldown(_ -> 12)
        ..presetDurationNormal(_ -> 40)
        ..setNameEnhance("Z", "Raise Dead")
        ..tooltipStopListen(true)
    abilTooltipMap.put(ABIL_RAISE_SKELETON, tgen.generateFullTooltip())

    let necromancerCount = BTBuildingData.getUnitCount(BUILDING_NECROMANCER)
    itm = createBasicItem(ITEM_RAISE_SKELETON_MAGE)
        ..setItemCost(0, 200, 1, necromancerCount, necromancerCount)
        ..setNameEnhance("Z", "Replace Skeleton Warrior by Skeletal Mage")
        ..setInterfaceIcon(Icons.bTNSkeletonMage)

    tgen = new BTAbilityTooltipGenerator("Raises skeleton mages from a corpse.")
    new AbilityDefinitionRaiseDeadCreep(ABIL_RAISE_SKELETON_MAGE)
        ..registerTooltipGenerator(tgen)
        ..presetAreaofEffect(_ -> 1000)
        ..presetUnitTypeOne(_ -> commaList(UNIT_SKELETON_MAGE))
        ..presetUnitTypeForLimitCheck(_ -> commaList(UNIT_SKELETON_MAGE))
        ..presetUnitsSummonedTypeOne(_ -> 1)
        ..tooltipStartListen()
        ..addTooltipProperty("Summoned Unit Count", _ -> "1")
        ..presetManaCost(_ -> 75)
        ..presetCastRange(_ -> 1000)
        ..presetCooldown(_ -> 12)
        ..presetDurationNormal(_ -> 40)
        ..setNameEnhance("Z", "Raise Dead")
        ..tooltipStopListen(true)
    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_RAISE_SKELETON_MAGE, tgen.generateFullTooltip())

    itm = createBasicItem(ITEM_RAISE_SKELETON_ORC)
        ..setItemCost(0, 150, 1, necromancerCount, necromancerCount)
        ..setNameEnhance("Z", "Replace Skeleton Warrior by Skeletal Orc")
        ..setInterfaceIcon(Icons.bTNSkeletalOrc)

    tgen = new BTAbilityTooltipGenerator("Raises skeleton grunts from a corpse.")
    new AbilityDefinitionRaiseDeadCreep(ABIL_RAISE_SKELETON_ORC)
        ..registerTooltipGenerator(tgen)
        ..presetAreaofEffect(_ -> 1000)
        ..presetUnitTypeOne(_ -> commaList(UNIT_SKELETON_ORC))
        ..presetUnitTypeForLimitCheck(_ -> commaList(UNIT_SKELETON_ORC))
        ..presetUnitsSummonedTypeOne(_ -> 1)
        ..tooltipStartListen()
        ..addTooltipProperty("Summoned Unit Count", _ -> "1")
        ..presetManaCost(_ -> 75)
        ..presetCastRange(_ -> 1000)
        ..presetCooldown(_ -> 12)
        ..presetDurationNormal(_ -> 40)
        ..setNameEnhance("Z", "Raise Skeletal Orc")
        ..tooltipStopListen(true)
    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_RAISE_SKELETON_ORC, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator("Raises revenants from a corpse.")
    new AbilityDefinitionRaiseDeadCreep(ABIL_RAISE_REVENANT)
        ..registerTooltipGenerator(tgen)
        ..presetAreaofEffect(_ -> 1500)
        ..presetUnitTypeOne(_ -> commaList(UNIT_REVENANT))
        ..presetUnitTypeForLimitCheck(_ -> commaList(UNIT_REVENANT))
        ..presetUnitsSummonedTypeOne(_ -> 1)
        ..tooltipStartListen()
        ..addTooltipProperty("Summoned Unit Count", _ -> "1")
        ..presetManaCost(_ -> 125)
        ..presetCastRange(_ -> 1500)
        ..presetCooldown(_ -> 10)
        ..presetDurationNormal(_ -> 40)
        ..setNameEnhance("Z", "Raise Revenant")
        ..tooltipStopListen(true)
    abilTooltipMap.put(ABIL_RAISE_REVENANT, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Reduces attack rate and movement speed of target units. " +
        "This is an Orb effect, necromancer will still cast raise skeleton.")
    new AbilityDefinitionOrbofSpells(ABIL_CRIPPLE_ORB)
        ..registerTooltipGenerator(tgen)
        ..presetDamageBonus(_ -> 0)
        ..presetChanceToHitUnits(_ -> 100)
        ..presetChanceToHitSummons(_ -> 100)
        ..setEnabledAttackIndex(1, 0)
        ..presetEffectAbility(_ -> commaList(ABIL_CRIPPLE))

    itm = createBasicItem(ITEM_CRIPPLE)
        ..setItemCost(0, 100, 1, necromancerCount, necromancerCount)
        ..setNameEnhance("X", "Add 1 Cripple")
        ..setInterfaceIcon(Icons.bTNCripple)

    new AbilityDefinitionCripplecreep(ABIL_CRIPPLE)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..setAttackSpeedReduction(1, 0.3)
        ..addTooltipProperty("Attack Speed Reduction", _ -> 0.3.toPercent())
        ..setMovementSpeedReduction(1, 0.20)
        ..addTooltipProperty("Movement Speed Reduction", _ -> 0.20.toPercent())
        ..setDamageReduction(1, 0.40)
        ..addTooltipProperty("Damage Reduction", _ -> 0.40.toPercent())
        ..presetDurationNormal(_ -> 5)
        ..tooltipStopListen(true)
        ..setNameEnhance("Z", "Cripple")
        ..setCooldown(1, 0)
        ..setManaCost(1, 0)
        ..setBuffs(1, commaList(BuffIds.cripple))
    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_CRIPPLE, tgen.generateFullTooltip())


    itm = createBasicItem(ITEM_DEATH_COIL)
        ..setItemCost(0, 400, 1, 1, 1)
        ..setNameEnhance("Z", "Add Death Coil ability")
        ..setInterfaceIcon(Icons.bTNDeathCoil)

    let BUFF_DEATH_COIL = compiletime(BUFF_ID_GEN.next())
    new BuffDefinition(BUFF_DEATH_COIL, BuffIds.stunned)
        ..setIcon(Icons.bTNDeathCoil)
        ..setArtSpecial(1,"")
        ..setTargetAttachmentPoint0("chest")
        ..setArtTarget(1, Abilities.deathCoilSpecialArt)
        ..setTooltipNormal(1, "Death coil Buff")
        ..setTooltipNormalExtended(1, "Just a visual effect")

    // TODO: replace by death coil ability for prettier death effect
    tgen = new BTAbilityTooltipGenerator(
        "A coil of death that deal damage to an enemy unit.")
    new AbilityDefinitionFireBoltcreep(ABIL_DEATH_COIL)
        ..presetDurationNormal(_ -> 0.1)
        ..setCheckDependencies(false)
        ..setDummyAbility()
        ..setArtSpecial(Abilities.deathCoilSpecialArt)
        ..registerTooltipGenerator(tgen)
        ..presetManaCost(_ -> 125)
        ..tooltipStartListen()
        ..presetDamage(_ -> 150)
        ..addTooltipProperty("Target limit", _ -> DEATH_COIL_TARGET_COUNT.toString())
        ..presetAreaofEffect(_ -> DEATH_COIL_AOE)
        ..setNameEnhance("Z", "Death Coil")
        ..tooltipStopListen(false)
        ..setMissileArt(Abilities.deathCoilMissile)
        ..setBuffs(1, BUFF_DEATH_COIL.toRawCode())

    createAutoCastedLongRangeEnemyAbility(ABIL_AUTOCAST_DEATH_COIL)
        ..presetDurationNormal(_ -> 0)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetManaCost(_ -> 125)
        ..presetCooldown(_ -> 6)
        ..presetCastRange(_ -> 800)
        ..tooltipStopListen(true)
        ..setNameEnhance("Z", "Death Coil")
        ..setIconNormal(Icons.bTNDeathCoil)
        ..setIconTurnOff(Icons.bTNDeathCoil)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_DEATH_COIL, tgen.generateFullTooltip())


    itm = createBasicItem(ITEM_UNHOLY_AURA)
        ..setItemCost(0, 500, 1, 1, 1)
        ..setNameEnhance("Z", "Add Unholy Aura")
        ..setInterfaceIcon(Icons.bTNUnholyAura)

    tgen = new BTAbilityTooltipGenerator(
        "Regenerate nearby friendly units hitpoints every seconds.")
    new AbilityDefinitionAuraRegenerationStatue(ABIL_UNHOLY_AURA)
        ..presetDurationNormal(_ -> 0)
        ..setPercentage(1, true)
        ..setCheckDependencies(false)
        ..presetCooldown(_ -> 0)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..setAmountofHitPointsRegenerated(1, 0.02)
        ..addTooltipProperty("Amount of Hit Points Regenerated", _ -> 0.02.toPercent())
        ..presetAreaofEffect(_ -> 1200)
        ..setNameEnhance("Z", "Unholy Aura")
        ..tooltipStopListen(true)
        ..setArtTarget(Abilities.unholyAura)

    tgen.applyToDefItem(itm)
    abilTooltipMap.put(ABIL_UNHOLY_AURA, tgen.generateFullTooltip())

    new BuffDefinition(BUFF_UNHOLY_AURA, BuffIds.unholyAura)
        ..setIcon(Icons.bTNUnholyAura)
        ..setArtSpecial(1, Abilities.unholyAura)
        ..setTooltipNormal(1, "Unholy Aura")
        ..setArtTarget("")
        ..setTooltipNormalExtended(1, "This unit is affected by Unholy Aura; it regains 2% health point per second.")

    new AbilityDefinitionUnholyAuracreep(ABIL_UNHOLY_AURA_VISUAL)
        ..setLevels(1)
        ..setMovementSpeedIncrease(1, 0)
        ..setLifeRegenerationIncrease(1, 0)
        ..setBuffs(1, BUFF_UNHOLY_AURA.toRawCode())
        ..setAreaofEffect(1, 1200)

    tgen = new BTAbilityTooltipGenerator(
        "Reduce enemy armor on hit.")
    new AbilityDefinitionOrbofCorruption(ABIL_ORB_CORRUPTION)
        ..presetEnabledAttackIndex(_ -> 0)
        ..presetDamageBonusDice(_ -> 0)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetArmorPenalty(_ -> 10)
        ..presetDurationNormal(_ -> 5)
        ..setNameEnhance("Z", "Orb of Corruption")
        ..tooltipStopListen(true)
        ..setArtTarget("")

    abilTooltipMap.put(ABIL_ORB_CORRUPTION, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Basic attack applies infection. " +
        "Infected units killed will spawn a zombie.")

    let BUFF_INFECTION = compiletime(BUFF_ID_GEN.next())
    new BuffDefinition(BUFF_INFECTION, BuffIds.blackArrow)
        ..setIcon(Icons.bTNPlagueCloud)
        ..setArtTarget(1, Units.plagueCloudTarget)
        ..setTooltipNormal(1, "Infection")
        ..setTargetAttachments(1)
        ..setTargetAttachmentPoint0("head")
        ..setTooltipNormalExtended(1, "This unit is infected; it will spawn a"
            + " zombie upon death.")

    let abilId = ABIL_ID_GEN.next()
    new AbilityDefinitionOrbofDarkness(ABIL_INFECTION)
        ..setEnabledAttackIndex(1, 0)
        ..setEffectAbility(1, abilId.toRawCode())
        ..setTargetsAllowed(1, commaList(
            TargetsAllowed.ground,
            TargetsAllowed.organic
            ))
        ..setDamageBonus(1, 0)
        ..setTargetAttachmentPoint1("chest")
        ..setArtTarget(Units.plagueCloudTarget)

    new AbilityDefinitionOrbofDarknessBlackArrow(abilId)
        ..registerTooltipGenerator(tgen)
        ..setMissileArt("")
        ..presetSummonedUnitType(_ -> commaList(UNIT_ZOMBIE))
        ..presetDamageBonus(_ -> 0)
        ..presetNumberofSummonedUnits(_ -> 1)
        ..tooltipStartListen()
        ..setDurationNormal(1, 6)
        ..setNameEnhance("Z", "Infection")
        ..tooltipStopListen(true)
        ..setBuffs(1, BUFF_INFECTION.toRawCode())

    abilTooltipMap.put(ABIL_INFECTION, tgen.generateFullTooltip())

    tgen = new BTAbilityTooltipGenerator(
        "Sends a horde of bats to deal damage to each enemy unit in a cone.")
    new AbilityDefinitionCarrionSwarmcreep(ABIL_CARRION_SWARM)
        ..setCheckDependencies(false)
        ..setDummyAbility()
        ..registerTooltipGenerator(tgen)
        ..presetManaCost(_ -> 125)
        ..tooltipStartListen()
        ..presetDamage(_ -> 75)
        ..presetDistance(_ -> 1000)
        ..presetMaxDamage(_ -> 3000)
        ..setNameEnhance("Z", "Carrion Swarm")
        ..tooltipStopListen(false)

    createAutoCastedLongRangeEnemyAbility(ABIL_AUTOCAST_CARRION_SWARM)
        ..setAnimationNames("attack,slam")
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetManaCost(_ -> 125)
        ..presetCooldown(_ -> 8)
        ..presetCastRange(_ -> 600)
        ..tooltipStopListen(true)
        ..setNameEnhance("Z", "Carrion Swarm")
        ..setIconNormal(Icons.bTNCarrionSwarm)
        ..setIconTurnOff(Icons.bTNCarrionSwarm)

    abilTooltipMap.put(ABIL_CARRION_SWARM, tgen.generateFullTooltip())

    new BuffDefinition(BUFF_AFFLICTION, BuffIds.curse)
        ..setTooltipNormal(1, "Affliction")
        ..setTooltipNormalExtended(1, "This unit is cursed; has reduced attack speed and takes damage over time")
        ..setName(1, "Affliction")

    tgen = new BTAbilityTooltipGenerator(
        "Sends a curse to a target that inflict damage over time and reduces attack speed.")
    new AbilityDefinitionAlchemistAcidBomb(ABIL_AFFLICTION)
        ..setLevels(1)
        ..setCheckDependencies(false)
        ..setDummyAbility()
        ..setMissileArt(Abilities.possessionMissile)
        ..setMissileArc(0)
        ..setMissileSpeed(1000)
        ..presetCastRange(_ -> 900)
        ..registerTooltipGenerator(tgen)
        ..presetManaCost(_ -> 125)
        ..presetArmorPenalty(_ -> 0)
        ..tooltipStartListen()
        ..setAttackSpeedReduction(1, -0.4)
        ..addTooltipProperty("Attack Speed Reduction", _ -> "40%")
        ..presetPrimaryDamage(_ -> 20)
        ..setBuffs(1, BUFF_AFFLICTION.toRawCode())
        ..presetSecondaryDamage(_ -> 10)
        ..presetAreaofEffect(_ -> 300)
        ..presetDurationNormal(_ -> 5)
        ..setNameEnhance("Z", "Affliction")

        ..tooltipStopListen(false)

    createAutoCastedLongRangeEnemyAbility(ABIL_AUTOCAST_AFFLICTION)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetManaCost(_ -> 125)
        ..presetCooldown(_ -> 4)
        ..presetCastRange(_ -> 800)
        ..tooltipStopListen(true)
        ..setNameEnhance("Z", "Affliction")
        ..setIconNormal(Icons.bTNCurse)
        ..setIconTurnOff(Icons.bTNCurse)

    abilTooltipMap.put(ABIL_AFFLICTION, tgen.generateFullTooltip())


    itm = createBasicItem(ITEM_SPAWN_GUT_CRAWLER)
        ..setItemCost(0, 200, 1, 1, 1)
        ..setNameEnhance("Z", "Add Spawn Gut Crawlers")
        ..setInterfaceIcon(Icons.bTNGhoul)

    tgen = new BTAbilityTooltipGenerator(
        "Spawn 2 Gut Crawlers upon death.")
    new AbilityDefinitionSpawnHydraHatchling(ABIL_SPAWN_GUT_CRAWLER)
        ..setCheckDependencies(false)
        // We create the unit through the unitDeathTrigger.wurst package
        // because we want the gut crawler to leave a corpse
        ..setNumberofUnits(1, 0)
        ..setUnitType(1, commaList(UNIT_GUT_CRAWLER))
        ..setNameEnhance("Z", "Gut Crawlers")

    tgen.applyToDefItem(itm)

    tgen = new BTAbilityTooltipGenerator(
        "Infects nearby enemy living units with Disease Cloud.")
    new AbilityDefinitionAuraPlagueAbomination(ABIL_DISEASE_CLOUD)
        ..setCheckDependencies(false)
        ..setAuraDuration(1, 6)
        ..setDurationofPlagueWard(1, 1)
        ..registerTooltipGenerator(tgen)
        ..tooltipStartListen()
        ..presetDamageperSecond(_ -> 20)
        ..presetAreaofEffect(_ -> 300)
        ..addTooltipProperty("Duration", _ -> "6")
        ..setNameEnhance("Z", "Disease Cloud")
        ..setTargetsAllowed(1, commaList(TargetsAllowed.enemies, TargetsAllowed.vulnerable))
        ..tooltipStopListen(true)

    tgen.applyToDefItem(itm)


init
    EventListener.onTargetCast(ABIL_AUTOCAST_DEATH_COIL) (unit caster, unit target) ->
        if (caster.getTypeId() == UNIT_DEATH_KNIGHT)
            int _count = 0
            let dummy = new DummyCaster()
                ..owner(caster.getOwner())
                ..origin(caster.getPos())
                ..delay(1)
            forUnitsInRange(target.getPos(), DEATH_COIL_AOE) (unit u) ->
                if _count < DEATH_COIL_TARGET_COUNT
                    and u.isEnemyOf(caster)
                    dummy.castTarget(ABIL_DEATH_COIL, 1, Orders.firebolt, u)

                    _count++
