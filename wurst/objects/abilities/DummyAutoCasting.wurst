package DummyAutoCasting

// Standard libs imports:
import BuffIds
import ClosureEvents
import HashMap
import OrderIds

// Local imports:
import GameConstants
import LocalObjectIDs

public class BuffTuple
    int orderId
    int buffId

    construct(int abilId, int buffId)
        this.orderId = abilId
        this.buffId = buffId

public let dummyToRealCastMapTarget = new HashMap<int, BuffTuple>
public let dummyToRealImmediateCastMap = new HashMap<int, int>


init
    dummyToRealCastMapTarget
        ..put(ABIL_AUTOCAST_HEALING_WAVE, new BuffTuple(OrderIds.healingwave, -1))
        ..put(ABIL_AUTOCAST_ACID_BOMB, new BuffTuple(OrderIds.acidbomb, -1))
        ..put(ABIL_AUTOCAST_CHAIN_LIGHTNING, new BuffTuple(OrderIds.chainlightning, -1))
        ..put(ABIL_AUTOCAST_DRUNKEN_HAZE, new BuffTuple(OrderIds.drunkenhaze, -1))
        ..put(ABIL_AUTOCAST_BLIZZARD, new BuffTuple(OrderIds.blizzard, -1))
        ..put(ABIL_AUTOCAST_UNHOLY_FRENZY,
            new BuffTuple(OrderIds.unholyfrenzy, BuffIds.unholyFrenzy)
        )
        ..put(ABIL_AUTOCAST_ANTI_MAGIC_SHELL,
            new BuffTuple(OrderIds.antimagicshell, BuffIds.antiMagicShellExtra)
        )
        // ..put(ABIL_AUTOCAST_DEATH_COIL, new BuffTuple(OrderIds.firebolt, -1))
        ..put(ABIL_AUTOCAST_STARFALL, new BuffTuple(OrderIds.blizzard, -1))
        ..put(ABIL_AUTOCAST_ENTANGLING_ROOT, new BuffTuple(OrderIds.entanglingroots,
             BuffIds.entanglingRoots))
        ..put(ABIL_AUTOCAST_WAND_OF_ILLUSION, new BuffTuple(OrderIds.wandOfIllusion, -1))
        ..put(ABIL_AUTOCAST_REJUVENATION, new BuffTuple(OrderIds.rejuvination, BuffIds.rejuvenation))
        ..put(ABIL_AUTOCAST_FROST_NOVA, new BuffTuple(OrderIds.frostnova, -1))
        ..put(ABIL_AUTOCAST_FIREBOLT, new BuffTuple(OrderIds.firebolt, -1))
        ..put(ABIL_AUTOCAST_MANA_WARD, new BuffTuple(OrderIds.healingward, -1))
        ..put(ABIL_AUTOCAST_CARRION_SWARM, new BuffTuple(OrderIds.carrionswarm, -1))
        ..put(ABIL_AUTOCAST_CRUSHING_WAVE, new BuffTuple(OrderIds.carrionswarm, -1))
        ..put(ABIL_AUTOCAST_SHOCKWAVE, new BuffTuple(OrderIds.carrionswarm, -1))
        ..put(ABIL_AUTOCAST_AFFLICTION, new BuffTuple(OrderIds.acidbomb, BuffIds.acidBomb))
        ..put(ABIL_AUTOCAST_SOUL_BURN, new BuffTuple(OrderIds.soulburn, BuffIds.soulBurn))
        ..put(ABIL_AUTOCAST_FORKED_LIGHTNING, new BuffTuple(OrderIds.forkedlightning, -1))
        ..put(ABIL_AUTOCAST_FROST_BOLT, new BuffTuple(OrderIds.thunderbolt, -1))
        ..put(ABIL_AUTOCAST_DISRUPTION_RAY, new BuffTuple(OrderIds.rayOfDisruption, -1))
        ..put(ABIL_AUTOCAST_SPIRIT_LINK, new BuffTuple(OrderIds.spiritlink, -1))
        ..put(ABIL_AUTOCAST_HEALING_SPRAY, new BuffTuple(OrderIds.healingspray, -1))
        ..put(ABIL_AUTOCAST_PUTRID_SPRAY, new BuffTuple(OrderIds.healingspray, -1))
        ..put(ABIL_AUTOCAST_FERVOR_POTION, new BuffTuple(OrderIds.acidbomb, -1))
        ..put(ABIL_AUTOCAST_MANA_POTION, new BuffTuple(OrderIds.acidbomb, -1))
        ..put(ABIL_AUTOCAST_BANISH, new BuffTuple(OrderIds.banish, BuffIds.banish))

    dummyToRealImmediateCastMap
        ..put(ABIL_AUTOCAST_TAUNT, OrderIds.taunt)
        ..put(ABIL_AUTOCAST_SUMMON_WISP, OrderIds.waterelemental)
        ..put(ABIL_AUTOCAST_HOWL_OF_TERROR, OrderIds.howlofterror)
        ..put(ABIL_AUTOCAST_INSPIRE, OrderIds.roar)
        ..put(ABIL_AUTOCAST_ROAR, OrderIds.roar)
        ..put(ABIL_AUTOCAST_REXXAR_ROAR, OrderIds.roar)

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST) ->
        let abilId = EventData.getSpellAbilityId()
        let caster = EventData.getSpellAbilityUnit()
        let target = EventData.getSpellTargetUnit()

        // Check if we're casting a dummy spell
        if dummyToRealCastMapTarget.has(abilId)
            let buffId = dummyToRealCastMapTarget.get(abilId).buffId
            if target.isAlive()
                and not target.hasAbility(buffId)
                let orderId = dummyToRealCastMapTarget.get(abilId).orderId
                caster.startAbilityCooldown(abilId)
                caster.issueTargetOrderById(orderId, target)

                // Special case for dummy cast spell based on healing
                // see https://www.hiveworkshop.com/threads/autocast-spell-that-target-injured-ally-apart-from-priest-healing.352970/
                if abilId == ABIL_AUTOCAST_REJUVENATION
                    target.removeAbility(ABIL_AUTOCAST_REJUVENATION)
                    target.addAbility(ABIL_AUTOCAST_REJUVENATION)
                else if abilId == ABIL_AUTOCAST_HEALING_WAVE
                    target.removeAbility(ABIL_AUTOCAST_HEALING_WAVE)
                    target.addAbility(ABIL_AUTOCAST_HEALING_WAVE)
                else if abilId == ABIL_AUTOCAST_HEALING_SPRAY
                    target.removeAbility(ABIL_AUTOCAST_HEALING_SPRAY)
                    target.addAbility(ABIL_AUTOCAST_HEALING_SPRAY)
            else
                caster.issuePointOrder("attack", CENTER)
                caster.resetCooldown()

            // TODO: refactor into previous if condition
        else if dummyToRealImmediateCastMap.has(abilId)
            let orderId = dummyToRealImmediateCastMap.get(abilId)
            caster.startAbilityCooldown(abilId)
            caster.issueImmediateOrderById(orderId)

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_FINISH) ->
        let caster = EventData.getSpellAbilityUnit()
        if not dummyToRealCastMapTarget.has(EventData.getSpellAbilityId())
            and not caster.isType(UNIT_TYPE_PEON)
            caster.issuePointOrder("attack", CENTER)
