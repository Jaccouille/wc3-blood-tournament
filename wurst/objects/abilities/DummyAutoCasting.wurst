package DummyAutoCasting

import HashMap
import ClosureEvents
import LocalObjectIDs
import GameConstants
import OrderIds
import BuffIds


public class BuffTuple
    int orderId
    int buffId

    construct(int abilId, int buffId)
        this.orderId = abilId
        this.buffId = buffId

public let dummyToRealCastMapTarget = new HashMap<int, BuffTuple>

init
    dummyToRealCastMapTarget
        ..put(ABIL_AUTOCAST_FIRE_SHIELD, new BuffTuple(0, -1))
        ..put(ABIL_AUTOCAST_HEALING_WAVE, new BuffTuple(OrderIds.healingwave, -1))
        ..put(ABIL_AUTOCAST_BLIZZARD, new BuffTuple(OrderIds.blizzard, -1))
        ..put(ABIL_AUTOCAST_UNHOLY_FRENZY,
            new BuffTuple(OrderIds.unholyfrenzy, BuffIds.unholyFrenzy)
        )
        ..put(ABIL_AUTOCAST_ANTI_MAGIC_SHELL,
            new BuffTuple(OrderIds.antimagicshell, BuffIds.antiMagicShellExtra)
        )

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST) ->
        let abilId = EventData.getSpellAbilityId()
        let caster = EventData.getSpellAbilityUnit()
        let target = EventData.getSpellTargetUnit()

        // Check if we're casting a dummy spell
        if dummyToRealCastMapTarget.has(abilId)
            let buffId = dummyToRealCastMapTarget.get(abilId).buffId
            if target.isAlive()
                and not target.hasAbility(buffId)
                let orderId = dummyToRealCastMapTarget.get(abilId).orderId
                caster.startAbilityCooldown(abilId)
                caster.issueTargetOrderById(orderId, target)
            else
                caster.issuePointOrder("attack", CENTER)
                caster.resetAbilityCooldown(abilId)

            // TODO: refactor into previous if condition
            if abilId == ABIL_AUTOCAST_FIRE_SHIELD
                target.addAbility(ABIL_FIRE_SHIELD)

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_FINISH) ->
        let caster = EventData.getSpellAbilityUnit()
        if not dummyToRealCastMapTarget.has(EventData.getSpellAbilityId())
            caster.issuePointOrder("attack", CENTER)
