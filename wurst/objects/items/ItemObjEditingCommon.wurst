package ItemObjEditingCommon

// Standard libs imports:
import ErrorHandling
import ItemIds
import ItemObjEditing

// Local imports:
import GridHotkeyPosition
import ItemStockHandler

public function ItemDefinition.setHotkeyEnhance(string hotkey)
    if not hotKeyMapping.has(hotkey)
        error("Hotkey button position mapping has no \"{0}\" element".format(hotkey))
        return
    this.setHotkey(hotkey)
    this.setButtonPositionX(hotKeyMapping.get(hotkey).x)
    this.setButtonPositionY(hotKeyMapping.get(hotkey).y)

public function createBasicItem(int newId) returns ItemDefinition
    return createBasicItem(newId, ItemIds.bootsofSpeed)

function createBasicItem(int newId, int oldId) returns ItemDefinition
    return new ItemDefinition(newId, oldId)
        ..setGoldCost(0)
        ..setLumberCost(0)
        ..setDroppedWhenCarrierDies(false)
        ..setHotkey("")
        ..setLevel(0)
        ..setHitPoints(1)
        ..setClassification("Charged")
        ..setMaxStack(1)
        ..setLevel(1)
        ..setAbilities("")
        ..setStockReplenishInterval(99999)
        ..setCanBeDropped(false)
        ..setCanBeSoldToMerchants(false)
        ..setModelUsed("")


public function computeItemPointValue(int goldCost, int lumberCost) returns int
    var pointValue = 0
    pointValue += goldCost
    pointValue += lumberCost div 10
    return pointValue

public function ItemDefinition.setItemCost(int goldCost, int lumberCost, int charges, int maxStack, int maxStock)
    this.setGoldCost(goldCost)
    this.setLumberCost(lumberCost)
    this.setMaxStack(maxStack)
    // For refund price computation
    this.setPriority(charges)
    this.setNumberofCharges(charges)
    // For item stock handler
    this.setLevel(maxStock)
    this.setStockMaximum(maxStock)
    this.setHitPoints(computeItemPointValue(goldCost, lumberCost))
    itemGoldCost.saveInt(this.getNewId(), this.getNewId(), goldCost)
    itemLumberCost.saveInt(this.getNewId(), this.getNewId(), lumberCost)
    itemCharges.saveInt(this.getNewId(), this.getNewId(), charges)
    itemMaxStock.saveInt(this.getNewId(), this.getNewId(), maxStock)
