package UnitObjEditingCommon

// Standard libs imports:
import Assets
import ErrorHandling
import ObjectIds
import AbilityObjEditing

// Third party imports:
import Lodash

// Local imports:
import ArmySpawner
import GridHotkeyPosition
import TooltipsUtils
import UnitTooltipGenerator
import LocalObjectIDs
import UnitPointValueMap


function BTUnitDefinition.setCommonAttr()
    this.setDeathTimeseconds(1.0)
    this.setBuildTime(1)
    this.setAttack1DamageSidesperDie(1)
    this.setAttack1DamageNumberofDice(1)
    this.setAttack2DamageSidesperDie(1)
    this.setAttack2DamageNumberofDice(1)
    this.setFoodCost(0)
    this.setLumberBountyAwardedBase(1)
    this.setLumberCost(0)
    this.setAcquisitionRange(1000)
    this.setRequirements("")
    this.setGoldCost(99999)

public function createSpawnedUnit(int newId, int origId) returns BTUnitDefinition
    return new BTUnitDefinition(newId, origId)
        ..setCommonAttr()

public function createSpawnedUnit(int newId, int origId, int buildingId) returns BTUnitDefinition
    return new BTUnitDefinition(newId, origId, buildingId)
        ..setCommonAttr()


public function createBuildingUnit(int newId) returns BuildingDefinition
    return new BuildingDefinition(newId, UnitIds.farm)
        ..setRace(Race.Undead)
        ..setGoldCost(0)
        ..setLumberCost(0)
        ..setNormalAbilities(commaList(AbilityIds.invulnerable))
        ..setBuildTime(1)
        ..setFoodProduced(0)
        ..setPathingMap("PathTextures\\2x2Default.tga")
        ..setGroundTexture("")
        ..setUpgradesUsed("")
        ..setSelectionScale(1.0)
        ..setShadowTextureBuilding("ShadowCrates")


@compiletime function createSellBuilderAbility()
    new AbilityDefinitionAlchemistTransmute(ABIL_SELL_BUILDING)
        ..setManaCost(1, 0)
        ..setCooldown(1, 0)
        ..setGoldCostFactor(1, 1)
        ..setLumberCostFactor(1, 1)
        ..setHeroAbility(false)
        ..setTargetsAllowed(1, commaList(
            TargetsAllowed.player_t,
            TargetsAllowed.structure,
            TargetsAllowed.invulnerable
        ))
        ..setTooltipNormal(1, "Sell unit")
        ..setTooltipNormalExtended(1, "Sell the unit and get 100% of its cost back")


public function createBuilder(int newId, int origId) returns UnitDefinition
    return new UnitDefinition(newId, origId)
        ..setNormalAbilities(commaList(AbilityIds.invulnerable, ABIL_SELL_BUILDING))
        ..setAttacksEnabled(AttacksEnabled.None.toObjectInt())
        ..setSpeedBase(522)
        ..setMovementType(MovementType.Fly)
        ..setBuildTime(1)
        ..setFoodCost(0)
        ..setGoldCost(0)
        ..setStructuresBuilt("")
        ..setUpgradesUsed("")
        ..setTurnRate(3)
        ..setPropulsionWindowdegrees(180)
        ..setMovementHeight(200)
        ..setRace(Race.Undead)
        ..setAnimationCastBackswing(0)
        ..setAnimationCastPoint(0)

/** Configure this variable to `false` if you don't want the
	property names to have spaces. */
@configurable constant USE_PROPERTY_SPACING = true

class BTUnitDefinition extends UnitDefinition
    BuildingDefinition buildingDef
    int spawnCount
    UnitTooltipGenerator tooltipGen = null
    boolean listen = false

    construct(int newId, int origId)
        super(newId, origId)

    construct(int newId, int origId, int buildingId)
        super(newId, origId)
        buildingDef = createBuildingUnit(buildingId)
            ..setUnitsTrained(commaList(newId))
        spawnCount = armyMap.get(buildingId).unitToSpawn.countBy(Predicate.owned<int>(id -> id == newId))

    function registerTooltipGenerator(UnitTooltipGenerator tgen)
        tooltipGen = tgen

    private function addTooltipProperty(string pName, string value)
        if tooltipGen != null and listen
            if USE_PROPERTY_SPACING
                tooltipGen.addProperty(pName, value, 0)
            else
                tooltipGen.addProperty(pName.replace(" ", ""), value, 0)

    private function addTooltipProperty(string pName, int value)
        addTooltipProperty(pName, value.toString())

    private function addTooltipProperty(string pName, real value)
        var s = value.toString()
        s = s.endsWith(".0") ? s.substring(0, s.length() - 2) : s
        addTooltipProperty(pName, s)

    function tooltipStartListen()
        listen = true

    function tooltipStopListen()
        tooltipStopListen(true)

    function tooltipStopListen(boolean build)
        listen = false
        if tooltipGen != null and build
            tooltipGen.applyToDef(this)
            if this.buildingDef != null
                tooltipGen.applyToDef(this.buildingDef)

    /**
        Used for copying current this UnitDefinition tooltip to another one
    **/
    function tooltipStopListen(boolean build, UnitOrBuildingOrHeroDefinition def)
        listen = false
        if tooltipGen != null and build
            tooltipGen.applyToDef(def)
            tooltipGen.applyToDef(this)


    override function setAttack1AttackType(AttackType data)
        let dataStr = data.toObjectString()
        def.setString("ua1t", dataStr)
        addTooltipProperty("Damage Type", dataStr.firstUpper())

    override function setAttack1DamageBase(int data)
        def.setInt("ua1b", data)
        // Setting base damage to 15 without random spread set the damage to  16
        // Add +1 to make sure the tooltip is accurate
        let dataAdjusted = data + 1
        addTooltipProperty("Damage", dataAdjusted)

    override function setAttack1CooldownTime(real data)
        def.setUnreal("ua1c", data)
        addTooltipProperty("Attack Speed", data)

    override function setHitPointsMaximumBase(int data)
        def.setInt("uhpm", data)
        addTooltipProperty("Health Point", data)

    override function setDefenseBase(int data)
        def.setInt("udef", data)
        addTooltipProperty("Armor", data)

    override function setArmorType(ArmorType data)
        let dataStr = data.toObjectString()
        def.setString("udty", dataStr)
        addTooltipProperty("Armor Type", dataStr.firstUpper())

    override function setSpeedBase(int data)
        def.setInt("umvs", data)
        addTooltipProperty("Movement Speed", data)

    override function setAttack1Range(int data)
        def.setInt("ua1r", data)
        addTooltipProperty("Attack Range", data)

    function setMana(int data)
        def.setInt("umpm", data)
        def.setInt("umpi", data)
        addTooltipProperty("Mana", data)

    /**
        Set gold cost
        TODO: refactor, currently useless
    **/
    function setGoldData(int data)
        this.setGoldCost(data)

    function setAutoPointValue()
        if not unitToPoint.has(newId)
            error("Missing point value for " + newId.toRawCode())
        setPointValue(unitToPoint.get(newId))

    override function setPointValue(int data)
        def.setInt("upoi", data)
        addTooltipProperty("Bounty", data)

    function setNameEnhance(string hotkey, string name)
        this.setHotkeyEnhance(hotkey)
        this.setName(name)
        this.setTooltipBasic(makeToolTipNorm(hotkey, name))
        if this.buildingDef != null
            buildingDef.setNameEnhance(hotkey, name + " x" + spawnCount.toString())

    function setModelFileExt(string data)
        this.setModelFile(data)
        this.buildingDef.setModelFile(data)

    function setIconGameInterfaceExt(string data)
        this.setIconGameInterface(data)
        this.buildingDef.setIconGameInterface(data)

    function setUnitSoundSetExt(string data)
        this.setUnitSoundSet(data)
        this.buildingDef.setUnitSoundSet(data)

    function setNormalAbilitiesExt(string data)
        this.setNormalAbilities(data)
        this.buildingDef.setNormalAbilities(data)


public function UnitOrBuildingOrHeroDefinition.setNameEnhance(string hotkey, string name)
    this.setHotkeyEnhance(hotkey)
    this.setName(name)
    this.setTooltipBasic(makeToolTipNorm(hotkey, name))

public function UnitDefinition.setName(string name)
    this.setTooltipBasic(makeToolTipNormAura(name))
    this.setButtonPositionX(0)
    this.setButtonPositionY(0)

/**
    Set to lowest collision size possible (15)
**/
public function UnitDefinition.setSizeSmall()
    this.setCollisionSize(15)

function UnitOrBuildingOrHeroDefinition.setHotkeyEnhance(string hotkey)
    if not hotKeyMapping.has(hotkey)
        error("Hotkey button position mapping has no \"{0}\" element".format(hotkey))
        return
    this.setHotkey(hotkey)
    this.setButtonPositionX(hotKeyMapping.get(hotkey).x)
    this.setButtonPositionY(hotKeyMapping.get(hotkey).y)
