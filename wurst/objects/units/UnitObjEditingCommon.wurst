package UnitObjEditingCommon

// Standard libs imports:
import AbilityObjEditing
import Assets
import ErrorHandling
import ObjectIds
import ItemObjEditing
import LinkedList

// Third party imports:

// Local imports:
import ArmySpawner
import GridHotkeyPosition
import LocalObjectIDs
import TooltipsUtils
import UnitTooltipGenerator

function BTUnitDefinition.setCommonAttr()
    this.setBuildTime(1)
    this.setAttack2DamageSidesperDie(1)
    this.setAttack2DamageNumberofDice(1)
    this.setLumberBountyAwardedBase(1)
    this.setLumberCost(0)
    this.setAcquisitionRange(2000)
    this.setRequirements("")
    this.setUpgradesUsed("")
    this.setGoldCost(9999999)
    this.setFoodCost(0)
    this.setButtonPositionX(0)
    this.setButtonPositionY(2)
    this.setNormalAbilities("")
    this.setHitPointsRegenerationType("always")

public function createSpawnedUnit(int newId, int origId) returns BTUnitDefinition
    return new BTUnitDefinition(newId, origId)
        ..setCommonAttr()

public function createSpawnedUnit(int newId, int origId, int buildingId) returns BTUnitDefinition
    return new BTUnitDefinition(newId, origId, buildingId)
        ..setCommonAttr()


public function createBuildingUnit(int newId) returns BuildingDefinition
    return new BuildingDefinition(newId, UnitIds.farm)
        ..setRace(Race.Undead)
        ..setGoldCost(0)
        ..setPointValue(0)
        ..setLumberCost(0)
        // ..setNormalAbilities(commaList(AbilityIds.invulnerable, AbilityIds.inventory, ABIL_SHOP_PURCHASE, ABIL_SHOP_SHARING, AbilityIds.sellItems))
        ..setNormalAbilities(commaList(AbilityIds.invulnerable, AbilityIds.inventory, ABIL_SHOP_SHARING, AbilityIds.sellItems))
        ..setBuildTime(1)
        ..setFoodProduced(0)
        ..setPathingMap("PathTextures\\2x2Default.tga")
        ..setGroundTexture("")
        ..setUpgradesUsed("")
        ..setRequirements("")
        ..setSelectionScale(1.0)
        ..setShadowTextureBuilding("ShadowCrates")

@compiletime function createShopSharingAbility()
    new AbilityDefinitionShopSharing(ABIL_SHOP_SHARING)
        ..setShowUnitIndicator(1, false)
        ..setShowSelectUnitButton(1, true)
        ..setCastRange(1, 9000)
        ..setActivationRadius(1, 9000)

    new AbilityDefinition(ABIL_SHOP_PURCHASE, AbilityIds.shopPurchaseItem)
        ..setTargetsAllowed(1, commaList(TargetsAllowed.self))

@compiletime function createSellBuilderAbility()
    new AbilityDefinitionAlchemistTransmute(ABIL_SELL_BUILDING)
        ..setManaCost(1, 0)
        ..setCooldown(1, 0)
        ..setGoldCostFactor(1, 1)
        ..setLumberCostFactor(1, 1)
        ..setHeroAbility(false)
        ..setTargetsAllowed(1, commaList(
            TargetsAllowed.player_t,
            TargetsAllowed.structure,
            TargetsAllowed.invulnerable
        ))
        ..setTooltipNormal(1, "Sell unit")
        ..setTooltipNormalExtended(1, "Sell the unit and get 100% of its cost back")


public function createBuilder(int newId, int origId) returns UnitDefinition
    return new UnitDefinition(newId, origId)
        ..setNormalAbilities(commaList(AbilityIds.invulnerable, ABIL_SELL_BUILDING, AbilityIds.inventory))
        ..setAttacksEnabled(AttacksEnabled.None.toObjectInt())
        ..setSpeedBase(522)
        ..setMovementType(MovementType.Fly)
        ..setBuildTime(1)
        ..setFoodCost(0)
        ..setGoldCost(0)
        ..setStructuresBuilt("")
        ..setUpgradesUsed("")
        ..setTurnRate(3)
        ..setPropulsionWindowdegrees(180)
        ..setMovementHeight(200)
        ..setRace(Race.Undead)
        ..setAnimationCastBackswing(0)
        ..setAnimationCastPoint(0)
        ..setFoodCost(1)
        ..setRequirements(commaList(UPGD_RACE_PICK, UPGD_ALL_RANDOM))

/** Configure this variable to `false` if you don't want the
	property names to have spaces. */
@configurable constant USE_PROPERTY_SPACING = true

public enum ItemModifierType
    Replace
    Addition
    Other

public class BTUnitDefinition extends UnitDefinition
    BuildingDefinition buildingDef
    ItemDefinition itemDef
    BTBuildingData buildingData
    int spawnCount
    UnitTooltipGenerator tooltipGen = null
    boolean listen = false
    ItemModifierType modifierType
    int charges

    construct(int newId, int origId)
        super(newId, origId)

    construct(int newId, int origId, int buildingId)
        super(newId, origId)
        buildingDef = createBuildingUnit(buildingId)
            ..setUnitsTrained(commaList(newId))
        buildingData = BTBuildingData.unitIdToDataMap.get(buildingId)
        spawnCount = buildingData.unitToSpawn.size()

    function registerItemDef(ItemDefinition itemDef, ItemModifierType modifierType)
        this.itemDef = itemDef
        this.modifierType = modifierType

    function registerTooltipGenerator(UnitTooltipGenerator tgen)
        tooltipGen = tgen

    function addTooltipProperty(string pName, string value)
        if tooltipGen != null and listen
            if USE_PROPERTY_SPACING
                tooltipGen.addProperty(pName, value, 0)
            else
                tooltipGen.addProperty(pName.replace(" ", ""), value, 0)

    function addTooltipProperty(string pName, int value)
        addTooltipProperty(pName, value.toString())

    function addTooltipProperty(string pName, real value)
        var s = value.toString()
        s = s.endsWith(".0") ? s.substring(0, s.length() - 2) : s
        addTooltipProperty(pName, s)

    function tooltipStartListen()
        listen = true

    function tooltipStopListen()
        tooltipStopListen(true)

    function tooltipStopListen(boolean build)
        listen = false
        if tooltipGen != null and build
            tooltipGen.applyToDef(this)
            if this.buildingDef != null
                tooltipGen.applyToDef(this.buildingDef)

    /**
        Used for copying current this UnitDefinition tooltip to another one
    **/
    function tooltipStopListen(boolean build, UnitOrBuildingOrHeroDefinition def)
        listen = false
        if tooltipGen != null and build
            tooltipGen.applyToDef(def)
            tooltipGen.applyToDef(this)

    /**
        Used for copying current this UnitDefinition tooltip to another one
    **/
    function tooltipStopListen(boolean build, ItemDefinition def)
        listen = false
        if tooltipGen != null and build
            tooltipGen.applyToDef(def)
            tooltipGen.applyToDef(this)

    function setAttack1Data(AttackType attackType, int damage, int nbDice, int sidePerDice, real attackCooldown)
        let attackTypeStr = attackType.toObjectString()
        def.setString("ua1t", attackTypeStr)

        def.setUnreal("ua1c", attackCooldown)
        def.setInt("ua1b", damage)
        this.setAttack1DamageNumberofDice(nbDice)
        this.setAttack1DamageSidesperDie(sidePerDice)

        let min = damage
        let max = damage + nbDice * sidePerDice
        let tooltip = attackTypeStr.firstUpper() +
             " | " + min.toString() + " - " + max.toString() +
             " | " + attackCooldown.toString()
        addTooltipProperty("Damage", tooltip)

    override function setHitPointsMaximumBase(int data)
        def.setInt("uhpm", data)
        addTooltipProperty("Health Point", data)

    function setArmorData(ArmorType data, int defenseAmount)
        var dataStr = data.toObjectString()
        def.setString("udty", dataStr)
        def.setInt("udef", defenseAmount)
        if dataStr == "divine"
            dataStr = "spectral"
        addTooltipProperty("Armor", dataStr.firstUpper() + " | " + defenseAmount.toString())

    override function setDefenseBase(int data)
        def.setInt("udef", data)
        addTooltipProperty("Armor", data)

    override function setArmorType(ArmorType data)
        let dataStr = data.toObjectString()
        def.setString("udty", dataStr)
        addTooltipProperty("Armor Type", dataStr.firstUpper())

    override function setSpeedBase(int data)
        def.setInt("umvs", data)
        addTooltipProperty("Movement Speed", data)

    override function setAttack1Range(int data)
        def.setInt("ua1r", data)
        addTooltipProperty("Range", data)

    function setMana(int data)
        def.setInt("umpm", data)
        def.setInt("umpi", data)
        addTooltipProperty("Mana", data)

    function setBuildingScalingValue(real data)
        buildingDef.setScalingValue(data)

    function setBuildingGoldCost(int data)
        buildingDef.setGoldCost(data)

    function setBuildingLumberCost(int data)
        buildingDef.setLumberCost(data)

    function setBuildingUnitsTrained(string data)
        buildingDef.setUnitsTrained(data)

    function setBuildingRequirement(string data)
        buildingDef.setRequirements(data)

    function setUpgradeTo(string data)
        buildingDef.setUpgradesTo(data)

    function setBuildingItemsMade(string data)
        buildingDef.setItemsMade(data)

    function setBuildingItemsSold(string data)
        buildingDef.setItemsSold(data)

    function setAutoBuildingCost()
        setBuildingGoldCost(buildingData.goldCost)
        setBuildingLumberCost(buildingData.lumberCost)

    function setItemCost(int gold, int lumber, int charges)
        setItemCost(gold, lumber, charges, charges, charges)

    function setItemCost(int gold, int lumber, int charges, int maxStock, int maxStack)
        itemDef.setStockMaximum(maxStock)
        itemDef.setMaxStack(maxStack)
        itemDef.setGoldCost(gold)
        itemDef.setLumberCost(lumber)
        itemDef.setNumberofCharges(charges)
        itemDef.setLevel(maxStock)
        this.charges = charges
        setPointValue(gold, lumber, charges)

    function setAutoPointValue()
        if this.buildingDef != null
            setPointValue(buildingData.unitPointValue)
            addTooltipProperty("Building BP", buildingData.buildingPointValue)

    function setPointValue(int gold, int lumber, int count)
        setPointValue(getUnitPointValue(gold, lumber, count))

    override function setPointValue(int data)
        def.setInt("upoi", data)
        addTooltipProperty("Bounty", data)

    function setNameEnhance(string hotkey, string name)
        this.setHotkeyEnhance(hotkey)
        this.setName(name)
        this.setTooltipBasic(makeToolTipNorm(hotkey, name))
        if this.buildingDef != null
            buildingDef.setNameEnhance(hotkey, name + " x" + spawnCount.toString())
        if this.itemDef != null
            var itemName = modifierType == modifierType.Addition ?
                "Add {0} ".format(this.charges.toString()) :
                "Replace {0} unit with ".format(this.charges.toString())
            itemName += name
            itemDef.setNameEnhance(hotkey, itemName)

    function setBuildingName(string hotkey, string name)
        this.buildingDef.setNameEnhance(hotkey, name)

    function setModelFileExt(string data)
        this.setModelFile(data)
        this.buildingDef.setModelFile(data)

    function setRequiredAnimationNamesExt(string data)
        this.setRequiredAnimationNames(data)
        this.buildingDef.setRequiredAnimationNames(data)

    function setIconGameInterfaceExt(string data)
        this.setIconGameInterface(data)
        if this.buildingDef != null
            this.buildingDef.setIconGameInterface(data)
        if this.itemDef != null
            this.itemDef.setInterfaceIcon(data)

    function setUnitSoundSetExt(string data)
        this.setUnitSoundSet(data)
        this.buildingDef.setUnitSoundSet(data)


public function UnitOrBuildingOrHeroDefinition.setNameEnhance(string hotkey, string name)
    this.setHotkeyEnhance(hotkey)
    this.setName(name)
    this.setTooltipBasic(makeToolTipNorm(hotkey, name))

public function ItemDefinition.setNameEnhance(string hotkey, string name)
    this.setHotkeyEnhance(hotkey)
    this.setName(name)
    this.setTooltipBasic(makeToolTipNorm(hotkey, name))

public function UnitDefinition.setName(string name)
    this.def.setString("unam", name)
    this.setTooltipBasic(makeToolTipNormAura(name))
    this.setButtonPositionX(0)
    this.setButtonPositionY(0)

/**
    Set to lowest collision size possible (15)
**/
public function UnitDefinition.setSizeSmall()
    this.setCollisionSize(15)

public function UnitDefinition.setSizeLarge()
    this.setCollisionSize(32)

public function BTUnitDefinition.setSmallSplash()
    this.setAttack1AreaofEffectFullDamage(25)
    this.setAttack1AreaofEffectMediumDamage(50)
    this.setAttack1AreaofEffectSmallDamage(120)
    this.setAttack1DamageFactorSmall(0.1)
    this.setAttack1DamageFactorMedium(0.4)
    this.addTooltipProperty("Splash", "Small")

function W3UDefinition.setHotkeyEnhance(string hotkey)
    if not hotKeyMapping.has(hotkey)
        error("Hotkey button position mapping has no \"{0}\" element".format(hotkey))
        return
    this.setHotkey(hotkey)
    this.setButtonPositionX(hotKeyMapping.get(hotkey).x)
    this.setButtonPositionY(hotKeyMapping.get(hotkey).y)

function W3TDefinition.setHotkeyEnhance(string hotkey)
    if not hotKeyMapping.has(hotkey)
        error("Hotkey button position mapping has no \"{0}\" element".format(hotkey))
        return
    this.setHotkey(hotkey)
    this.setButtonPositionX(hotKeyMapping.get(hotkey).x)
    this.setButtonPositionY(hotKeyMapping.get(hotkey).y)
