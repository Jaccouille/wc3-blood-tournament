package GameInit

// Standard libs imports:
import ClosureTimers
import ObjectIdGenerator
import Preloader

// Local imports:
import AltarEntity
import ArmySpawner
import Indicators
import LocalObjectIDs
import RoundController
import ScoreBoard
import UnitDeathTrigger
import Sounds
import GameStates

// A timer for the core gameplay.
public constant GAME_TIMER = CreateTimer()

public function playGameInitSound()
    // Create, play, and kill the sound.
    KillSoundWhenDone(
        CreateSound(
            Sounds.bloodElfMagePissed6,
            false,
            false,
            false,
            10,
            10,
            ""
        )
            ..setPitch(1.)
            ..setVolume(127)
            ..play()
    )

function preload()
    let abils = new IdGenerator('AM00')
    while preloadAbility(abils.next())
        skip
    destroy abils

    let units = new IdGenerator('x000')
    while preloadUnit(units.next())
        skip
    destroy units

function initVision()
    for i = 0 to bj_MAX_PLAYER_SLOTS - 1
        if players[i].isIngame()
            createFogModifier(players[i], FOG_OF_WAR_VISIBLE, bj_mapInitialPlayableArea, false, false)
                .start()

init
    // preload()
    GAME_TIMER.start(99999999, null)

    // register altar callback indicator before replacing it
    initAltar()
    initPlayers()

    SetTimeOfDayScale(0)
    SetTimeOfDay(12)

    registerIndicatorCallback(UNIT_RACE_PICKER) (unit target) ->
        let pData = pDatas.get(target.getOwner())
        pData.racePicker = target
    replaceIndicator()
    nullTimer() ->
        initRoundController()
        initUnitDeathTrigger()
        initArmySpawner()
        initScoreBoard()
        ForForce(bj_FORCE_ALL_PLAYERS) ->
            CreateFogModifierRect(
                GetEnumPlayer(),
                FOG_OF_WAR_VISIBLE,
                bj_mapInitialPlayableArea,
                true,
                false
            ).start()
    GameStates.modesSelection.onExit() (state) ->
        playGameInitSound()
