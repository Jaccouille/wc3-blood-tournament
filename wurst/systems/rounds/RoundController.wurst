package RoundController

// Standard libs imports:
import ClosureTimers
import HashSet
import TimerUtils

// Local imports:
import AltarEntity
import GameConfig
import GameStates
import OrderBlocker
import ScoreBoard
import public Round
import LocalObjectIDs

public constant roundController = new RoundController()

interface OnAllroundsFinished
    abstract function execute()

public OnAllroundsFinished onAllroundsFinished

boolean hasQuarterStarted = false
boolean hasDemiStarted = false

class RoundController
    boolean hasFinalStarted = false
    // TODO: refactor, currently only used for disabled race repick
    boolean hasRoundStarted = false
    constant rounds = new LinkedList<Round>
    player previousRoundWinner = null
    timerdialog tdialog
    timer tim

    Round currentRound = null

    function addRound(Round round)
        this.rounds.add(round)

    function addRounds(LinkedList<Round> rounds)
        this.rounds.addAll(rounds.copy())

    function buildScoreBoardForFinals(string roundPhase)
        // Get all round from the same phase
        let rounds = this.rounds.filter(r -> r.roundName == roundPhase)

        // Get all participants for those rounds
        let roundParticipants = currentRound.roundParticipant.copy()
        if rounds.size() > 0
            roundParticipants..addAll(
                        rounds
                            .map(elem -> elem.roundParticipant)
                            .reduce((s, t) -> s.copy()..addAll(t))
                        )

        // Build list of matchup on the scoreBoard
        ScoreBoardColumnEntries.orderRowsForNextRound(roundParticipants)
        destroy roundParticipants

    function preRoundPhaseStart()
        if rounds.isEmpty()
            onAllroundsFinished.execute()
            return

        currentRound = rounds.dequeue()

        // TODO: Maybe move board update to scoreboard package?
        BOARD_TITLE_PREFIX = currentRound.roundName
        if currentRound instanceof NormalRound
            BOARD_TITLE_PREFIX += "/" + gameConfig.getRoundCount().toString()

        // TODO: refactor implementation, this doesn't look really right to me...
        if currentRound instanceof FinalRound
            Log.debug("Debug " + currentRound.roundName)
            if currentRound.roundName == "Quarter Final" and not hasQuarterStarted
                buildScoreBoardForFinals("Quarter Final")
                hasQuarterStarted = true
            else if currentRound.roundName == "Demi Final" and not hasDemiStarted
                buildScoreBoardForFinals("Demi Final")
                hasDemiStarted = true
            else if currentRound.roundName == "Final"
                buildScoreBoardForFinals("Final")

        else
            ScoreBoardColumnEntries.loadRoundLayout(currentRound.roundParticipant)

        tim = getTimer()
        tdialog = tim.createTimerDialog()
            ..setTitle(currentRound.roundName + " begins in :")
            ..display(true)

        real interludeTime
        if currentRound instanceof FinalRound
            if hasFinalStarted
                interludeTime = 3.
            else
                // Allow builder to construct
                disableOrderBlocker()
                interludeTime = 120.
                hasFinalStarted = true
                pDatas.forEach() (player key, PlayerData value) ->
                    SetPlayerTechResearched(key, UPGD_ELIMINATION, 1)
        else
            // Allow builder to construct
            disableOrderBlocker()
            interludeTime = gameConfig.getRoundInterludeTime()

        tdialog.setRealTimeRemaining(interludeTime)
        tim.doAfter(interludeTime) ->
            startRound()

    function startRound()
        hasRoundStarted = true
        currentRound.start()
        tdialog.destr()
        if tim != null
            tim.destr()

    function checkIfCurrentroundDone(player winner)
        if currentRound != null
            currentRound.finish(winner)
            if currentRound instanceof FinalRound
                // Registering the winner to create final round matchup
                if previousRoundWinner == null
                    Log.info("Adding previous winner " + winner.getName())
                    previousRoundWinner = winner
                else
                    Log.info("Removing previous winner")
                    previousRoundWinner = null
            currentRound = null
            preRoundPhaseStart()

    function buildFinalRoundMatchup(player winner)
        if roundController.previousRoundWinner != null
            Log.info("Adding " + roundController.previousRoundWinner.getNameColored(true) + " vs " + winner.getNameColored(true))
            roundController.addRound(
                new FinalRound()
                    ..addMatchup(new Pair(roundController.previousRoundWinner.getId(), winner.getId())))

function generateMatchups() returns LinkedList<LinkedList<Pair<int, int>>>
    Log.debug("[generateMatchups]")
    let possibleMatchUp = new LinkedList<Pair<int, int>>
    // TODO: handle player count?
    for i = 0 to 7
        for j = i + 1 to 7
            possibleMatchUp.add(new Pair(i, j))

    // possibleMatchUp.shuffle()
    let roundParticipantList = new LinkedList<LinkedList<Pair<int, int>>>

    let usedPairs = new HashSet<Pair<int, int>>
    let usedPlayers = new HashSet<int>

    for x = 1 to 7
        let roundPairs = new LinkedList<Pair<int, int>>

        while roundPairs.size() < 4
            // usedPairs.forEach() (Pair<integer, integer> t) ->
            //     Log.info("[generateMatchups] used_pairs : " + t.a.toString() + " " + t.b.toString())
            for pair in possibleMatchUp
                if not usedPairs.has(pair)
                    and not usedPlayers.has(pair.a)
                    and not usedPlayers.has(pair.b)

                    roundPairs.add(pair)
                    usedPairs.add(pair)
                    usedPlayers.add(pair.a, pair.b)
                    break
        roundPairs.shuffle()
        roundParticipantList.add(roundPairs)
        usedPlayers.clear()
    // Log.info("[generateMatchups] after combos")
    // roundParticipantList.forEach() (LinkedList<Pair<integer, integer>> t) ->
    //     Log.info("==============================")
    //     t.forEach() (Pair<integer, integer> t) ->
    //         Log.info("roundParticipantList : " + t.a.toString() + " " + t.b.toString())
    roundParticipantList.shuffle()
    return roundParticipantList

function generateRounds()
    let roundParticipantList = generateMatchups()
    int idx = 0
    while idx < gameConfig.getRoundCount()
        let matchUps = roundParticipantList.get(idx mod 7)
        let round = new NormalRound()
                ..addMatchup(matchUps.dequeue())
                ..addMatchup(matchUps.dequeue())
                ..addMatchup(matchUps.dequeue())
                ..addMatchup(matchUps.dequeue())

        let gold = gameConfig.getRoundGoldIncome().size() <= idx
            ? gameConfig.getRoundGoldIncome().getLast()
            : gameConfig.getRoundGoldIncome().get(idx)
        round.setRewards(gold, 0)
        roundController.addRound(round)
        idx++

function generateFinalRounds()
    let matches = generateMatchups().getRandomElement()
    Log.info("matches " + matches.size().toString())
    for matchUp in matches
        roundController.addRounds(asList<Round>(
            new FinalRound()
                ..addMatchup(matchUp)
            )
        )

public function initRoundController()
    GameStates.modesSelection.onExit() states ->
        generateRounds()
        generateFinalRounds()
        roundController.preRoundPhaseStart()

    onLastArmyRemaining = () ->
        Log.info("Clean up phase")
        altarEntity.getOrbUnit().unpause()
        altarEntity.getArenaMaster().setAnimation("Spell Channel")
        altarEntity.showCounter()

    onAllUnitDead = (player winner) ->
        Log.info("All unit dead")
        roundController.checkIfCurrentroundDone(winner)

    OnRoundFinish.add() (Round round) ->
        Log.info(round.roundName + " finished")
        altarEntity.getOrbUnit().pause()
        altarEntity.getArenaMaster().setAnimation("Stand")

        if roundController.currentRound instanceof FinalRound
            roundController.buildFinalRoundMatchup(round.winner)
            let loser = round.roundParticipant.find(Predicate.owned<player>(_p -> _p != (round.winner)))
            printTimed(round.winner.getName() + " has eliminated " + loser.getName() , 3)
        else
            doAfter(3) ->
                altarEntity.hideCounter()
                printTimed(round.winner.getName() + " gets " + altarEntity.bloodPointCounter.toString() + " for winning the round" , 15)
            doAfter(5) ->
                if round.goldReward > 0
                    printTimed("You get " + round.goldReward.toString() + " golds from round income", 15)
                if round.bloodPointReward > 0
                    printTimed("You get " + round.bloodPointReward.toString() + " blood points from round income", 15)
                pDatas.forEach() (player key, PlayerData value) ->
                    value.giveReward()
                    key.addGold(round.goldReward)
                    key.addLumber(round.bloodPointReward)

    onAllroundsFinished = () ->
        Log.info("Match over")
        if roundController.previousRoundWinner != null
            GameStates.gameplay.exit()
            print(roundController.previousRoundWinner.getName() + " is the Blood tournament champion!")
