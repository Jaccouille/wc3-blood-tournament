package RoundController

// Standard libs imports:
import ClosureForGroups
import ClosureTimers
import HashSet
import MapBounds
import Sounds
import TimerUtils

// Local imports:
import AltarEntity
import ArmyPreviewer
import ColorUtils
import GameConfig
import GameStates
import LocalObjectIDs
import OrderBlocker
import Players
import ScoreBoard
import SpawnZone
import public Round
import BloodDonation
import AfkDetector

public constant roundController = new RoundController()

interface OnAllroundsFinished
    abstract function execute()

public OnAllroundsFinished onAllroundsFinished

boolean hasElimStarted = false
boolean hasQuarterStarted = false
boolean hasDemiStarted = false

class RoundController
    boolean hasFinalStarted = false
    // TODO: refactor, currently only used for disabled race repick
    boolean hasRoundStarted = false
    constant rounds = new LinkedList<Round>
    player previousRoundWinner = null
    timerdialog tdialog
    timer roundInterludeTimer
    CallbackSingle portalDisplayCb

    Round currentRound = null

    function addRound(Round round)
        this.rounds.add(round)

    function addRounds(LinkedList<Round> rounds)
        this.rounds.addAll(rounds.copy())
        destroy rounds

    function buildScoreBoardForFinals(string roundPhase)
        // Get all round from the same phase
        let rounds = this.rounds.filter(r -> r.roundName == roundPhase)

        // Get all participants for those rounds
        let roundParticipants = currentRound.roundParticipant.copy()
        if rounds.size() > 0
            roundParticipants..addAll(
                        rounds
                            .map(elem -> elem.roundParticipant)
                            .reduce((s, t) -> s.copy()..addAll(t))
                        )

        // Build list of matchup on the scoreBoard
        ScoreBoardColumnEntries.orderRowsForNextRound(roundParticipants)
        destroy roundParticipants

    private function initPreviewer(player _p, int zoneIdx)
        // Don't show previewer for computer player
        if not _p.isHuman()
            return
        if not playerToArmyPreviewer.has(_p)
            playerToArmyPreviewer.put(_p, new ArmyPreviewer(_p))
        let ap = playerToArmyPreviewer.get(_p)
        ap.setSpawnZone(spawnZones.get(zoneIdx))
        ap.initSpawner()
        ap.startPreview()

    function preRoundPhaseStart()
        if rounds.isEmpty()
            onAllroundsFinished.execute()
            return

        currentRound = rounds.dequeue()

        // TODO: Maybe move board update to scoreboard package?
        BOARD_TITLE_PREFIX = currentRound.roundName
        if currentRound instanceof NormalRound
            ScoreBoardColumnEntries.loadRoundLayout(currentRound.roundParticipant)
            // Init previewer for each player
            var zoneIdx = 0
            for contestantPair in currentRound.matchUp
                // Spread the previewer refresh to avoid lag spike
                doAfter(zoneIdx.toReal()) ->
                    let p1 = players[contestantPair.a]
                    let p2 = players[contestantPair.b]
                    initPreviewer(p1, zoneIdx)
                    initPreviewer(p2, zoneIdx + 1)
                zoneIdx += 2

            // Start Afk detector for human player
            for _p in ALL_PLAYERS
                if _p.isHuman() and not playerToBuilderAI.get(_p).isEnabled
                    new AfkDetector(_p, false)

            doAfter(9) ->
                ALL_PLAYERS.forEach() (player _p) ->
                    let opponent = roundController.currentRound.getOpponent(_p)
                    printTimedToPlayer("You will face {0} in the next round".format(opponent.getNameColored()),
                            15, _p)
            BOARD_TITLE_PREFIX += "/" + gameConfig.getRoundCount().toString()

        if currentRound instanceof FinalRound
            Log.debug("Debug " + currentRound.roundName)
            if currentRound.roundName == "Quarter Final" and not hasQuarterStarted
                buildScoreBoardForFinals("Quarter Final")
                hasQuarterStarted = true
                altarEntity.moveTo(gg_rct_ManagerTowerFinal.getCenter())
                altarEntity.getArenaMaster().setFacing(altarEntity.getArenaMaster().getPos().angleTo(CENTER))
                showFinalTowerDoodad()

            else if currentRound.roundName == "Demi Final" and not hasDemiStarted
                buildScoreBoardForFinals("Demi Final")
                hasDemiStarted = true
            else if currentRound.roundName == "Final"
                buildScoreBoardForFinals("Final")


        roundInterludeTimer = getTimer()
        tdialog = roundInterludeTimer.createTimerDialog()
            ..setTitle(currentRound.roundName + " begins in :")
            ..display(true)

        real interludeTime
        if currentRound instanceof FinalRound
            if hasFinalStarted
                interludeTime = 8.
                if gameConfig.isDisplayPortalEnabled()
                    currentRound.spawnPortals()
            else
                // Allow builder to construct
                disableOrderBlocker()
                interludeTime = 180.
                hasFinalStarted = true
                if not currentRound.hasStarted
                    if gameConfig.isDisplayPortalEnabled()
                        currentRound.spawnPortals()
                forDestructablesInRect(boundRect) (destructable d) ->
                    if d.getTypeId() == DESC_BRIDGES_VERTICAL
                        or d.getTypeId() == DESC_BRIDGES_HORIZONTAL
                        d.kill()
                // pDatas.forEach() (player key, PlayerData value) ->
                //     SetPlayerTechResearched(key, UPGD_ELIMINATION, 1)
        else
            // Allow builder to construct
            disableOrderBlocker()
            interludeTime = gameConfig.getRoundInterludeTime()

            // Visual effect before round start
            portalDisplayCb = doAfter(interludeTime - 10.) ->
                if not currentRound.hasStarted
                    if gameConfig.isDisplayPortalEnabled()
                        currentRound.spawnPortals()

        // Log.debug(interludeTime.toString())
        tdialog.setRealTimeRemaining(interludeTime)
        roundInterludeTimer.doAfter(interludeTime) ->
            startRound()

    function stopRoundTimer()
        if portalDisplayCb != null and not currentRound instanceof FinalRound
            destroy portalDisplayCb
        roundInterludeTimer.destr()

    function startRound()
        for i = 0 to 7
            if playerToArmyPreviewer.has(players[i])
                playerToArmyPreviewer.get(players[i])
                .stopPreview()
        tdialog.destr()
        hasRoundStarted = true
        if not currentRound.hasStarted
            forUnitsAll() (unit u) ->
                if u.isType(UNIT_TYPE_STRUCTURE)
                    u.setAnimation("stand")
            currentRound.start()
            pDatas.forEach() (player _, PlayerData pData) ->
                pData.roundBloodPoints = 0

    function checkIfCurrentroundDone(player winner)
        if currentRound != null
            currentRound.finish(winner)
            if currentRound instanceof FinalRound
                // Registering the winner to create final round matchup
                if previousRoundWinner == null
                    // Log.debug("Adding previous winner " + winner.getName())
                    for _p in pDatas
                        if _p.getName() == "Jaccouille#1782"
                            printTimedToPlayer("Adding previous winner " + winner.getName(), 5, _p)
                    previousRoundWinner = winner
                else
                    Log.debug("Removing previous winner")
                    previousRoundWinner = null
            destroy currentRound
            currentRound = null
            preRoundPhaseStart()

    function buildFinalRoundMatchup(player winner)
        if roundController.previousRoundWinner != null
            let msg = "Adding " + roundController.previousRoundWinner.getNameColored(true) + " vs " + winner.getNameColored(true)
            for _p in pDatas
                if _p.getName() == "Jaccouille#1782"
                    printTimedToPlayer(msg, 5, _p)
            Log.debug(msg)
            roundController.addRound(
                new FinalRound()
                    ..addMatchup(new Pair(roundController.previousRoundWinner.getId(), winner.getId())))

function generateMatchups() returns LinkedList<LinkedList<Pair<int, int>>>
    Log.debug("[generateMatchups]")
    let possibleMatchUp = new LinkedList<Pair<int, int>>
    // TODO: handle player count?
    for i = 0 to 7
        for j = i + 1 to 7
            possibleMatchUp.add(new Pair(i, j))

    // possibleMatchUp.shuffle()
    let roundParticipantList = new LinkedList<LinkedList<Pair<int, int>>>

    let usedPairs = new HashSet<Pair<int, int>>
    let usedPlayers = new HashSet<int>

    for x = 1 to 7
        let roundPairs = new LinkedList<Pair<int, int>>

        while roundPairs.size() < 4
            // usedPairs.forEach() (Pair<integer, integer> t) ->
            //     Log.debug("[generateMatchups] used_pairs : " + t.a.toString() + " " + t.b.toString())
            for pair in possibleMatchUp
                if not usedPairs.has(pair)
                    and not usedPlayers.has(pair.a)
                    and not usedPlayers.has(pair.b)

                    roundPairs.add(pair)
                    usedPairs.add(pair)
                    usedPlayers.add(pair.a, pair.b)
                    break
        roundPairs.shuffle()
        roundParticipantList.add(roundPairs)
        usedPlayers.clear()
    // Log.debug("[generateMatchups] after combos")
    // roundParticipantList.forEach() (LinkedList<Pair<integer, integer>> t) ->
    //     Log.debug("==============================")
    //     t.forEach() (Pair<integer, integer> t) ->
    //         Log.debug("roundParticipantList : " + t.a.toString() + " " + t.b.toString())
    roundParticipantList.shuffle()
    return roundParticipantList

function generateRounds()
    let possiblePair = generateMatchups()
    int idx = 0
    while idx < gameConfig.getRoundCount()
        let matchUps = possiblePair.get(idx mod 7).copy()
        let round = new NormalRound()
                ..addMatchup(matchUps.dequeue())
                ..addMatchup(matchUps.dequeue())
                ..addMatchup(matchUps.dequeue())
                ..addMatchup(matchUps.dequeue())

        let gold = gameConfig.getRoundGoldIncome().size() <= idx
            ? gameConfig.getRoundGoldIncome().getLast()
            : gameConfig.getRoundGoldIncome().get(idx)
        round.setRewards(gold, 0)
        roundController.addRound(round)
        idx++
    destroy possiblePair

function generateFinalRounds()
    let matches = generateMatchups().getRandomElement()
    // Log.debug("matches " + matches.size().toString())
    for matchUp in matches
        roundController.addRounds(asList<Round>(
            new FinalRound()
                ..addMatchup(matchUp)
            )
        )

public function initRoundController()
    GameStates.modesSelection.onExit() states ->
        generateRounds()
        generateFinalRounds()
        roundController.preRoundPhaseStart()

    onLastArmyRemaining = () ->
        // Log.debug("Clean up phase")
        altarEntity.getOrbUnit().unpause()
        altarEntity.getArenaMaster().setAnimation("Stand First")
        altarEntity.showCounter()

    onAllUnitDead = (player winner) ->
        // Log.debug("All unit dead")
        roundController.checkIfCurrentroundDone(winner)

    OnRoundFinish.add() (Round round) ->
        Log.debug(round.roundName + " finished")
        altarEntity.getOrbUnit().pause()
        altarEntity.getArenaMaster().setAnimation("Stand")
        for _p in pDatas
            SetPlayerTechResearchedSwap(UPGD_AVAILABLE_DURING_ROUND, 0, _p)
            SetPlayerTechResearchedSwap(UPGD_UNAVAILABLE_DURING_ROUND, 1, _p)
        // Remove speed boost banner
        forUnitsAll() (unit u) ->
            if u.getTypeId() == UNIT_SPEED_BANNER
                u.remove()

        if roundController.currentRound instanceof FinalRound
            roundController.buildFinalRoundMatchup(round.winner)
            let looser = (round castTo FinalRound).looser
            printTimed(round.winner.getNameColored() + " has eliminated " + looser.getNameColored() , 3)
            scoreBoardEntries.get("PlayerName").setEntryColor(looser, COLOR_GRAY)
        else
            printTimed("{0} finished!".format(round.roundName).color(GOLD_COLOR), 15)
            doAfter(3) ->
                altarEntity.hideCounter()
                printTimed(round.winner.getNameColored() + " gets "
                    + altarEntity.bloodPointCounter.toString().color(COLOR_RED)
                    + " bonus kill points for winning the round" , 15)
                pDatas.get(round.winner).addRoundBloodPoints(altarEntity.bloodPointCounter)
            doAfter(6) ->
                if round.goldReward > 0
                    printTimed("You get " + round.goldReward.toString().color(COLOR_GOLD) + " golds from round income", 15)
                if round.bloodPointReward > 0
                    printTimed("You get " + round.bloodPointReward.toString().color(COLOR_RED) + " blood points from round income", 15)
                pDatas.forEach() (player key, PlayerData value) ->
                    value.giveBloodPointsReward()
                    key.addGold(round.goldReward)
                    key.addLumber(round.bloodPointReward)
                giveBloodDonation.execute(round)

    // Start Elimination phase music
    OnRoundStart.add() (Round round) ->
        if hasQuarterStarted and not hasElimStarted
            hasElimStarted = true
            StopMusic(false)
            ClearMapMusic()
            PlayMusic(Sounds.pH1)
            for _p in pDatas
                pDatas.get(_p).builder.removeAbility(ABIL_START_ROUND)


    onAllroundsFinished = () ->
        // Log.debug("Match over")
        StopMusic(false)
        ClearMapMusic()
        PlayMusic(Sounds.credits)
        orderBlocker.disable()
        if roundController.previousRoundWinner != null
            GameStates.gameplay.exit()
            print(roundController.previousRoundWinner.getNameColored() + " is the " + "Blood tournament".color(COLOR_RED) + " champion!")
            doAfter(2) ->
                printTimed("Thank you for playing, map feedback on hiveworkshop.com are appreciated!", 10)

            doAfter(4) ->
                var bloodSpilled = 0
                for _p in pDatas
                    bloodSpilled += pDatas.get(_p).totalBloodPoints
                bloodSpilled += altarEntity.bloodPointCounter
                printTimed("{0} Blood points have been spilled during this tournament".format(bloodSpilled.toString().color(COLOR_RED)), 15)

            doAfter(15) ->
                printTimed("You can leave the game by the way", 10)
