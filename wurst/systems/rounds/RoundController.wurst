package RoundController

// Standard libs imports:
import ClosureForGroups
import ClosureTimers
import TimerUtils

// Local imports:
import public Round
import AltarEntity

public constant roundController = new RoundController()

constant SPAWN_TIME = 5.

interface OnAllroundsFinished
    abstract function execute()

public OnAllroundsFinished onAllroundsFinished

class RoundController
    constant rounds = new LinkedList<Round>
    player previousRoundWinner = null

    Round currentRound = null

    function addRound(Round round)
        this.rounds.add(round)

    function addRounds(LinkedList<Round> rounds)
        this.rounds.addAll(rounds.copy())

    function roundSpawn()
        altarEntity.getOrbUnit().pause()
        altarEntity.getBadGuy().setAnimation("Stand")

        if rounds.isEmpty()
            onAllroundsFinished.execute()
            return

        let tim = getTimer()
        // TODO: cleanup
        // let tdialog = tim.createTimerDialog()
        // ..setTitle("Time until next round:")
        // ..display(true)
        tim.doAfter(SPAWN_TIME) ->
            // tdialog.destr()

            currentRound = rounds.dequeue()
            currentRound.start()

    function checkIfCurrentroundDone(player winner)
        if currentRound != null
            currentRound.finish(winner)
            if previousRoundWinner == null
                Log.info("Adding previous winner " + winner.getName())
                previousRoundWinner = winner
            else
                Log.info("Removing previous winner")
                previousRoundWinner = null
            currentRound = null
            roundSpawn()

function generateFinalMatchup() returns LinkedList<Pair<int, int>>
    Log.info("[RoundController] [generateFinalMatchup]")
    let matches = new LinkedList<Pair<int, int>>
    let playerList = asList(0, 1, 2, 3, 4, 5, 6, 7, 8)

    for idx = 0 to playerList.size() - 2 step 2
        matches.add(new Pair(playerList.get(idx), playerList.get(idx + 1)))

    return matches

function generateFinalRounds()
    let matches = generateFinalMatchup()
    for matchUp in matches
        roundController.addRounds(asList<Round>(
            new FinalRound()
                ..addMatchup(matchUp)
            )
        )

function initRounds()
    roundController.addRounds(asList<Round>(
            new NormalRound()
                ..setRewards(600, 0)
                ..addMatchup(new Pair(0, 1))
                ..addMatchup(new Pair(2, 3))
                ..addMatchup(new Pair(4, 5))
                ..addMatchup(new Pair(6, 7)),
            new NormalRound()
                ..setRewards(600, 0)
                ..addMatchup(new Pair(0, 1))
                ..addMatchup(new Pair(2, 3))
                ..addMatchup(new Pair(4, 5))
                ..addMatchup(new Pair(6, 7)),
            new NormalRound()
                ..setRewards(600, 0)
                ..addMatchup(new Pair(0, 1))
                ..addMatchup(new Pair(2, 3))
                ..addMatchup(new Pair(4, 5))
                ..addMatchup(new Pair(6, 7)),
            new NormalRound()
                ..setRewards(600, 0)
                ..addMatchup(new Pair(0, 1))
                ..addMatchup(new Pair(2, 3))
                ..addMatchup(new Pair(4, 5))
                ..addMatchup(new Pair(6, 7))
        ))
    generateFinalRounds()

public function initRoundController()
    initRounds()

    doAfter(2) ->
        roundController.roundSpawn()

    onRoundFinish() (Round round) ->
        Log.info(round.roundName + " finished")
        if roundController.currentRound instanceof FinalRound
            if roundController.previousRoundWinner != null
                Log.info("Adding " + roundController.previousRoundWinner.getNameColored(true) + " vs " + round.winner.getNameColored(true))
                roundController.addRound(
                    new FinalRound()
                        ..addMatchup(new Pair(roundController.previousRoundWinner.getId(), round.winner.getId())))

        doAfter(3) ->
            altarEntity.hideCounter()
            let winner = round.winner
            printTimed(winner.getName() + " gets " + altarEntity.bloodPointCounter.toString() + " for winning the round" , 15)
            forUnitsAll() (unit u) ->
                if IsUnitDeadBJ(u)
                    u.remove()
        doAfter(5) ->
            if round.goldReward > 0
                printTimed("You get " + round.goldReward.toString() + " golds from round income", 15)
            if round.bloodPointReward > 0
                printTimed("You get " + round.bloodPointReward.toString() + " blood points from round income", 15)
            pDatas.forEach() (player key, PlayerData value) ->
                value.giveReward()
                key.addGold(round.goldReward)
                key.addLumber(round.bloodPointReward)

    onLastArmyRemaining = () ->
        Log.info("Clean up phase")
        altarEntity.getOrbUnit().unpause()
        altarEntity.getBadGuy().setAnimation("Spell Channel")
        altarEntity.showCounter()

    onAllUnitDead = (player winner) ->
        Log.info("All unit dead")
        roundController.checkIfCurrentroundDone(winner)

    onAllroundsFinished = () ->
        Log.info("Match over")
        if roundController.previousRoundWinner != null
            print(roundController.previousRoundWinner.getName() + " is the Blood tournament champion!")
