package RoundController

// Standard libs imports:
import ClosureForGroups
import ClosureTimers
import TimerUtils

// Local imports:
import public Round
import AltarEntity
import ScoreBoard
import GameStates

public constant roundController = new RoundController()

constant SPAWN_TIME = 15.

interface OnAllroundsFinished
    abstract function execute()

public OnAllroundsFinished onAllroundsFinished

boolean hasQuarterStarted = false
boolean hasDemiStarted = false

class RoundController
    constant rounds = new LinkedList<Round>
    player previousRoundWinner = null

    Round currentRound = null

    function addRound(Round round)
        this.rounds.add(round)

    function addRounds(LinkedList<Round> rounds)
        this.rounds.addAll(rounds.copy())

    function buildScoreBoardForFinals(string roundPhase)
        // Get all round from the same phase
        let rounds = this.rounds.filter(r -> r.roundName == roundPhase)

        // Get all participants for those rounds
        let roundParticipants = currentRound.roundParticipant.copy()
        if rounds.size() > 0
            roundParticipants..addAll(
                        rounds
                            .map(elem -> elem.roundParticipant)
                            .reduce((s, t) -> s.copy()..addAll(t))
                        )

        // Build list of matchup on the scoreBoard
        ScoreBoardColumnEntries.orderRowsForNextRound(roundParticipants)
        destroy roundParticipants

    function roundSpawn()
        altarEntity.getOrbUnit().pause()
        altarEntity.getBadGuy().setAnimation("Stand")

        if rounds.isEmpty()
            onAllroundsFinished.execute()
            return

        currentRound = rounds.dequeue()
        BOARD_TITLE_PREFIX = currentRound.roundName

        // TODO: refactor implementation, this is code smell
        if currentRound instanceof FinalRound
            Log.debug("Debug " + currentRound.roundName)
            if currentRound.roundName == "Quarter Final" and not hasQuarterStarted
                buildScoreBoardForFinals("Quarter Final")
                hasQuarterStarted = true
            else if currentRound.roundName == "Demi Final" and not hasDemiStarted
                buildScoreBoardForFinals("Demi Final")
                hasDemiStarted = true
            else if currentRound.roundName == "Final"
                buildScoreBoardForFinals("Final")

        else
            ScoreBoardColumnEntries.loadRoundLayout(currentRound.roundParticipant)

        let tim = getTimer()
        let tdialog = tim.createTimerDialog()
            ..setTitle(currentRound.roundName + " begins in :")
            ..display(true)
            ..setRealTimeRemaining(SPAWN_TIME)

        if currentRound instanceof FinalRound
            tdialog.display(false)

        tim.doAfter(SPAWN_TIME) ->
            currentRound.start()
            tdialog.destr()

    function checkIfCurrentroundDone(player winner)
        if currentRound != null
            currentRound.finish(winner)
            if previousRoundWinner == null
                Log.debug("Adding previous winner " + winner.getName())
                previousRoundWinner = winner
            else
                Log.debug("Removing previous winner")
                previousRoundWinner = null
            currentRound = null
            roundSpawn()

function generateFinalMatchup() returns LinkedList<Pair<int, int>>
    let matches = new LinkedList<Pair<int, int>>
    let playerList = asList(0, 1, 2, 3, 4, 5, 6, 7, 8)

    for idx = 0 to playerList.size() - 2 step 2
        matches.add(new Pair(playerList.get(idx), playerList.get(idx + 1)))

    return matches

function generateFinalRounds()
    let matches = generateFinalMatchup()
    for matchUp in matches
        roundController.addRounds(asList<Round>(
            new FinalRound()
                ..addMatchup(matchUp)
            )
        )

function initRounds()
    roundController.addRounds(asList<Round>(
            new NormalRound()
                ..setRewards(600, 0)
                ..addMatchup(new Pair(0, 1))
                ..addMatchup(new Pair(2, 3))
                ..addMatchup(new Pair(4, 5))
                ..addMatchup(new Pair(6, 7)),
            new NormalRound()
                ..setRewards(600, 0)
                ..addMatchup(new Pair(0, 1))
                ..addMatchup(new Pair(2, 3))
                ..addMatchup(new Pair(4, 5))
                ..addMatchup(new Pair(6, 7)),
            new NormalRound()
                ..setRewards(600, 0)
                ..addMatchup(new Pair(0, 1))
                ..addMatchup(new Pair(2, 3))
                ..addMatchup(new Pair(4, 5))
                ..addMatchup(new Pair(6, 7)),
            new NormalRound()
                ..setRewards(600, 0)
                ..addMatchup(new Pair(0, 1))
                ..addMatchup(new Pair(2, 3))
                ..addMatchup(new Pair(4, 5))
                ..addMatchup(new Pair(6, 7))
        ))
    generateFinalRounds()

public function initRoundController()
    initRounds()

    GameStates.modesSelection.onExit() states ->
        roundController.roundSpawn()

    onRoundFinish() (Round round) ->
        Log.info(round.roundName + " finished")
        if roundController.currentRound instanceof FinalRound
            if roundController.previousRoundWinner != null
                Log.debug("Adding " + roundController.previousRoundWinner.getNameColored(true) + " vs " + round.winner.getNameColored(true))
                roundController.addRound(
                    new FinalRound()
                        ..addMatchup(new Pair(roundController.previousRoundWinner.getId(), round.winner.getId())))

        doAfter(3) ->
            altarEntity.hideCounter()
            let winner = round.winner
            printTimed(winner.getName() + " gets " + altarEntity.bloodPointCounter.toString() + " for winning the round" , 15)
            forUnitsAll() (unit u) ->
                if IsUnitDeadBJ(u)
                    u.remove()
        doAfter(5) ->
            if round.goldReward > 0
                printTimed("You get " + round.goldReward.toString() + " golds from round income", 15)
            if round.bloodPointReward > 0
                printTimed("You get " + round.bloodPointReward.toString() + " blood points from round income", 15)
            pDatas.forEach() (player key, PlayerData value) ->
                value.giveReward()
                key.addGold(round.goldReward)
                key.addLumber(round.bloodPointReward)

    onLastArmyRemaining = () ->
        Log.info("Clean up phase")
        altarEntity.getOrbUnit().unpause()
        altarEntity.getBadGuy().setAnimation("Spell Channel")
        altarEntity.showCounter()

    onAllUnitDead = (player winner) ->
        Log.info("All unit dead")
        roundController.checkIfCurrentroundDone(winner)

    onAllroundsFinished = () ->
        Log.info("Match over")
        if roundController.previousRoundWinner != null
            GameStates.gameplay.exit()
            print(roundController.previousRoundWinner.getName() + " is the Blood tournament champion!")
