package Round

// Standard libs imports:
import ClosureForGroups
import ClosureTimers
import public ClosureKeyPresses
import public LinkedList

// Third party imports:
import public Lodash

// Local imports:
import ArmySpawner
import OrderBlocker
import ScoreBoard
import SpawnZone
import public GameConstants
import public PlayerData

// Distance between units positioned in formation mode
@configurable constant FORMATION_WIDTH = 120.
@configurable constant FORMATION_HEIGHT = 80.

// Max number of unit per line
@configurable constant UNIT_PER_LINE = 4

@configurable constant UNIT_CAP = 80


interface LastArmyRemaining
    abstract function execute()

public LastArmyRemaining onLastArmyRemaining

interface AllUnitDead
    abstract function execute(player winner)

public AllUnitDead onAllUnitDead

public abstract class OnRoundFinish
    static constant listenerList = new LinkedList<OnRoundFinish>

    abstract function fire(Round round)

    static function add(OnRoundFinish listener)
        listenerList.add(listener)

    static function execute(Round round)
        for listener in listenerList
            listener.fire(round)

public abstract class OnRoundStart
    static constant listenerList = new LinkedList<OnRoundStart>

    abstract function fire(Round round)

    static function add(OnRoundStart listener)
        listenerList.add(listener)

    static function execute(Round round)
        for listener in listenerList
            listener.fire(round)


public abstract class Round
    LinkedList<player> roundParticipant = new LinkedList<player>
    int goldReward = 0
    int bloodPointReward = 0
    constant matchUp = new LinkedList<Pair<int, int>>
    player winner
    string roundName
    boolean isOver = false

    function setName(string name)
        this.roundName = name

    function addMatchup(Pair<int, int> matchUp)
        this.matchUp.add(matchUp)
        this.roundParticipant.add(players[matchUp.a], players[matchUp.b])

    function start()
        // Round stq
        OnRoundStart.execute(this)
        Log.info(this.roundName + " start")
        pDatas.forEach() (player key, PlayerData value) ->
            pDatas.get(key).armyPoints = 0
        doBeforeSpawn()
        spawnArmies()
        doAfterSpawn()

    function doBeforeSpawn()
        forUnitsAll() (unit u) ->
            if IsUnitDeadBJ(u)
                u.remove()

    function doAfterSpawn()
        doAfter(2) ->
            forUnitsAll() (unit u) ->
                if u.getMoveSpeed() > 1 and not u.isType(UNIT_TYPE_PEON)
                    u.unpause()
                    u.issuePointOrder("attack", CENTER)
            nullTimer() ->
                preventOrder = true
                orderBlocker.enable()

    function setRewards(int gold, int bloodPoint)
        this.goldReward = gold
        this.bloodPointReward = bloodPoint

    function finish(player winner)
        this.winner = winner
        OnRoundFinish.execute(this)

    abstract function spawnArmies()

    // Todo: rename
    function spawnArmy(SpawnZone spawnZone, LinkedList<unit> buidingList, player _p)
        if roundParticipant.has(_p) == false
            roundParticipant.add(_p)

        playerToArmySpawner.get(_p)
            ..setSpawnZone(spawnZone)
            ..setBuildingList(buidingList)
            ..spawnArmy()

public class NormalRound extends Round
    static int counter = 0

    construct()
        counter++
        this.roundName = "Round " + counter.toString()

    override function spawnArmies()
        var zoneIdx = 0
        for contestantPair in matchUp
            let p1 = players[contestantPair.a]
            let p2 = players[contestantPair.b]

            scoreBoardEntries.get("BloodPoints").setEntry(p1, "0", "")
            scoreBoardEntries.get("BloodPoints").setEntry(p2, "0", "")

            spawnArmy(spawnZones.get(zoneIdx), pDatas.get(p1).buildingList, p1)
            spawnArmy(spawnZones.get(zoneIdx + 1), pDatas.get(p2).buildingList, p2)
            zoneIdx += 2

constant FINAL_ROUND_WEST_ZONE_IDX = 8
constant FINAL_ROUND_EAST_ZONE_IDX = 9

public class FinalRound extends Round
    static int counter = 0

    construct()
        counter++
        // TODO: Dynamically handle following player count?
        if counter < 5
            this.roundName = "Quarter Final"
        else if counter < 7
            this.roundName = "Demi Final"
        else
            this.roundName = "Final"

    override function spawnArmies()
        for contestantPair in matchUp
            let p1 = players[contestantPair.a]
            let p2 = players[contestantPair.b]

            scoreBoardEntries.get("BloodPoints").setEntry(p1, "0", "")
            scoreBoardEntries.get("BloodPoints").setEntry(p2, "0", "")

            spawnArmy(spawnZones.get(FINAL_ROUND_WEST_ZONE_IDX), pDatas.get(p1).buildingList, p1)
            spawnArmy(spawnZones.get(FINAL_ROUND_EAST_ZONE_IDX), pDatas.get(p2).buildingList, p2)

            let msg = "{0} {1} units VS {2} {3} units"
                .format(
                    p1.getNameColored(true), pDatas.get(p1).spawnedUnits.size().toString(),
                    p2.getNameColored(true), pDatas.get(p2).spawnedUnits.size().toString()
                )
            Log.info(msg)
