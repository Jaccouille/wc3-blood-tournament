package VotesDefinition

// Standard libs imports:
import HashMap

// Local imports:
import BuilderAI
import ChatCommands
import GameConfig
import GameStates
import Players
import RoundController
import Vote

public function voteReady(player triggerPlayer)
    if roundController.currentRound.hasStarted
        printTimedToPlayer("Vote failed! Round already started!", 3, triggerPlayer)
    else
        if Vote.voteInstanceMap.has("Start round")
            Vote.voteInstanceMap.get("Start round").castVote(triggerPlayer)
        else
            var count = 0
            for _p in ALL_PLAYERS
                // Only count human players and no afk
                if _p.isHuman() and not playerToBuilderAI.get(_p).isEnabled
                    count++
            let voteInstance = new Vote("Start round", gameConfig.getRoundInterludeTime(), count)
            voteInstance.addAction() () ->
                if not roundController.currentRound.hasStarted
                    if gameConfig.isDisplayPortalEnabled()
                        roundController.currentRound.spawnPortals()
                    roundController.stopRoundTimer()
                    roundController.startRound()
                else
                    printTimed("Vote failed! Round already started!", 3)
            voteInstance.castVote(triggerPlayer)


init
    GameStates.gameplay.onEnter() (state) ->
        registerCommandAll("r") (player triggerPlayer, LinkedList<string> arguments) ->
            voteReady(triggerPlayer)
        registerCommandAll("ready") (player triggerPlayer, LinkedList<string> arguments) ->
            voteReady(triggerPlayer)

        OnRoundStart.add() (Round round) ->
            if Vote.voteInstanceMap.has("Start round")
                Vote.voteInstanceMap.get("Start round").endVote(false)
