package Codex

import TableLayout
import ClosureTimers
import LinkedList
import IDListConstant
import ColorUtils

let humanUnit              = new PaletteSection("Units"             , HUMAN_UNITS    )
let humanUnitsUpgrades     = new PaletteSection("Units Upgrade"     , HUMAN_UNIT_UPGD)
let humanAbilitiesUpgrades = new PaletteSection("Abilities Upgrade" , HUMAN_ABIL_UPGD)

let orcUnit              = new PaletteSection("Units"             , ORC_UNITS    )
let orcUnitsUpgrades     = new PaletteSection("Units Upgrade"     , ORC_UNIT_UPGD)
let orcAbilitiesUpgrades = new PaletteSection("Abilities Upgrade" , ORC_ABIL_UPGD)

let undeadUnit              = new PaletteSection("Units"             , UNDEAD_UNITS    )
let undeadUnitsUpgrades     = new PaletteSection("Units Upgrade"     , UNDEAD_UNIT_UPGD)
let undeadAbilitiesUpgrades = new PaletteSection("Abilities Upgrade" , UNDEAD_ABIL_UPGD)

let nightElfUnit              = new PaletteSection("Units"             , NIGHT_ELF_UNITS    )
let nightElfUnitsUpgrades     = new PaletteSection("Units Upgrade"     , NIGHT_ELF_UNIT_UPGD)
let nightElfAbilitiesUpgrades = new PaletteSection("Abilities Upgrade" , NIGHT_ELF_ABIL_UPGD)

let DOC_TEXT = "" +
"Click to show/hide the codex panel."

class PaletteSection
    string header
    LinkedList<int> idsList

    construct(string header, LinkedList<int> idsList)
        this.header = header
        this.idsList = idsList


constant SECTION_TOP_SPACING = 0.0045
constant SECTION_BOTTOM_SPACING = 0.0025
constant FRAME_SIZE = vec2(0.32, 0.28)
constant MAX_CELL = 10
constant CONTENT_FRAME_SIZE = vec2(0.005, -0.05)

function TableLayout.addPaletteSection(PaletteSection content, int maxCell)
    this.padBot(0.01)
    this.row()
    this.add(p(content.header))
    this.row()
    for elem in content.idsList
        if content.idsList.indexOf(elem) % maxCell == 0
            this..row()
        let btnFrame = imgBtn(BlzGetAbilityIcon(elem))
        btnFrame.createToolTipFrame(GetAbilityName(elem), BlzGetAbilityExtendedTooltip(elem, 1))
        this.add(btnFrame)


function framehandle.createToolTipFrame(string title, string textContent)
    let tooltip = createFrame("BoxedText", GAME_UI, 0, 0)
    tooltip.setWidth(0.3)
    let text = tooltip.getChild(1)

    tooltip.getChild(0).setText(title.color(SPECIAL_COLOR))

    text..setText(textContent)
        ..setSize(0.3, 0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, this, FRAMEPOINT_TOPLEFT, 0.25, -0.052)

    // tooltip.clearAllPoints()
    // tooltip.setPoint(FRAMEPOINT_TOPLEFT, text, FRAMEPOINT_TOPLEFT, 0, 0)

    tooltip.setPoint(FRAMEPOINT_TOPLEFT, text, FRAMEPOINT_TOPLEFT, 0.01, 0.01)
    tooltip.setPoint(FRAMEPOINT_BOTTOMRIGHT, text, FRAMEPOINT_BOTTOMRIGHT, 0.01, -0.025)
    this.setTooltip(tooltip)

function createFrameTemplate(string name, vec2 size, vec2 pos, framehandle parent) returns framehandle
    return createFrame("FRAME", name, parent, "", 0)
            ..setPoint(FRAMEPOINT_TOP, parent, FRAMEPOINT_TOP, pos)
            ..setSize(size.x, size.y)
            ..hide()

function showFrame(framehandle baseFrame, string frameName)
    for idx = 0 to baseFrame.getChildrenCount()
        let childFrame = baseFrame.getChild(idx)
        if childFrame.getName().startsWith("contentFrame")
            childFrame.hide()
        if childFrame.getName() == frameName
            childFrame.show()


init
    // if (loadTOCFile("Templates.toc" )) == false
    //     print("Loading Templates Toc file failed")
    doAfter(1) ->
        let baseFrame = createFrame("FRAME", "baseFrame", GAME_UI, "", 0)
            ..setAbsPoint(FRAMEPOINT_TOP, vec2(0.2, 0.535))
            ..setSize(FRAME_SIZE.x, FRAME_SIZE.y)
            ..hide()

        createFrame("HeroPickMenuBackdrop", baseFrame, 0, 0)
            ..setAllPoints(baseFrame)

        createFrame("ScriptDialogButton", GAME_UI, 0, 0)
        ..setSize(0.12, 0.025)
        // ..createToolTipFrame("Documentation", DOC_TEXT)
        ..setPoint(FRAMEPOINT_TOP, baseFrame, FRAMEPOINT_TOP, 0.0, 0.02)
        ..onClick() ->
            if baseFrame.isVisible()
                baseFrame.hide()
            else
                baseFrame.show()

        getFrame("ScriptDialogButtonText", 0)
            ..setText("Codex")

        let headerFrame = createFrame("FRAME", "headerFrame", baseFrame, "", 0)
            ..setPoint(FRAMEPOINT_TOP, baseFrame, FRAMEPOINT_TOP)
            ..setSize(FRAME_SIZE.x, 0.07)
            ..show()

        let contentFrames = new LinkedList<framehandle>
            ..add(createFrameTemplate("contentFrameHuman"    , FRAME_SIZE, CONTENT_FRAME_SIZE, baseFrame)..show())
            ..add(createFrameTemplate("contentFrameOrc"      , FRAME_SIZE, CONTENT_FRAME_SIZE, baseFrame))
            ..add(createFrameTemplate("contentFrameUndead"   , FRAME_SIZE, CONTENT_FRAME_SIZE, baseFrame))
            ..add(createFrameTemplate("contentFrameNightElf" , FRAME_SIZE, CONTENT_FRAME_SIZE, baseFrame))
            ..add(createFrameTemplate("contentFrameItem"     , FRAME_SIZE, CONTENT_FRAME_SIZE, baseFrame))

        new TableLayout(FRAME_SIZE.x, 0.07)
            ..row()
            ..add(btn("Human")   ..setWidth(0.07)..onClick(() -> showFrame(baseFrame, contentFrames.get(0).getName()) ) )
            ..add(btn("Orc")     ..setWidth(0.07)..onClick(() -> showFrame(baseFrame, contentFrames.get(1).getName()) ) )
            ..add(btn("Undead")  ..setWidth(0.07)..onClick(() -> showFrame(baseFrame, contentFrames.get(2).getName()) ) )
            ..add(btn("Night Elf")..setWidth(0.07)..onClick(() -> showFrame(baseFrame, contentFrames.get(3).getName()) ) )
            ..applyTo(headerFrame)

        // Human Frame
        new TableLayout(FRAME_SIZE.x, FRAME_SIZE.y)
            ..addPaletteSection(humanUnit     , MAX_CELL)
            ..addPaletteSection(humanUnitsUpgrades     , MAX_CELL)
            ..addPaletteSection(humanAbilitiesUpgrades     , MAX_CELL)
            ..applyTo(contentFrames.get(0))

        // Orc Frame
        new TableLayout(FRAME_SIZE.x, FRAME_SIZE.y)
            ..addPaletteSection(orcUnit     , MAX_CELL)
            ..addPaletteSection(orcUnitsUpgrades     , MAX_CELL)
            ..addPaletteSection(orcAbilitiesUpgrades     , MAX_CELL)
            ..applyTo(contentFrames.get(1))

        // Undead Frame
        new TableLayout(FRAME_SIZE.x, FRAME_SIZE.y)
            ..addPaletteSection(undeadUnit     , MAX_CELL)
            ..addPaletteSection(undeadUnitsUpgrades     , MAX_CELL)
            ..addPaletteSection(undeadAbilitiesUpgrades     , MAX_CELL)
            ..applyTo(contentFrames.get(2))

        // NightElf Frame
        new TableLayout(FRAME_SIZE.x, FRAME_SIZE.y)
            ..addPaletteSection(nightElfUnit     , MAX_CELL)
            ..addPaletteSection(nightElfUnitsUpgrades     , MAX_CELL)
            ..addPaletteSection(nightElfAbilitiesUpgrades     , MAX_CELL)
            ..applyTo(contentFrames.get(3))
