package Wiki

// Standard libs imports:
import ClosureTimers
import FramehandleNames
import LinkedList
import ObjectIds
import Textures

// Third party imports:
import TableLayout

// Local imports:
import ColorUtils
import IDListConstant
import ItemStockHandler

let humanUnit              = new PaletteSection("Units"             , HUMAN_UNITS    )
let humanUnitsUpgrades     = new PaletteSection("Units Upgrade"     , HUMAN_UNIT_UPGD)
let humanAbilitiesUpgrades = new PaletteSection("Abilities Upgrade" , HUMAN_ABIL_UPGD)

let orcUnit              = new PaletteSection("Units"             , ORC_UNITS    )
let orcUnitsUpgrades     = new PaletteSection("Units Upgrade"     , ORC_UNIT_UPGD)
let orcAbilitiesUpgrades = new PaletteSection("Abilities Upgrade" , ORC_ABIL_UPGD)

let undeadUnit              = new PaletteSection("Units"             , UNDEAD_UNITS    )
let undeadUnitsUpgrades     = new PaletteSection("Units Upgrade"     , UNDEAD_UNIT_UPGD)
let undeadAbilitiesUpgrades = new PaletteSection("Abilities Upgrade" , UNDEAD_ABIL_UPGD)

let nightElfUnit              = new PaletteSection("Units"             , NIGHT_ELF_UNITS    )
let nightElfUnitsUpgrades     = new PaletteSection("Units Upgrade"     , NIGHT_ELF_UNIT_UPGD)
let nightElfAbilitiesUpgrades = new PaletteSection("Abilities Upgrade" , NIGHT_ELF_ABIL_UPGD)

let nagaUnit              = new PaletteSection("Units"             , NAGA_UNITS    )
let nagaUnitsUpgrades     = new PaletteSection("Units Upgrade"     , NAGA_UNIT_UPGD)
let nagaAbilitiesUpgrades = new PaletteSection("Abilities Upgrade" , NAGA_ABIL_UPGD)

let DOC_TEXT = "" +
"Click to show/hide the codex panel. " +
"This panel contains information on all units in the game."

constant GOLD_ICON = Textures.toolTipGoldIcon
constant LUMBER_ICON = Textures.toolTipLumberIcon

class PaletteSection
    string header
    LinkedList<int> idsList

    construct(string header, LinkedList<int> idsList)
        this.header = header
        this.idsList = idsList


constant SECTION_TOP_SPACING = 0.0045
constant SECTION_BOTTOM_SPACING = 0.0025
constant FRAME_SIZE = vec2(0.32, 0.28)
constant MAX_CELL = 10
constant CONTENT_FRAME_SIZE = vec2(0.005, -0.08)

function TableLayout.addPaletteSection(PaletteSection content, int maxCell)
    this.padBot(0.01)
    this.row()
    this.add(p(content.header))
    this.row()
    for elem in content.idsList
        if content.idsList.indexOf(elem) % maxCell == 0
            this..row()
        let btnFrame = imgBtn(BlzGetAbilityIcon(elem))

        btnFrame.createToolTipFrame(elem)
        this.add(btnFrame)


function framehandle.createToolTipFrame(int elem)
    let title = GetAbilityName(elem)
    let textContent = BlzGetAbilityExtendedTooltip(elem, 1)

    let tooltipBackdrop = createFrame("BoxedText", GAME_UI, 0, 0)

    let textTitle = getFrame("BoxedTextTitle", 0)
        ..setText(title.color(SPECIAL_COLOR))
        ..setSize(0.28, 0)
        // ..setPoint(FRAMEPOINT_TOPLEFT, this, FRAMEPOINT_TOPRIGHT, vec2(0.002, 0))
        ..disable()

    let goldCost = toRawCode(elem).startsWith("x") ? GetUnitGoldCost(elem) : getItemGoldCost(elem)
    let lumberCost = toRawCode(elem).startsWith("x") ? GetUnitWoodCost(elem) : getItemLumberCost(elem)

    framehandle goldIconText = null
    if goldCost > 0
        let goldIcon = createFrame(FramehandleTypeNames.backdrop, "", tooltipBackdrop, "", 0)
        ..setSize(0.01, 0.01)
        ..setTexture(GOLD_ICON, 0, false)
        ..setPoint(FRAMEPOINT_TOPLEFT, textTitle, FRAMEPOINT_BOTTOMLEFT, vec2(0, -0.002))
        ..disable()

        goldIconText = createFrame(FramehandleTypeNames.text, "", tooltipBackdrop, "", 0)
        ..setText(goldCost.toString().color(GOLD_COLOR))
        ..setPoint(FRAMEPOINT_LEFT, goldIcon, FRAMEPOINT_RIGHT, vec2(0.003, 0))
        ..disable()

    if lumberCost > 0
        let lumberIcon = createFrame(FramehandleTypeNames.backdrop, "", tooltipBackdrop, "", 0)
        ..setSize(0.01, 0.01)
        ..setTexture(LUMBER_ICON, 0, false)
        ..setPoint(goldIconText != null ? FRAMEPOINT_LEFT : FRAMEPOINT_TOPLEFT,
                    goldIconText != null ? goldIconText : textTitle,
                    goldIconText != null ? FRAMEPOINT_RIGHT : FRAMEPOINT_BOTTOMLEFT,
                    goldIconText != null ? vec2(0.006, 0) : vec2(0, -0.002))
        ..disable()

        createFrame(FramehandleTypeNames.text, "", tooltipBackdrop, "", 0)
        ..setText(lumberCost.toString().color(GOLD_COLOR))
        ..setPoint(FRAMEPOINT_LEFT, lumberIcon, FRAMEPOINT_RIGHT, vec2(0.003, 0))
        ..disable()

    let text = getFrame("BoxedTextValue", 0)
        ..setText(textContent)
        ..setSize(0.24, 0)
        ..setPoint(FRAMEPOINT_TOPLEFT, this, FRAMEPOINT_BOTTOMLEFT, 0.035, -0.003)
        ..disable()

    // tooltip.clearAllPoints()
    // tooltip.setPoint(FRAMEPOINT_TOPLEFT, text, FRAMEPOINT_TOPLEFT, 0, 0)

    tooltipBackdrop.setPoint(FRAMEPOINT_TOPLEFT, this, FRAMEPOINT_TOPLEFT, 0.03, 0.005)
    tooltipBackdrop.setPoint(FRAMEPOINT_BOTTOMRIGHT, text, FRAMEPOINT_BOTTOMRIGHT,  0.04, -0.005)
    this.setTooltip(tooltipBackdrop)

function createFrameTemplate(string name, vec2 size, vec2 pos, framehandle parent) returns framehandle
    return createFrame("FRAME", name, parent, "", 0)
            ..setPoint(FRAMEPOINT_TOP, parent, FRAMEPOINT_TOP, pos)
            ..setSize(size.x, size.y)
            ..hide()

function showFrame(framehandle baseFrame, string frameName)
    let _p = GetTriggerPlayer()
    for idx = 0 to baseFrame.getChildrenCount()
        let childFrame = baseFrame.getChild(idx)
        if childFrame.getName().startsWith("contentFrame")
            childFrame.hide(_p)
        if childFrame.getName() == frameName
            childFrame.show(_p)

public function initCodexUI()
    loadTOCFile("Templates.toc")
    // if (loadTOCFile("Templates.toc" )) == false
    //     print("Loading Templates Toc file failed")
    doAfter(1) ->
        let baseFrame = createFrame("FRAME", "baseFrame", GAME_UI, "", 0)
            ..setAbsPoint(FRAMEPOINT_TOP, vec2(0.2, 0.535))
            ..setSize(FRAME_SIZE.x, FRAME_SIZE.y)
            ..hide()

        createFrame("HeroPickMenuBackdrop", baseFrame, 0, 0)
            ..setAllPoints(baseFrame)

        createFrame("ScriptDialogButton", GAME_UI, 0, 0)
        ..setSize(0.12, 0.025)
        // ..createToolTipFrame("Documentation", DOC_TEXT)
        ..setAbsPoint(FRAMEPOINT_TOP, vec2(0.1, 0.17))
        ..onClick() ->
            let p = GetTriggerPlayer()
            if baseFrame.isVisible(p)
                baseFrame.hide(p)
            else
                baseFrame.show(p)

        getFrame("ScriptDialogButtonText", 0)
            ..setText("Wiki")

        let headerFrame = createFrame("FRAME", "headerFrame", baseFrame, "", 0)
            ..setPoint(FRAMEPOINT_TOP, baseFrame, FRAMEPOINT_TOP)
            ..setSize(FRAME_SIZE.x, 0.07)
            ..show()

        let contentFrames = new LinkedList<framehandle>
            ..add(createFrameTemplate("contentFrameHuman"    , FRAME_SIZE, CONTENT_FRAME_SIZE, baseFrame)..show())
            ..add(createFrameTemplate("contentFrameOrc"      , FRAME_SIZE, CONTENT_FRAME_SIZE, baseFrame))
            ..add(createFrameTemplate("contentFrameUndead"   , FRAME_SIZE, CONTENT_FRAME_SIZE, baseFrame))
            ..add(createFrameTemplate("contentFrameNightElf" , FRAME_SIZE, CONTENT_FRAME_SIZE, baseFrame))
            ..add(createFrameTemplate("contentFrameItem"     , FRAME_SIZE, CONTENT_FRAME_SIZE, baseFrame))

        new TableLayout(FRAME_SIZE.x, 0.07)
            ..row()
            ..add(btn("Human")   ..setWidth(0.07)..onClick(() -> showFrame(baseFrame, contentFrames.get(0).getName()) ) )
            ..add(btn("Orc")     ..setWidth(0.07)..onClick(() -> showFrame(baseFrame, contentFrames.get(1).getName()) ) )
            ..add(btn("Undead")  ..setWidth(0.07)..onClick(() -> showFrame(baseFrame, contentFrames.get(2).getName()) ) )
            ..add(btn("Night Elf")..setWidth(0.07)..onClick(() -> showFrame(baseFrame, contentFrames.get(3).getName()) ) )
            ..row()
            ..add(btn("Naga")..setWidth(0.07)..onClick(() -> showFrame(baseFrame, contentFrames.get(4).getName()) ) )
            ..applyTo(headerFrame)

        // Human Frame
        new TableLayout(FRAME_SIZE.x, FRAME_SIZE.y)
            ..addPaletteSection(humanUnit     , MAX_CELL)
            ..addPaletteSection(humanUnitsUpgrades     , MAX_CELL)
            ..addPaletteSection(humanAbilitiesUpgrades     , MAX_CELL)
            ..applyTo(contentFrames.get(0))

        // Orc Frame
        new TableLayout(FRAME_SIZE.x, FRAME_SIZE.y)
            ..addPaletteSection(orcUnit     , MAX_CELL)
            ..addPaletteSection(orcUnitsUpgrades     , MAX_CELL)
            ..addPaletteSection(orcAbilitiesUpgrades     , MAX_CELL)
            ..applyTo(contentFrames.get(1))

        // Undead Frame
        new TableLayout(FRAME_SIZE.x, FRAME_SIZE.y)
            ..addPaletteSection(undeadUnit     , MAX_CELL)
            ..addPaletteSection(undeadUnitsUpgrades     , MAX_CELL)
            ..addPaletteSection(undeadAbilitiesUpgrades     , MAX_CELL)
            ..applyTo(contentFrames.get(2))

        // NightElf Frame
        new TableLayout(FRAME_SIZE.x, FRAME_SIZE.y)
            ..addPaletteSection(nightElfUnit     , MAX_CELL)
            ..addPaletteSection(nightElfUnitsUpgrades     , MAX_CELL)
            ..addPaletteSection(nightElfAbilitiesUpgrades     , MAX_CELL)
            ..applyTo(contentFrames.get(3))

        // Naga Frame
        new TableLayout(FRAME_SIZE.x, FRAME_SIZE.y)
            ..addPaletteSection(nagaUnit     , MAX_CELL)
            ..addPaletteSection(nagaUnitsUpgrades     , MAX_CELL)
            ..addPaletteSection(nagaAbilitiesUpgrades     , MAX_CELL)
            ..applyTo(contentFrames.get(4))
