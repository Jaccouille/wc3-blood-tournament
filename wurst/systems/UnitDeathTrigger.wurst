package UnitDeathTrigger

import RoundController

public function initUnitDeathTrigger()
    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
    ..addCondition(Condition(() -> GetDyingUnit().getPointValue() > 0))
    ..addAction() ->
        let killer = EventData.getKillingUnit().getOwner()
        let dying = EventData.getDyingUnit()

        let dyingOwner = dying.getOwner()

        let pData = pDatas.get(dying.getOwner())
        // Add blood points bounty
        if killer != ALTAR_PLAYER
            pDatas.get(killer).addBounty(dying.getPointValue())
            createTTEx(
                dying.getPos3Real(),
                "+" + dying.getPointValue().toString(),
                8,
                colorA(255, 0, 0, 255),
                killer
            )
            ..setVelocity(0.0, 0.03)
            ..setFadepoint(1.5)
            ..setLifespan(2.0)
            ..setPermanent(false)

        if pData.spawnedUnits.has(dying) == true
            pData.spawnedUnits.remove(dying)

        if pData.spawnedUnits.isEmpty()
            roundController.currentRound.roundParticipant.remove(dyingOwner)

            Log.info(dyingOwner.getName() + " has been eliminated")

            if roundController.currentRound.roundParticipant.size() == 1
                onLastArmyRemaining.execute()
            if roundController.currentRound.roundParticipant.isEmpty()
                onAllUnitDead.execute(dyingOwner)
