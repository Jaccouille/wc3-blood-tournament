package ItemStockHandler

import LinkedList
import HashMap
import ClosureEvents
import LocalObjectIDs
import ClosuresForItems
import ClosureTimers
import PlayerExtension
import ScoreBoard
import OrderIds

public HashMap<int, LinkedList<int>> unitItemSold = new HashMap<int, LinkedList<int>>

public HashMap<int, LinkedList<int>> sharedStocksMap = new HashMap<int, LinkedList<int>>

public class ItemStockHandler
    static HashMap<unit, ItemStockHandler> unitToItemStockMap = new HashMap<unit, ItemStockHandler>
    unit building
    HashMap<int, int> itemStock = new HashMap<int, int>

    static function hasUnit(unit u) returns boolean
        return unitToItemStockMap.has(u)

    construct(unit building)
        this.building = building
        unitToItemStockMap.put(building, this)

    function addItem(int itemId, int stock)
        itemStock.put(itemId, stock)

    function hasItem(int itemId) returns boolean
        return itemStock.has(itemId)

    function reduceStock(int itemId, int value)
        if hasItem(itemId)
            var currentStock = itemStock.get(itemId) - value
            if currentStock == 0
                currentStock = -1
                // Null timer neccesary otherwise game doesn't substract item cost
                nullTimer() ->
                    building.addItemToStock(itemId, currentStock, currentStock)
            // Reduce shared stock
            if sharedStocksMap.has(building.getTypeId())
                and sharedStocksMap.get(building.getTypeId()).has(itemId)
                let sharedStock = sharedStocksMap.get(building.getTypeId())
                sharedStock.forEach() (integer t) ->
                    if t != itemId
                        building.addItemToStock(t, currentStock, currentStock)
                        itemStock.put(t, currentStock)
                        if currentStock <= 0
                            itemStock.remove(t)

            // Update triggered item stock
            itemStock.put(itemId, currentStock)

            // If stock has been exhausted, it is no longer "handled"
            if currentStock <= 0
                itemStock.remove(itemId)

            // Once all stock have been exhausted, remove this instance
            // to save memory and ease up builder AI decision
            if itemStock.size() <= 0
                destroy this

    ondestroy
        itemStock.flush()
        destroy itemStock
        unitToItemStockMap.remove(building)


function initItemStockData()
    // ================ HUMAN =============
    unitItemSold.put(BUILDING_FOOTMAN   , asList(ITEM_CAPTAIN           , ITEM_DEFEND                                        ))
    unitItemSold.put(BUILDING_RIFLEMAN  , asList(ITEM_MORTAR            , ITEM_SNIPER         , ITEM_EXPLOSIVE_AMMO          ))
    unitItemSold.put(BUILDING_PRIEST    , asList(ITEM_SPELL_BREAKER     , ITEM_ARMOR_BLESSING , ITEM_WEAPON_BLESSING         ))
    unitItemSold.put(BUILDING_KNIGHT    , asList(ITEM_CRUSADER          , ITEM_MARSHALL                                      ))
    unitItemSold.put(BUILDING_SORCERESS , asList(ITEM_COURT_ENCHANTRESS , ITEM_DARK_MAGE      , ITEM_FIRE_MAGE, ITEM_ICE_MAGE))
    sharedStocksMap.put(BUILDING_PRIEST    , asList(ITEM_ARMOR_BLESSING    , ITEM_WEAPON_BLESSING                               ))
    sharedStocksMap.put(BUILDING_RIFLEMAN  , asList(ITEM_SNIPER            , ITEM_EXPLOSIVE_AMMO                                ))
    sharedStocksMap.put(BUILDING_SORCERESS , asList(ITEM_DARK_MAGE         , ITEM_FIRE_MAGE      , ITEM_ICE_MAGE                ))

    // ================ ORC =============
    unitItemSold.put(BUILDING_GRUNT       , asList(ITEM_BERSERKER   , ITEM_KODO                       ))
    unitItemSold.put(BUILDING_RAIDER      , asList(ITEM_PACK_LEADER, ITEM_BURNING_BLADE               ))
    unitItemSold.put(BUILDING_OGRE        , asList(ITEM_OGRE_ARMORED                                  ))
    unitItemSold.put(BUILDING_WITCH_DOCTOR, asList(ITEM_DRUNKEN_HAZE, ITEM_HEALING_WAVE               ))
    unitItemSold.put(BUILDING_SHAMAN      , asList(ITEM_SPIRIT_WOLF1, ITEM_ORB_LIGHTNING, ITEM_FARSEER))
    sharedStocksMap.put(BUILDING_WITCH_DOCTOR, asList(ITEM_DRUNKEN_HAZE, ITEM_HEALING_WAVE               ))

    // ================ UNDEAD =============
    unitItemSold.put(BUILDING_SKELETAL_ARCHER, asList(ITEM_BURNING_ARCHER, ITEM_FROST_ARCHER                  ))
    unitItemSold.put(BUILDING_NECROMANCER    , asList(ITEM_CRIPPLE       , ITEM_RAISE_SKELETON_MAGE, ITEM_LICH))
    unitItemSold.put(BUILDING_BANSHEE        , asList(ITEM_UNHOLY_FRENZY                                      ))
    unitItemSold.put(BUILDING_VAMPIRE        , asList(ITEM_VAMPIRE_LORD                                       ))
    sharedStocksMap.put(BUILDING_SKELETAL_ARCHER, asList(ITEM_BURNING_ARCHER, ITEM_FROST_ARCHER                  ))

    // ================ NIGHT ELF =============
    unitItemSold.put(BUILDING_DRYAD      , asList(ITEM_KEEPER_OF_THE_GROVE                                               ))
    unitItemSold.put(BUILDING_HUNTRESS   , asList(ITEM_PRIESTESS_OF_THE_MOON                                             ))
    unitItemSold.put(BUILDING_DRUID_TALON, asList(ITEM_ARCHDRUID            , ITEM_WAND_OF_ILLUSION, ITEM_ENTANGLING_ROOT))
    unitItemSold.put(BUILDING_DRUID_CLAW , asList(ITEM_BEAR                 , ITEM_OWLBEAR                               ))
    sharedStocksMap.put(BUILDING_DRUID_TALON, asList(ITEM_WAND_OF_ILLUSION     , ITEM_ENTANGLING_ROOT                       ))
    sharedStocksMap.put(BUILDING_DRUID_CLAW , asList(ITEM_BEAR                 , ITEM_OWLBEAR                               ))


init
    initItemStockData()
    EventListener.add(EVENT_PLAYER_UNIT_ISSUED_ORDER) ->
        let building = EventData.getTriggerUnit()

        if ItemStockHandler.unitToItemStockMap.has(building)
            and EventData.getIssuedOrderId() != OrderIds.undefend
            let itemId = EventData.getIssuedOrderId()
            let i = createItem(itemId, building.getPos())

            // To avoid case when building is casting move ability
            if i != null
                building.addItemById(itemId)
                ItemStockHandler.unitToItemStockMap.get(building). reduceStock(itemId, 1)

                i.remove()
                let bloodPoint = i.getLife().toInt()
                if not building.isType(UNIT_TYPE_ANCIENT)
                    building.addType(UNIT_TYPE_ANCIENT)

                if bloodPoint > 0
                    building.getOwner().getPlayerData().addArmyPoints(bloodPoint)
                    scoreBoardEntries.get("ArmyPoints")
                        .addValue(building.getOwner(), bloodPoint)

    // When an item is bought, it doesn't go in the building inventory, it
    // spawns on the ground
    // Therefore we manually add it to the building and remove the spawned one
    doPeriodically(10) (CallbackPeriodic cb) ->
        forItemsInMap() (item i) ->
            i.remove()
