package ItemStockHandler

// Standard libs imports:
import ClosureEvents
import ClosureTimers
import HashMap
import LinkedList
import OrderIds

// Local imports:
import ArmyPreviewer
import ArmySpawner
import ClosuresForItems
import LocalObjectIDs
import PlayerExtension
import ScoreBoard

public HashMap<int, LinkedList<int>> unitItemSold = new HashMap<int, LinkedList<int>>

public HashMap<int, LinkedList<int>> sharedStocksMap = new HashMap<int, LinkedList<int>>
public constant itemGoldCost = compiletime(InitHashtable())
public constant itemLumberCost = compiletime(InitHashtable())

public class ItemCost
    int gold
    int lumber

    construct(int gold, int lumber)
        this.gold = gold
        this.lumber = lumber

/**
    The ItemStockHandler class is responsible for managing the stock of items.
    We need to add item to stock through trigger in order to manipulate the stock
    see https://www.hiveworkshop.com/threads/modify-item-sold-made-stock.350087/

 */
public class ItemStockHandler
    static HashMap<unit, ItemStockHandler> unitToItemStockMap = new HashMap<unit, ItemStockHandler>
    unit building
    HashMap<int, int> itemStock = new HashMap<int, int>

    static function hasUnit(unit u) returns boolean
        return unitToItemStockMap.has(u)

    construct(unit building)
        this.building = building
        unitToItemStockMap.put(building, this)

    function addItem(int itemId, int stock)
        itemStock.put(itemId, stock)

    function hasItem(int itemId) returns boolean
        return itemStock.has(itemId)

    function reduceStock(int itemId, int value)
        if hasItem(itemId)
            var currentStock = itemStock.get(itemId) - value
            if currentStock == 0
                currentStock = -1
                // Null timer neccesary otherwise game doesn't substract item cost
                nullTimer() ->
                    building.addItemToStock(itemId, currentStock, currentStock)
            // Reduce shared stock
            if sharedStocksMap.has(building.getTypeId())
                and sharedStocksMap.get(building.getTypeId()).has(itemId)
                let sharedStock = sharedStocksMap.get(building.getTypeId())
                sharedStock.forEach() (integer itmShared) ->
                    if itmShared != itemId
                        let itmSharedStock = itemStock.get(itmShared) - value > 0 ? itemStock.get(itmShared) - value : -1

                        building.addItemToStock(itmShared, itmSharedStock, itmSharedStock)
                        if itmSharedStock <= 0
                            itemStock.remove(itmShared)
                        else
                            itemStock.put(itmShared, itmSharedStock)

            // Update triggered item stock
            itemStock.put(itemId, currentStock)

            // If stock has been exhausted, it is no longer "handled"
            if currentStock <= 0
                itemStock.remove(itemId)

            // Once all stock have been exhausted, remove this instance
            // to save memory and ease up builder AI decision
            if itemStock.size() <= 0
                destroy this

    ondestroy
        itemStock.flush()
        destroy itemStock
        unitToItemStockMap.remove(building)


function initItemStockData()
    // ================ HUMAN =============
    unitItemSold.put(BUILDING_FOOTMAN   , asList(ITEM_CAPTAIN           , ITEM_DEFEND                                        ))
    unitItemSold.put(BUILDING_RIFLEMAN  , asList(ITEM_MORTAR            , ITEM_SNIPER         , ITEM_EXPLOSIVE_AMMO          ))
    unitItemSold.put(BUILDING_PRIEST    , asList(ITEM_SPELL_BREAKER     , ITEM_ARMOR_BLESSING , ITEM_WEAPON_BLESSING         ))
    unitItemSold.put(BUILDING_KNIGHT    , asList(ITEM_MARSHALL                                      ))
    unitItemSold.put(BUILDING_CRUSADER    , asList(ITEM_MARSHALL                                      ))
    unitItemSold.put(BUILDING_SORCERESS , asList(ITEM_COURT_ENCHANTRESS , ITEM_DARK_MAGE      , ITEM_FIRE_MAGE, ITEM_ICE_MAGE))
    unitItemSold.put(BUILDING_PALADIN , asList(ITEM_PALADIN_SKIN_BLACK, ITEM_PALADIN_SKIN_WHITE, ITEM_INSPIRE))
    sharedStocksMap.put(BUILDING_PALADIN , asList(ITEM_PALADIN_SKIN_BLACK, ITEM_PALADIN_SKIN_WHITE))
    sharedStocksMap.put(BUILDING_PRIEST    , asList(ITEM_ARMOR_BLESSING    , ITEM_WEAPON_BLESSING                               ))
    sharedStocksMap.put(BUILDING_RIFLEMAN  , asList(ITEM_SNIPER            , ITEM_EXPLOSIVE_AMMO                                ))
    sharedStocksMap.put(BUILDING_SORCERESS , asList(ITEM_DARK_MAGE         , ITEM_FIRE_MAGE      , ITEM_ICE_MAGE                ))

    // ================ ORC =============
    unitItemSold.put(BUILDING_GRUNT        , asList(ITEM_KODO                                            ))
    unitItemSold.put(BUILDING_BERSERKER    , asList(ITEM_KODO                                            ))
    unitItemSold.put(BUILDING_RAIDER       , asList(ITEM_PACK_LEADER                 ))
    unitItemSold.put(BUILDING_MARAUDER     , asList(ITEM_PACK_LEADER                 ))
    unitItemSold.put(BUILDING_OGRE         , asList(ITEM_OGRE_ARMORED , ITEM_OGRE_MAGI                   ))
    unitItemSold.put(BUILDING_WITCH_DOCTOR , asList(ITEM_DRUNKEN_HAZE , ITEM_ACID_BOMB, ITEM_MANA_WARD))
    unitItemSold.put(BUILDING_SHAMAN       , asList(ITEM_ORB_LIGHTNING, ITEM_FARSEER                     ))
    unitItemSold.put(BUILDING_WARMONGER    , asList(ITEM_RAMPAGE                                         ))
    sharedStocksMap.put(BUILDING_OGRE, asList(ITEM_OGRE_ARMORED, ITEM_OGRE_MAGI))

    // ================ UNDEAD =============
    // unitItemSold.put(BUILDING_ZOMBIE, asList(ITEM_PLAGUE_BEARER                  ))
    unitItemSold.put(BUILDING_SKELETAL_ARCHER, asList(ITEM_BURNING_ARCHER, ITEM_FROST_ARCHER                  ))
    unitItemSold.put(BUILDING_BANSHEE        , asList(ITEM_UNHOLY_FRENZY, ITEM_FROST_ARMOR                    ))
    unitItemSold.put(BUILDING_NECROMANCER        , asList(ITEM_LICH                                       ))
    unitItemSold.put(BUILDING_SPECTRAL_SAGE        , asList(ITEM_LICH                                       ))
    unitItemSold.put(BUILDING_ABOMINATION        , asList(ITEM_SPAWN_GUT_CRAWLER                                       ))
    unitItemSold.put(BUILDING_DEATH_KNIGHT   , asList(ITEM_UNHOLY_AURA                                       ))
    // sharedStocksMap.put(BUILDING_SKELETAL_ARCHER, asList(ITEM_BURNING_ARCHER, ITEM_FROST_ARCHER                  ))
    sharedStocksMap.put(BUILDING_BANSHEE, asList(ITEM_UNHOLY_FRENZY, ITEM_FROST_ARMOR                  ))

    // ================ NIGHT ELF =============
    unitItemSold.put(BUILDING_DRYAD      , asList(ITEM_REJUVENATION, ITEM_KEEPER_OF_THE_GROVE                                               ))
    unitItemSold.put(BUILDING_HUNTRESS   , asList(ITEM_PRIESTESS_OF_THE_MOON                                             ))
    unitItemSold.put(BUILDING_DRUID_TALON, asList(ITEM_ARCHDRUID            , ITEM_WAND_OF_ILLUSION, ITEM_ENTANGLING_ROOT))
    unitItemSold.put(BUILDING_DRUID_CLAW , asList(ITEM_BEAR                 , ITEM_OWLBEAR                               ))
    unitItemSold.put(BUILDING_SPECTRE , asList(ITEM_AVATAR_OF_VENGEANCE))
    sharedStocksMap.put(BUILDING_DRUID_TALON, asList(ITEM_WAND_OF_ILLUSION     , ITEM_ENTANGLING_ROOT                       ))
    sharedStocksMap.put(BUILDING_DRUID_CLAW , asList(ITEM_BEAR                 , ITEM_OWLBEAR                               ))

function canBuy(int itemId, player _p) returns boolean
    let goldCost = itemGoldCost.loadInt(itemId, itemId)
    let lumberCost = itemLumberCost.loadInt(itemId, itemId)
    return _p.getGold() >= goldCost and _p.getLumber() >= lumberCost

public function getItemGoldCost(int itemId) returns int
    return itemGoldCost.loadInt(itemId, itemId)

public function getItemLumberCost(int itemId) returns int
    return itemLumberCost.loadInt(itemId, itemId)


init
    initItemStockData()
    EventListener.add(EVENT_PLAYER_UNIT_ISSUED_ORDER) ->
        let building = EventData.getTriggerUnit()

        if ItemStockHandler.unitToItemStockMap.has(building)
            and EventData.getIssuedOrderId() != OrderIds.undefend

            let itemId = EventData.getIssuedOrderId()
            let i = createItem(itemId, building.getPos())

            // To avoid case when building is casting move ability
            // TODO: Should find another way to check if building is casting
            // move ability in this context
            if i != null and canBuy(itemId, building.getOwner())
                building.addItemById(itemId)
                ItemStockHandler.unitToItemStockMap.get(building).reduceStock(itemId, 1)

                // Item who doesn't give any blood point got 1 hp
                let bloodPoint = i.getLife().toInt()
                if bloodPoint > 1
                    // If we replace an unit
                    var bonusArmyPoints = bloodPoint - BTBuildingData.unitIdToDataMap.get(
                        building.getTypeId()).unitPointValue
                    // If we add an unit
                    if i.getName().contains("Add")
                        bonusArmyPoints = bloodPoint
                    building.getOwner().getPlayerData().addArmyPoints(bonusArmyPoints)
                if playerToArmyPreviewer.has(building.getOwner())
                    playerToArmyPreviewer.get(building.getOwner()).shouldRefresh = true
            i.remove()

    // When an item is bought, it doesn't go in the building inventory, it
    // spawns on the ground
    // Therefore we manually add it to the building and remove the spawned one
    doPeriodically(10) (CallbackPeriodic cb) ->
        forItemsInMap() (item i) ->
            i.remove()
