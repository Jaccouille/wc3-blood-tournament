package RaceSelection

// Standard libs imports:
import Assets
import ClosureEvents
import ClosureTimers

// Local imports:
import ColorUtils
import GameConfig
import GameStates
import LocalObjectIDs
import LocalAssets
import RoundController
import ScoreBoard

function hasBuildings(player _p) returns boolean
    let pData = pDatas.get(_p)

    let grp = GetUnitsInRectMatching(
        pData.buildingRect,
        Filter( -> GetFilterUnit().isType(UNIT_TYPE_STRUCTURE) and GetFilterUnit().getTypeId() != UNIT_RACE_PICKER ))
    let size = grp.size()
    grp.close()
    return size > 0


init
    EventListener.add(EVENT_PLAYER_UNIT_TRAIN_CANCEL) ->
        if EventData.getTriggerUnit().getTypeId() == UNIT_RACE_PICKER
            SetPlayerTechResearchedSwap(UPGD_RACE_PICK, 1, EventData.getTriggerUnit().getOwner())
            SetPlayerTechResearchedSwap(UPGD_RANDOM, 1, EventData.getTriggerUnit().getOwner())
            pDatas.get(EventData.getTriggerUnit().getOwner()).hasRandomed = false

    EventListener.onCast(ABIL_RANDOM_RACE) (unit caster) ->
        let owner = caster.getOwner()
        let pData = pDatas.get(owner)

        if hasBuildings(owner)
            printTimedToPlayer("Cannot random with existing building".color(SPECIAL_COLOR), 5, owner)
        else
            if pData.builder != null
                SetPlayerTechMaxAllowed(owner, pData.builder.getTypeId(), 1)
                flashEffect(Abilities.aIilTarget, pData.builder.getPos3Real())
                pData.builder.remove()
            if not pData.racePicker.issueImmediateOrder(UnitId2String(gameConfig.getBuilderList().getRandomElement()))
                nullTimer() ->
                    pData.racePicker.issueImmediateOrder(UnitId2String(gameConfig.getBuilderList().getRandomElement()))
            pData.hasRandomed = true
            SetPlayerTechResearchedSwap(UPGD_RANDOM, 0, owner)
            // SetPlayerTechResearchedSwap(UPGD_RACE_PICK, 0, owner)

    EventListener.onCast(ABIL_REPICK) (unit caster) ->
        let owner = caster.getOwner()
        let pData = pDatas.get(owner)

        if hasBuildings(owner)
            printTimedToPlayer("Cannot repick with existing building".color(SPECIAL_COLOR), 5, owner)
        else if roundController.hasRoundStarted
            printTimedToPlayer("Cannot repick after first round".color(SPECIAL_COLOR), 5, owner)
        else if pData.builder == null
            printTimedToPlayer("No builder to repick".color(SPECIAL_COLOR), 5, owner)
        else
            SetPlayerTechMaxAllowed(owner, pData.builder.getTypeId(), 1)
            flashEffect(Abilities.aIilTarget, pData.builder.getPos3Real())
            pData.builder.remove()
            pData.hasRandomed = false


    EventListener.add(EVENT_PLAYER_UNIT_TRAIN_FINISH) ->
        let u = EventData.getTrainedUnit()
        if u.isType(UNIT_TYPE_PEON)
            // Remove unit from building UI
            SetPlayerTechMaxAllowed(u.getOwner(), u.getTypeId(), 0)
            if gameConfig.isMultipleBuilderEnabled()
                u.setUseFood(false)


    GameStates.modesSelection.onExit() (state) ->
        let banList = gameConfig.getBanList()
        pDatas.forEach() (player _p, PlayerData pData) ->
            for builderId in banList
                SetPlayerTechMaxAllowed(_p, builderId, 0)

            SetPlayerTechResearchedSwap(UPGD_RACE_PICK, 1, _p)
            SetPlayerTechResearchedSwap(UPGD_RANDOM, 1, _p)
            if gameConfig.isAllRandomEnabled()
                pData.builder = createUnit(_p, gameConfig.getBuilderList().getRandomElement(), pData.racePicker.getPos())
                pData.racePicker.removeAbility(ABIL_REPICK)
                pData.racePicker.removeAbility(ABIL_RANDOM_RACE)
            else
                SetPlayerTechResearchedSwap(UPGD_ALL_RANDOM, 1, _p)

    OnRoundStart.add() (Round round) ->
        if not gameConfig.isMultipleBuilderEnabled()
            pDatas.forEach() (player _p, PlayerData pData) ->
                if pData.builder == null
                    pData.racePicker.issueImmediateOrder(UnitId2String(gameConfig.getBuilderList().getRandomElement()))
                    // pData.builder = createUnit(_p, gameConfig.getBuilderList().getRandomElement(), pData.racePicker.getPos())
                SetPlayerTechResearchedSwap(UPGD_ALL_RANDOM, 0, _p)
                SetPlayerTechResearchedSwap(UPGD_RACE_PICK, 0, _p)

    // Register builder
    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_TRAIN_FINISH)
    ..addCondition(Condition(() -> GetTrainedUnit().isType(UNIT_TYPE_PEON)))
    ..addAction() ->
        let builder = GetTrainedUnit()
        pDatas.get(builder.getOwner()).builder = builder
        if pDatas.get(builder.getOwner()).hasRandomed
            addEffect(LocalAbilities.strawHat, builder, "head")
        scoreBoardEntries.get("PlayerName").setEntryIcon(builder.getOwner(), builder.getIcon())
