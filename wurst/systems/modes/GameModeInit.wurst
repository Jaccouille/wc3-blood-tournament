package GameModeInit

// Standard libs imports:
import LinkedList

// Third party imports:
import Lodash

// Local imports:
import ColorUtils
import GameConfig
import GameMode
import GameStates
import Toolkit


init
    new GameMode("start", "st", "General", "Start the game") (mode, args) ->
        GameMode.endModeSelection(true)

    new GameMode("round-gold", "rg", "General", "Gold income per round, default : " +
        gameConfig.getRoundGoldIncome().getFirst().toString() + ", min : 100") (mode, args) ->
        if (args.size() > 1)
            let roundGoldIncomes = args.drop(1).map(e -> max(e.toInt(), 100))
            var msg = "Round gold income set to : "
            msg += roundGoldIncomes.map(e -> e.toString().color(GOLD_COLOR)).join(", ")

            msg += "\nRemaining round gold income set to "
                + roundGoldIncomes.getLast().toString().color(GOLD_COLOR)
            mode.message(msg)
            gameConfig.setRoundGoldIncome(roundGoldIncomes)

    new GameMode("round", "r", "General", "Number of rounds before elimination phase, default : " +
        gameConfig.getRoundCount().toString() + ", max : 64, min : 0") (mode, args) ->
        if (args.size() > 1)
            let roundCount = min(max(args.get(1).toInt(), 0), 64)
            mode.message("Round number before elimination phase set to " + roundCount.toString().color(SPECIAL_COLOR))
            gameConfig.setRoundCount(roundCount)

    new GameMode("bot", "b", "General", "Enable bot for leaver, default : " +
    gameConfig.isBotAIEnabled().toString()) (mode, args) ->
        if not gameConfig.isBotAIEnabled()
            mode.message("Bot mode enabled, a bot will replace leavers".color(SPECIAL_COLOR))
            gameConfig.setBotAIMode(true)
        else
            mode.message("Bot mode disabled, bot won't replace leavers".color(SPECIAL_COLOR))
            gameConfig.setBotAIMode(false)

    new GameMode("start-gold", "sg", "General", "First round gold amount per players, default : " +
    gameConfig.getStartingGold().toString() + ", min : 100") (mode, args) ->
        if (args.size() > 1)
            let startingGold = max(args.get(1).toInt(), 100)
            mode.message("Starting gold set to " + startingGold.toString().color(GOLD_COLOR))
            gameConfig.setStartingGold(startingGold)

    new GameMode("start-bp", "sb", "General", "First round blood point amount per players, default : " +
    gameConfig.getStartingLumber().toString() + ", min : 0") (mode, args) ->
        if (args.size() > 1)
            let startingLumber = max(args.get(1).toInt(), 0)
            mode.message("Starting blood point set to " + startingLumber.toString().color(RED_COLOR))
            gameConfig.setStartingLumber(startingLumber)

    new GameMode("interlude-time", "it", "Time between each round (seconds) default : " +
        gameConfig.getRoundInterludeTime().toInt().toString() + ", max : 180, min : 10") (mode, args) ->
        if (args.size() > 1)
            let interludeTime = min(max(args.get(1).toInt(), 10), 180)
            mode.message("Interlude time set to " + interludeTime.toString().color(GOLD_COLOR))
            gameConfig.setRoundInterludeTime(interludeTime.toReal())

    new GameMode("spawn-capacity", "sc", "Max unit spawn capacity, default : " +
        gameConfig.getSpawnCap().toString() + ", max : 160, min : 60") (mode, args) ->
        if (args.size() > 1)
            let spawnCap = max(min(args.get(1).toInt(), 160), 60)
            mode.message("Spawn capacity set to " + spawnCap.toString().color(GOLD_COLOR))
            gameConfig.setSpawnCap(spawnCap)

    new GameMode("bounty-multiplier", "bm", "Set blood points bounty multiplier, default : " +
        gameConfig.getBountyMultiplier().toString(1) + ", max : 10.0, min : 0") (mode, args) ->
        if (args.size() > 1)
            let bountyMultiplier = min(max(args.get(1).toReal(), 0.0), 10.0)
            mode.message("Bounty multiplier set to x" + bountyMultiplier.toString(2).color(GOLD_COLOR))
            gameConfig.setBountyMultiplier(bountyMultiplier)

    new GameMode("army-points-multiplier", "apm", "Set army points multiplier, default : " +
        gameConfig.getArmyPointsMultiplier().toString(1) + ", max : 10.0, min : 0") (mode, args) ->
        if (args.size() > 1)
            let armyPointMultiplier = min(max(args.get(1).toReal(), 0.0), 10.0)
            mode.message("Army points multiplier set to x" + armyPointMultiplier.toString(2).color(GOLD_COLOR))
            gameConfig.setArmyPointsMultiplier(armyPointMultiplier)

    new GameMode("damage-multiplier", "dm", "Set unit basic attack multiplier, default : " +
        gameConfig.getDamageMultiplier().toString(1) + ", max : 2.0, min : 0.5") (mode, args) ->
        if (args.size() > 1)
            let damageMultiplier = min(max(args.get(1).toReal(), 0.5), 2.0)
            mode.message("Damage multiplier set to x" + damageMultiplier.toString(2).color(GOLD_COLOR))
            gameConfig.setDamageMultiplier(damageMultiplier)

    new GameMode("health-multiplier", "hm", "Set blood points health multiplier, default : " +
        gameConfig.getHealthMultiplier().toString(1) + ", max : 2.0, min : 0.5") (mode, args) ->
        if (args.size() > 1)
            let healthMultiplier = min(max(args.get(1).toReal(), 0.5), 2.0)
            mode.message("Health multiplier set to x" + healthMultiplier.toString(2).color(GOLD_COLOR))
            gameConfig.setHealthMultiplier(healthMultiplier)

    new GameMode("multiple-builder", "mb", "Disable builder limit") (mode, args) ->
        if not gameConfig.isMultipleBuilderEnabled()
            mode.message("Multiple builder enabled, players can use more than 1 builder".color(SPECIAL_COLOR))
            gameConfig.setMultipleBuilder(true)
        else
            mode.message("Multiple builder disabled, players can use only 1 builder".color(SPECIAL_COLOR))
            gameConfig.setMultipleBuilder(false)

    new GameMode("all-random", "ar", "Every players get 1 random builder (doesn't work with mb)") (mode, args) ->
        if not gameConfig.isAllRandomEnabled()
            mode.message("All random enabled, players get random builder".color(SPECIAL_COLOR))
            gameConfig.setAllRandom(true)
        else
            mode.message("All random disabled, players can choose builder".color(SPECIAL_COLOR))
            gameConfig.setAllRandom(false)

    new GameMode("no-portal", "np", "Removes portal model") (mode, args) ->
        if not gameConfig.isDisplayPortalEnabled()
            mode.message("Portal display disable".color(SPECIAL_COLOR))
            gameConfig.setDisplayPortal(false)
        else
            mode.message("Portal display enable".color(SPECIAL_COLOR))
            gameConfig.setDisplayPortal(true)

    new GameMode("test-mode", "tm", "Testing", "Enables test commands") (mode, args) ->
        mode.message("Test mode enabled".color(SPECIAL_COLOR))
        gameConfig.setTestMode(true)
        GameStates.modesSelection.onExit() state ->
            if gameConfig.isTestModeEnabled()
                enableToolkit()

    new GameMode("dev", "d", "Testing", "Development mode (-tm, -b, -st)", false) (mode, args) ->
        GameMode.find("tm").enable()
        GameMode.find("b").enable()
        GameMode.find("st").enable()
