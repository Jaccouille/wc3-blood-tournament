package ArmyParser

// Standard libs imports:
import ClosureEvents
import ClosureForGroups
import HashMap
import LinkedList

// Local imports:
import LocalObjectIDs

public let armyMap = new HashMap<int, LinkedList<int>>
    ..put(BUILDING_FOOTMAN  , generateUnitList(UNIT_FOOTMAN  , 10))
    ..put(BUILDING_RIFLEMAN , generateUnitList(UNIT_RIFLEMAN , 5))
    ..put(BUILDING_KNIGHT   , generateUnitList(UNIT_KNIGHT   , 5))
    ..put(BUILDING_PRIEST   , generateUnitList(UNIT_PRIEST   , 4))
    ..put(BUILDING_SORCERESS, generateUnitList(UNIT_SORCERESS, 4))
    ..put(BUILDING_ARCHMAGE , generateUnitList(UNIT_ARCHMAGE , 1))
    ..put(BUILDING_PALADIN  , generateUnitList(UNIT_PALADIN  , 1))

    ..put(BUILDING_GRUNT        , generateUnitList(UNIT_GRUNT        , 3))
    ..put(BUILDING_HEADHUNTER   , generateUnitList(UNIT_HEADHUNTER   , 5))
    ..put(BUILDING_WARLOCK      , generateUnitList(UNIT_WARLOCK      , 5))
    ..put(BUILDING_SHAMAN       , generateUnitList(UNIT_SHAMAN       , 4))
    ..put(BUILDING_TAUREN       , generateUnitList(UNIT_TAUREN       , 4))
    ..put(BUILDING_CHIEFTAIN    , generateUnitList(UNIT_CHIEFTAIN    , 1))
    ..put(BUILDING_SHADOWHUNTER , generateUnitList(UNIT_SHADOWHUNTER , 1))

    ..put(BUILDING_GHOUL       , generateUnitList(UNIT_GHOUL       , 5))
    ..put(BUILDING_CRYPT_FIEND , generateUnitList(UNIT_CRYPT_FIEND , 5))
    ..put(BUILDING_NECROMANCER , generateUnitList(UNIT_NECROMANCER , 5))
    ..put(BUILDING_BANSHEE     , generateUnitList(UNIT_BANSHEE     , 4))
    ..put(BUILDING_ABOMINATION , generateUnitList(UNIT_ABOMINATION , 4))
    ..put(BUILDING_DREADLORD   , generateUnitList(UNIT_DREADLORD   , 1))
    ..put(BUILDING_LICH        , generateUnitList(UNIT_LICH        , 1))

    ..put(BUILDING_TREANT                , generateUnitList(UNIT_TREANT                , 10))
    ..put(BUILDING_ARCHER                , generateUnitList(UNIT_ARCHER                , 5))
    ..put(BUILDING_HUNTRESS              , generateUnitList(UNIT_HUNTRESS              , 5))
    ..put(BUILDING_DRUID_TALON           , generateUnitList(UNIT_DRUID_TALON           , 4))
    ..put(BUILDING_DRUID_CLAW_BEAR       , generateUnitList(UNIT_DRUID_CLAW_BEAR       , 4))
    ..put(BUILDING_DAEMON_HUNTER         , generateUnitList(UNIT_DAEMON_HUNTER         , 1))
    ..put(BUILDING_PRIESTESS_OF_THE_MOON , generateUnitList(UNIT_PRIESTESS_OF_THE_MOON , 1))

Comparator<unit> posComparator = (u1, u2) -> (u1.getPos().op_minus(u2.getPos()).x).toInt()

public constant pArmyTemplate = new IterableMap<player, LinkedList<unit>>

function generateUnitList(int unitId, int count) returns LinkedList<int>
    let unitList = new LinkedList<int>
    for i = 0 to count - 1
        unitList.add(unitId)
    return unitList

// TODO: Remove when not debugging?
public function getArmyFromRect(rect armyRect, player _player) returns LinkedList<LinkedList<int>>
    let unitList = new LinkedList<LinkedList<int>>
    let unitList2 = new LinkedList<unit>
    forUnitsInRect(armyRect) (unit u) ->
        if not u.getName().contains("Builder")
            unitList2.add(u)
    unitList2.sortWith(posComparator)

    unitList2.forEach() (unit u) ->
        if armyMap.get(u.getTypeId()) != null
            unitList.addtoStart(armyMap.get(u.getTypeId()))
    return unitList

// TODO: replace with gamestate functional interface just like in ITTs
public function initArmyTemplates()
    for i = 0 to 8
        pArmyTemplate.put(players[i], new LinkedList<unit>)
    EventListener.add(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH) ->
        let u = EventData.getTriggerUnit()

        Log.info(u.getName())
        if armyMap.has(u.getTypeId())
            let soldierBuildingList = pArmyTemplate.get(u.getOwner())
            Log.info(u.getName())

        // TODO: enable at some point before release
        // for soldierBuilding in soldierBuildingList
        //     Log.info(soldierBuilding.getName())
        //     if u.getPos().x > soldierBuilding.getPos().x
        //         soldierBuildingList.addAt(u, soldierBuildingList.indexOf(soldierBuilding))
        //         break

    EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
        let u = EventData.getDyingUnit()
        if armyMap.has(u.getTypeId())
            let soldierBuildingList = pArmyTemplate.get(u.getOwner())
            soldierBuildingList.remove(u)
