package ArmySpawner

// Standard libs imports:
import LinkedList

// Local imports:
import ScoreBoard

// Distance between units positioned in formation mode
@configurable constant FORMATION_WIDTH = 120.
@configurable constant FORMATION_HEIGHT = 80.

// Max number of unit per line
@configurable constant UNIT_PER_LINE = 4

class SpawnZone
    rect spawnRect
    angle angle
    vec2 initialPos
    real width
    real height

    construct(rect spawnRect, vec2 initialPos, angle angle)
        this.spawnRect = spawnRect
        this.angle = angle
        this.initialPos = initialPos
        this.width = spawnRect.width()
        this.height = spawnRect.height()

public let spawnZones = new LinkedList<SpawnZone>()
    ..add(new SpawnZone(gg_rct_Frontrank_SW, gg_rct_Frontrank_SW.getRightBot(), 0..asAngleDegrees()))
    ..add(new SpawnZone(gg_rct_Frontrank_SE, gg_rct_Frontrank_SE.getLeftBot(), 180..asAngleDegrees()))
    ..add(new SpawnZone(gg_rct_Frontrank_NW, gg_rct_Frontrank_NW.getRightBot(), 0..asAngleDegrees()))
    ..add(new SpawnZone(gg_rct_Frontrank_NE, gg_rct_Frontrank_NE.getLeftBot(), 180..asAngleDegrees()))

    ..add(new SpawnZone(gg_rct_Frontrank_ES, gg_rct_Frontrank_ES.getLeftTop(), 90..asAngleDegrees()))
    ..add(new SpawnZone(gg_rct_Frontrank_EN, gg_rct_Frontrank_EN.getLeftBot(), 270..asAngleDegrees()))
    ..add(new SpawnZone(gg_rct_Frontrank_WS, gg_rct_Frontrank_WS.getLeftTop(), 90..asAngleDegrees()))
    ..add(new SpawnZone(gg_rct_Frontrank_WN, gg_rct_Frontrank_WN.getLeftBot(), 270..asAngleDegrees()))


public function spawnArmy(SpawnZone spawnZone, LinkedList<LinkedList<int>> army, player p)
    let spawnDirection = (spawnZone.angle.cos() == 0 ? 0 : 90).asAngleDegrees()

    var unitPerLine = 0
    if spawnDirection.degrees() == 0.
        unitPerLine = (spawnZone.width / FORMATION_WIDTH).round()
    else
        unitPerLine = (spawnZone.height / FORMATION_WIDTH).round()

    var pos = spawnZone.initialPos
    let unitPerColumn = (80 / unitPerLine).floor()
    // TODO: adjust width computing for vertical rect


    var idx = 0
    for subArmy in army
        for unitId in subArmy
            let armyPoints = createUnit(p, unitId, pos, spawnZone.angle).getPointValue()
            pData.get(p).addArmyPoints(armyPoints)
            scoreBoardEntries.get("ArmyPoints").addValue(p, armyPoints)
            // createTTEx(pos.toVec3() + vec3(0, 0, 90), idx.toString(), 6)
            pos = pos.polarOffset(spawnDirection, FORMATION_WIDTH)
            // Move to next line
            if (idx + 1) % unitPerLine == 0
                pos = spawnZone.initialPos.polarOffset(spawnZone.angle.op_minus(180..asAngleDegrees()), FORMATION_HEIGHT * idx / unitPerLine)
            idx++
            if (idx + 1) / unitPerLine > unitPerColumn
                break
