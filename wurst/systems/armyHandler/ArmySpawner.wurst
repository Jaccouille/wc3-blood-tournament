package ArmySpawner

// Standard libs imports:
import ClosureEvents
import HashMap
import LinkedList

import Lodash

// Local imports:
import GameConstants
import GameStates
import LocalObjectIDs
import PlayerData
import PlayerExtension
import SpawnZone
import GameConfig
import UnitExtensions
import ItemCallbackDefinition

public function getUnitPointValue(int goldCost, int lumberCost, int unitCount) returns int
    var pointValue = 0
    pointValue += (goldCost / unitCount).toInt()
    pointValue += (lumberCost / unitCount / 10).toInt()
    return pointValue

public class BTBuildingData
    LinkedList<int> unitToSpawn
    int buildingPointValue = 0
    int unitPointValue = 0
    int goldCost = 0
    int lumberCost = 0

    construct(LinkedList<int> unitToSpawn, int goldCost, int lumberCost)
        this.unitToSpawn = unitToSpawn
        this.goldCost = goldCost
        this.lumberCost = lumberCost
        unitPointValue = getUnitPointValue(goldCost, lumberCost, unitToSpawn.size())
        buildingPointValue += unitPointValue * unitToSpawn.size()


// TODO: refactor, spawn count should be located in the unit definition files
public let armyMap = new HashMap<int, BTBuildingData>
    ..put(BUILDING_FOOTMAN           , new BTBuildingData(generateUnitList(UNIT_FOOTMAN           , 10 ), 100, 0))
    ..put(BUILDING_ROYAL_GUARD       , new BTBuildingData(generateUnitList(UNIT_ROYAL_GUARD       , 10 ), 0, 500))
    ..put(BUILDING_RIFLEMAN          , new BTBuildingData(generateUnitList(UNIT_RIFLEMAN          , 5  ), 150, 0))
    ..put(BUILDING_ELVEN_ARCHER      , new BTBuildingData(generateUnitList(UNIT_ELVEN_ARCHER      , 10 ), 150, 0))
    ..put(BUILDING_RANGER            , new BTBuildingData(generateUnitList(UNIT_RANGER            , 5  ), 0, 700))
    ..put(BUILDING_KNIGHT            , new BTBuildingData(generateUnitList(UNIT_KNIGHT            , 5  ), 200, 0))
    ..put(BUILDING_CRUSADER          , new BTBuildingData(generateUnitList(UNIT_CRUSADER          , 5  ), 0, 1000))
    ..put(BUILDING_PRIEST            , new BTBuildingData(generateUnitList(UNIT_PRIEST            , 5  ), 200, 0))
    ..put(BUILDING_SPELL_BREAKER     , new BTBuildingData(generateUnitList(UNIT_SPELL_BREAKER     , 4  ), 0, 1500))
    ..put(BUILDING_SORCERESS         , new BTBuildingData(generateUnitList(UNIT_SORCERESS         , 3  ), 150, 0))
    ..put(BUILDING_MAGE              , new BTBuildingData(generateUnitList(UNIT_MAGE              , 3  ), 300, 0))
    ..put(BUILDING_ARCHMAGE          , new BTBuildingData(asList(UNIT_WATER_ELEMENTAL, UNIT_WATER_ELEMENTAL, UNIT_ARCHMAGE), 0, 2000))
    ..put(BUILDING_SWORD_MASTER      , new BTBuildingData(generateUnitList(UNIT_SWORD_MASTER      , 4  ), 0, 3000))
    ..put(BUILDING_ELVEN_MAGE        , new BTBuildingData(generateUnitList(UNIT_ELVEN_MAGE        , 3  ), 0, 3000))
    ..put(BUILDING_PALADIN           , new BTBuildingData(asList(UNIT_PALADIN_1, UNIT_PALADIN_2, UNIT_PALADIN_3), 0, 1600))

    ..put(BUILDING_GRUNT                , new BTBuildingData(generateUnitList(UNIT_GRUNT                , 7  ), 140, 0   ))
    ..put(BUILDING_HEADHUNTER           , new BTBuildingData(generateUnitList(UNIT_HEADHUNTER           , 10 ), 150, 0   ))
    ..put(BUILDING_RAIDER               , new BTBuildingData(generateUnitList(UNIT_RAIDER               , 7  ), 210, 0   ))
    ..put(BUILDING_WITCH_DOCTOR         , new BTBuildingData(generateUnitList(UNIT_WITCH_DOCTOR         , 3  ), 150, 0   ))
    ..put(BUILDING_SHAMAN               , new BTBuildingData(generateUnitList(UNIT_SHAMAN               , 4  ), 200, 0   ))
    ..put(BUILDING_OGRE                 , new BTBuildingData(generateUnitList(UNIT_OGRE                 , 3  ), 300, 0   ))
    ..put(BUILDING_WARLOCK              , new BTBuildingData(generateUnitList(UNIT_WARLOCK              , 5  ), 200, 0   ))
    ..put(BUILDING_TAUREN               , new BTBuildingData(generateUnitList(UNIT_TAUREN               , 4  ), 200, 0   ))
    ..put(BUILDING_OGRE_ARMORED         , new BTBuildingData(generateUnitList(UNIT_OGRE_ARMORED         , 3  ), 0  , 1200))
    ..put(BUILDING_BERSERKER            , new BTBuildingData(generateUnitList(UNIT_BERSERKER            , 7  ), 0  , 500 ))
    ..put(BUILDING_TRAPPER              , new BTBuildingData(generateUnitList(UNIT_TRAPPER              , 10 ), 0  , 600 ))
    ..put(BUILDING_HEADHUNTER_BERSERKER , new BTBuildingData(generateUnitList(UNIT_HEADHUNTER_BERSERKER , 10 ), 0  , 700 ))
    ..put(BUILDING_PACK_LEADER          , new BTBuildingData(generateUnitList(UNIT_PACK_LEADER          , 7  ), 0  , 800 ))
    ..put(BUILDING_FARSEER              , new BTBuildingData(generateUnitList(UNIT_FARSEER              , 1  ), 0  , 1200))
    ..put(BUILDING_OCCULTIST            , new BTBuildingData(generateUnitList(UNIT_OCCULTIST            , 5  ), 0  , 900 ))
    ..put(BUILDING_BLADE_MASTER         , new BTBuildingData(generateUnitList(UNIT_BLADE_MASTER         , 4  ), 0  , 3000))
    ..put(BUILDING_SHADOW_HUNTER        , new BTBuildingData(generateUnitList(UNIT_SHADOW_HUNTER        , 3  ), 0  , 3000))
    ..put(BUILDING_DEMOLISHER           , new BTBuildingData(generateUnitList(UNIT_DEMOLISHER           , 3  ), 0  , 3000))

    ..put(BUILDING_ZOMBIE          , new BTBuildingData(generateUnitList(UNIT_ZOMBIE          , 10), 50 , 0   ))
    ..put(BUILDING_GHOUL           , new BTBuildingData(generateUnitList(UNIT_GHOUL           , 10), 0  , 600 ))
    ..put(BUILDING_SKELETAL_ARCHER , new BTBuildingData(generateUnitList(UNIT_SKELETAL_ARCHER , 10), 150, 0   ))
    ..put(BUILDING_CRYPT_FIEND     , new BTBuildingData(generateUnitList(UNIT_CRYPT_FIEND     , 5 ), 150, 0   ))
    ..put(BUILDING_NERUBIAN        , new BTBuildingData(generateUnitList(UNIT_NERUBIAN        , 5 ), 0  , 800 ))
    ..put(BUILDING_NECROMANCER     , new BTBuildingData(generateUnitList(UNIT_NECROMANCER     , 5 ), 200, 0   ))
    ..put(BUILDING_LICH            , new BTBuildingData(generateUnitList(UNIT_LICH            , 1 ), 0  , 1000))
    ..put(BUILDING_DEATH_KNIGHT    , new BTBuildingData(generateUnitList(UNIT_DEATH_KNIGHT    , 3 ), 0  , 1500))
    ..put(BUILDING_BANSHEE         , new BTBuildingData(generateUnitList(UNIT_BANSHEE         , 3 ), 150, 0   ))
    ..put(BUILDING_ABOMINATION     , new BTBuildingData(generateUnitList(UNIT_ABOMINATION     , 3 ), 300, 0   ))
    ..put(BUILDING_FLESH_GOLEM     , new BTBuildingData(generateUnitList(UNIT_FLESH_GOLEM     , 4 ), 0  , 1400))
    ..put(BUILDING_VAMPIRE         , new BTBuildingData(generateUnitList(UNIT_VAMPIRE         , 5 ), 350, 0   ))
    ..put(BUILDING_VAMPIRE_LORD    , new BTBuildingData(generateUnitList(UNIT_VAMPIRE_LORD    , 3 ), 0  , 1000))
    ..put(BUILDING_CRYPT_LORD      , new BTBuildingData(generateUnitList(UNIT_CRYPT_LORD      , 3 ), 0  , 3000))
    ..put(BUILDING_DARK_RANGER     , new BTBuildingData(generateUnitList(UNIT_DARK_RANGER     , 5 ), 0  , 3000))
    ..put(BUILDING_ARCHIMONDE      , new BTBuildingData(generateUnitList(UNIT_ARCHIMONDE      , 1 ), 0  , 3000))

    ..put(BUILDING_TREANT      , new BTBuildingData(generateUnitList(UNIT_TREANT      , 10 ), 100, 0   ))
    ..put(BUILDING_ARCHER      , new BTBuildingData(generateUnitList(UNIT_ARCHER      , 5  ), 100, 0   ))
    ..put(BUILDING_HUNTRESS    , new BTBuildingData(generateUnitList(UNIT_HUNTRESS    , 5  ), 200, 0   ))
    ..put(BUILDING_DRUID_TALON , new BTBuildingData(generateUnitList(UNIT_DRUID_TALON , 4  ), 200, 0   ))
    ..put(BUILDING_DRUID_CLAW  , new BTBuildingData(generateUnitList(UNIT_DRUID_CLAW  , 5  ), 250, 0   ))
    ..put(BUILDING_OWLBEAR     , new BTBuildingData(generateUnitList(UNIT_OWLBEAR     , 4  ), 0  , 1400))
    ..put(BUILDING_DRYAD       , new BTBuildingData(generateUnitList(UNIT_DRYAD       , 5  ), 200, 0   ))

    ..put(BUILDING_ANCIENT_PROTECTOR  , new BTBuildingData(generateUnitList(UNIT_ANCIENT_PROTECTOR  , 4), 0, 1600))
    ..put(BUILDING_MOUNTAIN_GIANT     , new BTBuildingData(generateUnitList(UNIT_MOUNTAIN_GIANT   , 1), 300, 0))
    ..put(BUILDING_NE_RANGER          , new BTBuildingData(generateUnitList(UNIT_NE_RANGER          , 6), 0, 1800))
    ..put(BUILDING_SENTRY             , new BTBuildingData(generateUnitList(UNIT_SENTRY             , 10), 150, 0))
    ..put(BUILDING_SPECTRE            , new BTBuildingData(generateUnitList(UNIT_SPECTRE            , 10), 0, 800))
    ..put(BUILDING_WARDEN             , new BTBuildingData(generateUnitList(UNIT_WARDEN             , 3), 0, 1500))
    ..put(BUILDING_AVATAR_OF_VENGEANCE, new BTBuildingData(generateUnitList(UNIT_AVATAR_OF_VENGEANCE, 3), 0, 2100))
    ..put(BUILDING_BALLISTA           , new BTBuildingData(generateUnitList(UNIT_BALLISTA           , 2), 0, 3000))
    ..put(BUILDING_DAEMON_HUNTER         , new BTBuildingData(generateUnitList(UNIT_DAEMON_HUNTER         , 3 ), 0, 3000))
    ..put(BUILDING_PRIESTESS_OF_THE_MOON , new BTBuildingData(generateUnitList(UNIT_PRIESTESS_OF_THE_MOON , 3 ), 0, 3000))


    ..put(BUILDING_GNOLL           , new BTBuildingData(asList(UNIT_GNOLL,UNIT_RAZORMAN, UNIT_WOLF, UNIT_FURBOLG, UNIT_SASQUATCH), 0, 0))
    ..put(BUILDING_GNOLL_UPGRADE   , new BTBuildingData(asList(UNIT_GNOLL_UPGRADE, UNIT_RAZORMAN_UPGRADE, UNIT_WOLF_UPGRADE, UNIT_FURBOLG_UPGRADE, UNIT_SASQUATCH_UPGRADE), 0, 0))
    ..put(BUILDING_TAUREN          , new BTBuildingData(generateUnitList(UNIT_TAUREN          , 5), 0, 0))
    ..put(BUILDING_THUNDER_LIZARD  , new BTBuildingData(generateUnitList(UNIT_THUNDER_LIZARD  , 4), 0, 0))
    ..put(BUILDING_CENTAUR         , new BTBuildingData(generateUnitList(UNIT_CENTAUR         , 10), 0, 0))
    ..put(BUILDING_HYDRA           , new BTBuildingData(generateUnitList(UNIT_HYDRA           , 3), 0, 0))
    ..put(BUILDING_REXXAR          , new BTBuildingData(generateUnitList(UNIT_REXXAR          , 1), 0, 0))
    ..put(BUILDING_CHEN            , new BTBuildingData(generateUnitList(UNIT_CHEN            , 1), 0, 0))


function generateUnitList(int unitId, int count) returns LinkedList<int>
    let unitList = new LinkedList<int>
    for i = 0 to count * 1 - 1
        unitList.add(unitId)
    return unitList


// Distance between units positioned in formation mode
@configurable constant FORMATION_WIDTH = 120.
@configurable constant FORMATION_HEIGHT = 80.
@configurable constant MAX_UNIT_PER_PLAYER = 80

public let playerToArmySpawner = new HashMap<player, ArmySpawner>


public class ArmySpawner
    SpawnZone spawnZone
    player _p
    angle spawnDirection
    int buildingIdx = 0
    int squadIdx = 0
    vec2 pos
    LinkedList<unit> buildingList
    int unitPerLine
    PlayerData pData
    EventListener reinforcementListener
    boolean spawnFinished = false
    LinkedList<int> squadIds = new LinkedList<int>
    LinkedList<Pair<ItemModifyUnit, int>> unitModifierList = new LinkedList<Pair<ItemModifyUnit, int>>

    construct(player _p)
        // Log.info("[ArmySpawner] [construct]")
        this._p = _p
        this.pData = pDatas.get(_p)
        this.initReinforcementListener()

    function setBuildingList(LinkedList<unit> buildingList)
        this.buildingList = buildingList

    function executeItemBonus(LinkedList<item> inv)
        inv.forEach() (item itm) ->
            if itemAddUnitMap.has(itm.getTypeId())
                itemAddUnitMap.get(itm.getTypeId()).execute(squadIds, itm.getCharges())
            if itemModifyUnitMap.has(itm.getTypeId())
                unitModifierList.push(new Pair(itemModifyUnitMap.get(itm.getTypeId()), itm.getCharges()))

    function setSpawnZone(SpawnZone spawnZone)
        this.spawnZone = spawnZone
        this.spawnDirection = (spawnZone.angle.cos() == 0 ? 0 : 90).asAngleDegrees()
        this.pos = spawnZone.initialPos

    function spawnUnit(int unitId, vec2 spawnPos) returns unit
        let spawnedUnits = pDatas.get(_p).spawnedUnits
        let dummyPlayerIdx = spawnedUnits.size() div MAX_UNIT_PER_PLAYER mod pDatas.get(_p).dummyPlayers.size()

        let newUnit = createUnit(_p.getDummyPlayer(dummyPlayerIdx), unitId, spawnPos, spawnZone.angle)
        if gameConfig.getHealthMultiplier() != 1.
            newUnit.setHP(newUnit.getHP() * gameConfig.getHealthMultiplier())
        if gameConfig.getDamageMultiplier() != 1.
            newUnit.setBaseDamage(
                (newUnit.getBaseDamage(0) * gameConfig.getDamageMultiplier()).toInt() , 0)

        if not unitModifierList.isEmpty()
            unitModifierList.get(0).a.execute(newUnit)
            unitModifierList.get(0).b -= 1
            if unitModifierList.get(0).b <= 0
                destroy unitModifierList.dequeue()

        BlzShowUnitTeamGlow(newUnit, false)
        if newUnit.getName() == ""
            Log.info("Unknown unit spawned")
            newUnit.kill()
        else
            pData.spawnedUnits.add(newUnit)
        return newUnit

    function spawnArmy()
        squadIds.clear()
        buildingIdx = 0
        squadIdx = 0
        // let pData = pDatas.get(_p)
        spawnFinished = false
        // TODO: Add to gameConfig?
        // Determine number of unit per line
        unitPerLine = spawnDirection.degrees() == 0.
            ? (spawnZone.width /  FORMATION_WIDTH).round()
            : (spawnZone.height / FORMATION_WIDTH).round()

        if buildingList.isEmpty()
            spawnUnit(UNIT_DUMMY_SOLDIER, pos)

        while buildingIdx < buildingList.size() and pData.spawnedUnits.size() < spawnZone.unitLimit
            // Get list of unit mapped to the building
            let building = buildingList.get(buildingIdx)
            Log.info("Spawning " + building.getName())
            squadIds.addAll(armyMap.get(building.getTypeId()).unitToSpawn)

            executeItemBonus(building.getInventory())

            // Spawn while there's something to spawn and unitLimit isn't reached
            while squadIdx < squadIds.size() and pData.spawnedUnits.size() < spawnZone.unitLimit
                spawnUnit(squadIds.get(squadIdx), pos)
                // Pause unit until battle start
                ..pause()

                // Update position for next unit
                pos = pos.polarOffset(spawnDirection, FORMATION_WIDTH)

                // Move to next line
                if pData.spawnedUnits.size() % unitPerLine == 0
                    pos = spawnZone.initialPos.polarOffset(
                        spawnZone.angle.op_minus(180..asAngleDegrees()),
                        FORMATION_HEIGHT * pData.spawnedUnits.size() / unitPerLine)
                squadIdx++
            squadIdx = 0
            squadIds.clear()
            buildingIdx++
        if isBuildingSpawnOver() and isSquadSpawnOver()
            spawnFinished = true

        // Set position to the reinforcement spawn point
        // 400 is kind of a random value
        let invertedAngle = (180 + spawnZone.angle.degrees() % 360).asAngleDegrees()
        pos = spawnZone.spawnRect.getCenter().polarOffset(invertedAngle, 400)
        if not isProdBuild
            createTTEx(pos.withZ(100.), invertedAngle.degrees().toString(), 10)
            createTTEx(pos.withZ(300.), invertedAngle.direction().toString(), 10)
        // Log.info("Position reserve : " + pos.toString())

    private function isBuildingSpawnOver() returns boolean
        return buildingIdx >= buildingList.size()

    private function isSquadSpawnOver() returns boolean
        if isBuildingSpawnOver()
            return true
        return squadIdx >= squadIds.size()

    private function getRandomReinforcementPos() returns vec2
        let spawnRect = spawnZone.spawnRect
        let offset = (spawnZone.angle.cos() == 0 ? spawnRect.height() / 2 : spawnRect.width() / 2)
        if spawnZone.angle.cos() == 0
            return pos + vec2(GetRandomReal(-offset, offset), 0)
        else
            return pos + vec2(0, GetRandomReal(-offset, offset))

    private function spawnReinforcement()
        if squadIds.isEmpty()
            let building = buildingList.get(buildingIdx)
            squadIds.addAll(armyMap.get(building.getTypeId()).unitToSpawn)
            executeItemBonus(building.getInventory())

        let unitId = squadIds.get(squadIdx)
        spawnUnit(unitId, getRandomReinforcementPos())
            ..issuePointOrder("attack", CENTER)

        squadIdx++
        if isSquadSpawnOver()
            squadIdx = 0
            buildingIdx++
            squadIds.clear()
            if isBuildingSpawnOver()
                spawnFinished = true

    private function initReinforcementListener()
        reinforcementListener = EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
            let dying = EventData.getDyingUnit()
            let dyingOwner = dying.getOwner().getTruePlayerFromDummy()
            if dyingOwner == this._p
                and not spawnFinished
                and dying.getPointValue() > 0
                spawnReinforcement()


// TODO: replace with gamestate functional interface just like in ITTs
public function initArmySpawner()
    for i = 0 to 7
        playerToArmySpawner.put(players[i], new ArmySpawner(players[i]))

    GameStates.gameplay.onEnter() state ->

        EventListener.add(EVENT_PLAYER_UNIT_UPGRADE_FINISH) ->
            let u = EventData.getTriggerUnit()
            BlzShowUnitTeamGlow(u, false)

        EventListener.add(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH) ->
            let u = EventData.getTriggerUnit()
            let pData = pDatas.get(u.getOwner())
            let buildingList = pData.buildingList

            BlzShowUnitTeamGlow(u, false)

            if armyMap.has(u.getTypeId())
                // Not need to find insertion index if list is empty
                if buildingList.size() == 0
                    buildingList.add(u)

                // Insert new building so the list is sorted by top left position
                // Descending
                for building in buildingList

                    // TODO: refactor? Code seems a bit ugly
                    if u.getPos().x > building.getPos().x
                        if buildingList.indexOf(building) == 0
                            buildingList.addtoStart(u)
                        else
                            buildingList.addAt(u, buildingList.indexOf(building) - 1)
                        break
                    else if u.getPos().x == building.getPos().x
                        if u.getPos().y > building.getPos().y
                            buildingList.addAt(u, buildingList.indexOf(building) - 1)
                            break

                if not buildingList.has(u)
                    buildingList.push(u)

                pData.addArmyPoints(armyMap.get(u.getTypeId()).buildingPointValue)
