package ArmySpawner

// Standard libs imports:
import Assets
import ClosureEvents
import ClosureTimers
import HashMap
import LinkedList

// Local imports:
import GameConstants
import GameStates
import LocalObjectIDs
import PlayerData
import PlayerExtension
import SpawnZone
import UnitPointValueMap

class BuildingTemplate
    LinkedList<int> unitToSpawn
    int pointValue = 0

    construct(LinkedList<int> unitToSpawn)
        this.unitToSpawn = unitToSpawn
        unitToSpawn.forEach() (integer unitId) ->
            pointValue += unitToPoint.get(unitId)

public let armyMap = new HashMap<int, BuildingTemplate>
    ..put(BUILDING_FOOTMAN  , new BuildingTemplate(generateUnitList(UNIT_FOOTMAN  , 20)))
    ..put(BUILDING_RIFLEMAN , new BuildingTemplate(generateUnitList(UNIT_RIFLEMAN , 5)))
    ..put(BUILDING_KNIGHT   , new BuildingTemplate(generateUnitList(UNIT_KNIGHT   , 5)))
    ..put(BUILDING_PRIEST   , new BuildingTemplate(generateUnitList(UNIT_PRIEST   , 4)))
    ..put(BUILDING_SORCERESS, new BuildingTemplate(generateUnitList(UNIT_SORCERESS, 4)))
    ..put(BUILDING_ARCHMAGE , new BuildingTemplate(generateUnitList(UNIT_ARCHMAGE , 1)))
    ..put(BUILDING_PALADIN  , new BuildingTemplate(generateUnitList(UNIT_PALADIN  , 1)))
    ..put(BUILDING_UTHER    , new BuildingTemplate(generateUnitList(UNIT_UTHER  , 1)))
    ..put(BUILDING_DANATH    , new BuildingTemplate(generateUnitList(UNIT_DANATH  , 1)))
    ..put(BUILDING_LOTHAR    , new BuildingTemplate(generateUnitList(UNIT_LOTHAR  , 1)))
    ..put(BUILDING_TURALYON    , new BuildingTemplate(generateUnitList(UNIT_TURALYON  , 1)))
    ..put(BUILDING_KHADGAR    , new BuildingTemplate(generateUnitList(UNIT_KHADGAR  , 1)))
    ..put(BUILDING_MAGE    , new BuildingTemplate(generateUnitList(UNIT_MAGE  , 3)))

    ..put(BUILDING_GRUNT            , new BuildingTemplate(generateUnitList(UNIT_GRUNT            , 10)))
    ..put(BUILDING_HEADHUNTER       , new BuildingTemplate(generateUnitList(UNIT_HEADHUNTER       , 5 )))
    ..put(BUILDING_WARLOCK          , new BuildingTemplate(generateUnitList(UNIT_WARLOCK          , 5 )))
    ..put(BUILDING_SHAMAN           , new BuildingTemplate(generateUnitList(UNIT_SHAMAN           , 4 )))
    ..put(BUILDING_TAUREN           , new BuildingTemplate(generateUnitList(UNIT_TAUREN           , 4 )))
    ..put(BUILDING_RAIDER           , new BuildingTemplate(generateUnitList(UNIT_RAIDER           , 4 )))
    ..put(BUILDING_CHIEFTAIN        , new BuildingTemplate(generateUnitList(UNIT_CHIEFTAIN        , 1 )))
    ..put(BUILDING_SHADOWHUNTER     , new BuildingTemplate(generateUnitList(UNIT_SHADOWHUNTER     , 1 )))
    ..put(BUILDING_ORC_SPEARTHROWER , new BuildingTemplate(generateUnitList(UNIT_ORC_SPEARTHROWER , 1 )))
    ..put(BUILDING_FEL_GRUNT        , new BuildingTemplate(generateUnitList(UNIT_FEL_GRUNT        , 10 )))
    ..put(BUILDING_FEL_RAIDER       , new BuildingTemplate(generateUnitList(UNIT_FEL_RAIDER       , 5 )))
    ..put(BUILDING_FEL_WARLOCK      , new BuildingTemplate(generateUnitList(UNIT_FEL_WARLOCK      , 5 )))
    ..put(BUILDING_OGRE             , new BuildingTemplate(generateUnitList(UNIT_OGRE             , 4 )))
    ..put(BUILDING_OGRE_MAGI        , new BuildingTemplate(generateUnitList(UNIT_OGRE_MAGI        , 4 )))
    ..put(BUILDING_OGRE_ARMORED     , new BuildingTemplate(generateUnitList(UNIT_OGRE_ARMORED     , 4 )))
    ..put(BUILDING_GULDAN           , new BuildingTemplate(generateUnitList(UNIT_GULDAN           , 1 )))
    ..put(BUILDING_THRALL           , new BuildingTemplate(generateUnitList(UNIT_THRALL           , 1 )))
    ..put(BUILDING_KILROGG          , new BuildingTemplate(generateUnitList(UNIT_KILROGG          , 1 )))
    ..put(BUILDING_DUROTAN          , new BuildingTemplate(generateUnitList(UNIT_DUROTAN          , 1 )))
    ..put(BUILDING_HELLSCREAM       , new BuildingTemplate(generateUnitList(UNIT_HELLSCREAM       , 1 )))
    ..put(BUILDING_CHOGALL          , new BuildingTemplate(generateUnitList(UNIT_CHOGALL          , 1 )))
    ..put(BUILDING_GOREFIEND        , new BuildingTemplate(generateUnitList(UNIT_GOREFIEND        , 1 )))


    ..put(BUILDING_GHOUL       , new BuildingTemplate(generateUnitList(UNIT_GHOUL       , 30)))
    ..put(BUILDING_CRYPT_FIEND , new BuildingTemplate(generateUnitList(UNIT_CRYPT_FIEND , 5)))
    ..put(BUILDING_NECROMANCER , new BuildingTemplate(generateUnitList(UNIT_NECROMANCER , 5)))
    ..put(BUILDING_BANSHEE     , new BuildingTemplate(generateUnitList(UNIT_BANSHEE     , 4)))
    ..put(BUILDING_ABOMINATION , new BuildingTemplate(generateUnitList(UNIT_ABOMINATION , 4)))
    ..put(BUILDING_DREADLORD   , new BuildingTemplate(generateUnitList(UNIT_DREADLORD   , 1)))
    ..put(BUILDING_LICH        , new BuildingTemplate(generateUnitList(UNIT_LICH        , 1)))

    ..put(BUILDING_TREANT                , new BuildingTemplate(generateUnitList(UNIT_TREANT                , 10)))
    ..put(BUILDING_ARCHER                , new BuildingTemplate(generateUnitList(UNIT_ARCHER                , 15)))
    ..put(BUILDING_HUNTRESS              , new BuildingTemplate(generateUnitList(UNIT_HUNTRESS              , 5)))
    ..put(BUILDING_DRUID_TALON           , new BuildingTemplate(generateUnitList(UNIT_DRUID_TALON           , 4)))
    ..put(BUILDING_DRUID_CLAW_BEAR       , new BuildingTemplate(generateUnitList(UNIT_DRUID_CLAW_BEAR       , 4)))
    ..put(BUILDING_DAEMON_HUNTER         , new BuildingTemplate(generateUnitList(UNIT_DAEMON_HUNTER         , 1)))
    ..put(BUILDING_PRIESTESS_OF_THE_MOON , new BuildingTemplate(generateUnitList(UNIT_PRIESTESS_OF_THE_MOON , 1)))

function generateUnitList(int unitId, int count) returns LinkedList<int>
    let unitList = new LinkedList<int>
    for i = 0 to count * 1 - 1
        unitList.add(unitId)
    return unitList


// Distance between units positioned in formation mode
@configurable constant FORMATION_WIDTH = 120.
@configurable constant FORMATION_HEIGHT = 80.
@configurable constant MAX_UNIT_PER_PLAYER = 80

public let playerToArmySpawner = new HashMap<player, ArmySpawner>


public class ArmySpawner
    SpawnZone spawnZone
    player _p
    angle spawnDirection
    int idx = 0
    int nestedIdx = 0
    vec2 pos
    LinkedList<unit> buildingList
    int unitPerLine
    PlayerData pData
    EventListener reinforcementListener
    boolean spawnFinished = false

    construct(player _p)
        // Log.info("[ArmySpawner] [construct]")
        this._p = _p
        this.pData = pDatas.get(_p)
        this.initReinforcementListener()

    function setBuildingList(LinkedList<unit> buildingList)
        this.buildingList = buildingList

    function setSpawnZone(SpawnZone spawnZone)
        this.spawnZone = spawnZone
        this.spawnDirection = (spawnZone.angle.cos() == 0 ? 0 : 90).asAngleDegrees()
        this.pos = spawnZone.initialPos

    function spawnUnit(int unitId, vec2 spawnPos)
        let spawnedUnits = pDatas.get(_p).spawnedUnits
        let dummyPlayerIdx = spawnedUnits.size() div MAX_UNIT_PER_PLAYER mod pDatas.get(_p).dummyPlayers.size()

        let newUnit = createUnit(_p.getDummyPlayer(dummyPlayerIdx), unitId, spawnPos, spawnZone.angle)
        // Pause unit until battle start
        newUnit.pause()
        if newUnit.getName() == ""
            Log.info("GROSSE MERDE")
            newUnit.kill()
        else
            pData.spawnedUnits.add(newUnit)


    function spawnArmy()
        idx = 0
        nestedIdx = 0
        // let pData = pDatas.get(_p)
        spawnFinished = false
        // TODO: Add to gameConfig?
        // Determine number of unit per line
        unitPerLine = spawnDirection.degrees() == 0.
            ? (spawnZone.width /  FORMATION_WIDTH).round()
            : (spawnZone.height / FORMATION_WIDTH).round()

        if buildingList.isEmpty()
            spawnUnit(UNIT_DUMMY_SOLDIER, pos)

        while idx < buildingList.size() and pData.spawnedUnits.size() < spawnZone.unitLimit
            // Get list of unit mapped to the building
            let building = buildingList.get(idx)
            let squadIds = armyMap.get(building.getTypeId())

            // Spawn while there's something to spawn and unitLimit isn't reached
            while nestedIdx < squadIds.unitToSpawn.size() and pData.spawnedUnits.size() < spawnZone.unitLimit
                spawnUnit(squadIds.unitToSpawn.get(nestedIdx), pos)

                // Update position for next unit
                pos = pos.polarOffset(spawnDirection, FORMATION_WIDTH)

                // Move to next line
                if (pData.spawnedUnits.size() + 1) % unitPerLine == 0
                    pos = spawnZone.initialPos.polarOffset(
                        spawnZone.angle.op_minus(180..asAngleDegrees()),
                        FORMATION_HEIGHT * pData.spawnedUnits.size() / unitPerLine)
                nestedIdx++
            nestedIdx = 0
            idx++
        if isBuildingSpawnOver() and isSquadSpawnOver()
            spawnFinished = true

        // Set position to the reinforcement spawn point
        // 400 is kind of a random value
        let invertedAngle = (180 + spawnZone.angle.degrees() % 360).asAngleDegrees()
        pos = spawnZone.spawnRect.getCenter().polarOffset(invertedAngle, 400)
        if not isProdBuild
            let efx = addEffect(Abilities.divineShieldTarget, pos)..setScale(0.5)
            createTTEx(pos.withZ(100.), invertedAngle.degrees().toString(), 10)
            createTTEx(pos.withZ(300.), invertedAngle.direction().toString(), 10)
            doAfter(10) ->
                efx.destr()
        // Log.info("Position reserve : " + pos.toString())

    private function isBuildingSpawnOver() returns boolean
        return idx >= buildingList.size()

    private function isSquadSpawnOver() returns boolean
        if isBuildingSpawnOver()
            return true
        let building = buildingList.get(idx)
        let squadIds = armyMap.get(building.getTypeId())
        return nestedIdx >= squadIds.unitToSpawn.size()

    private function getRandomReinforcementPos() returns vec2
        let spawnRect = spawnZone.spawnRect
        let offset = (spawnZone.angle.cos() == 0 ? spawnRect.height() / 2 : spawnRect.width() / 2)
        if spawnZone.angle.cos() == 0
            return pos + vec2(GetRandomReal(-offset, offset), 0)
        else
            return pos + vec2(0, GetRandomReal(-offset, offset))

    private function spawnReinforcement()
        let building = buildingList.get(idx)
        // Log.info("idx " + idx.toString() + " building size " + buildingList.size().toString())
        // Log.info("spawn finished " + spawnFinished.toString() + " for " + pData._p.getNameColored(true))
        let squadIds = armyMap.get(building.getTypeId()).unitToSpawn
        // Log.info("Nested idx " + nestedIdx.toString() + " squad size " + squadIds.size().toString())
        let unitId = squadIds.get(nestedIdx)
        spawnUnit(unitId, getRandomReinforcementPos())

        nestedIdx++
        if isSquadSpawnOver()
            nestedIdx = 0
            idx++
            if isBuildingSpawnOver()
                spawnFinished = true

    private function initReinforcementListener()
        reinforcementListener = EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
            let dying = EventData.getDyingUnit()
            let dyingOwner = dying.getOwner().getTruePlayerFromDummy()
            if dyingOwner == this._p and not spawnFinished
                spawnReinforcement()


// TODO: replace with gamestate functional interface just like in ITTs
public function initArmySpawner()
    for i = 0 to 7
        playerToArmySpawner.put(players[i], new ArmySpawner(players[i]))

    GameStates.gameplay.onEnter() state ->
        EventListener.add(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH) ->
            let u = EventData.getTriggerUnit()
            let pData = pDatas.get(u.getOwner())
            let buildingList = pData.buildingList

            if armyMap.has(u.getTypeId())
                // Not need to find insertion index if list is empty
                if buildingList.size() == 0
                    buildingList.add(u)

                // Insert new building so the list is sorted by top left position
                // Descending
                for building in buildingList

                    // TODO: refactor? Code seems a bit ugly
                    if u.getPos().x > building.getPos().x
                        if buildingList.indexOf(building) == 0
                            buildingList.addtoStart(u)
                        else
                            buildingList.addAt(u, buildingList.indexOf(building) - 1)
                        break
                    else if u.getPos().x == building.getPos().x
                        if u.getPos().y > building.getPos().y
                            buildingList.addAt(u, buildingList.indexOf(building) - 1)
                            break

                if not buildingList.has(u)
                    buildingList.push(u)

                pData.addArmyPoints(armyMap.get(u.getTypeId()).pointValue)
