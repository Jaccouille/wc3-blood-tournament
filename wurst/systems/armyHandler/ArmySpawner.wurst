package ArmySpawner

// Standard libs imports:
import ClosureEvents
import HashMap
import LinkedList

import Lodash

// Local imports:
import GameConstants
import LocalObjectIDs
import PlayerData
import PlayerExtension
import SpawnZone
import GameConfig
import UnitExtensions
import ItemCallbackDefinition
import Assets


public function computeUnitPointValue(int goldCost, int lumberCost, int unitCount) returns int
    var pointValue = 0
    pointValue += (goldCost / unitCount).toInt()
    pointValue += (lumberCost / unitCount / 10).toInt()
    return pointValue

public class BTBuildingData
    static let unitIdToDataMap = new HashMap<int, BTBuildingData>

    static function getUnitCount(int unitId) returns int
        return unitIdToDataMap.get(unitId).unitToSpawn.size()

    static function getUnitPointValue(int unitId) returns int
        return unitIdToDataMap.get(unitId).unitPointValue

    static function getBuildingArmyPoints(int unitId) returns int
        return unitIdToDataMap.get(unitId).buildingArmyPoints

    static function getBuildingUpgradeBonusArmyPoints(int unitId) returns int
        return unitIdToDataMap.get(unitId).upgradeBonusArmyPoints

    LinkedList<int> unitToSpawn
    int buildingArmyPoints = 0
    // Difference between current building army points and the source building army points
    // We need to know the amount of army point to ADD after upgrade
    int upgradeBonusArmyPoints = 0
    int unitPointValue = 0
    int goldCost = 0
    int lumberCost = 0
    boolean isAnUpgrade = false

    construct(int buildingId, int goldCost, int lumberCost, LinkedList<int> unitToSpawn)
        unitIdToDataMap.put(buildingId, this)
        this.unitToSpawn = unitToSpawn
        this.goldCost = goldCost
        this.lumberCost = lumberCost
        unitPointValue = computeUnitPointValue(goldCost, lumberCost, unitToSpawn.size())
        buildingArmyPoints += unitPointValue * unitToSpawn.size()

    construct(int upgradeFrom, int buildingId, int goldCost, int lumberCost, LinkedList<int> unitToSpawn)
        unitIdToDataMap.put(buildingId, this)
        this.unitToSpawn = unitToSpawn
        this.goldCost = goldCost
        this.lumberCost = lumberCost
        unitPointValue = computeUnitPointValue(goldCost, lumberCost, unitToSpawn.size())
        upgradeBonusArmyPoints += unitPointValue * unitToSpawn.size()
        if unitIdToDataMap.get(upgradeFrom) != null
            this.isAnUpgrade = true
            unitPointValue += unitIdToDataMap.get(upgradeFrom).unitPointValue
            buildingArmyPoints = upgradeBonusArmyPoints + unitIdToDataMap.get(upgradeFrom).buildingArmyPoints
        else
            printLog(Loglevel.ERROR, "Unknown upgrade from id")


function genList(int unitId, int count) returns LinkedList<int>
    let unitList = new LinkedList<int>
    for i = 0 to count * 1 - 1
        unitList.add(unitId)
    return unitList

@compiletime function setupBuildingData()
    // TODO: refactor, spawn count should be located in the unit definition files
    // Issue: Can't map an int to a linked list at compile time
    new BTBuildingData(BUILDING_FOOTMAN      , 100, 0   , genList(UNIT_FOOTMAN         , 10))
    new BTBuildingData(BUILDING_CAPTAIN  , 0  , 500 , genList(UNIT_CAPTAIN     , 10))
    new BTBuildingData(BUILDING_RIFLEMAN     , 100, 0   , genList(UNIT_RIFLEMAN        , 5))
    new BTBuildingData(BUILDING_ELVEN_ARCHER , 150, 0   , genList(UNIT_ELVEN_ARCHER    , 10))
    new BTBuildingData(BUILDING_RANGER       , 0  , 700 , genList(UNIT_RANGER          , 5))
    new BTBuildingData(BUILDING_KNIGHT       , 200, 0   , genList(UNIT_KNIGHT          , 5))
    new BTBuildingData(BUILDING_KNIGHT, BUILDING_CRUSADER     , 0  , 1000, genList(UNIT_CRUSADER        , 5))
    new BTBuildingData(BUILDING_PRIEST       , 200, 0   , genList(UNIT_PRIEST          , 5))
    new BTBuildingData(BUILDING_SORCERESS    , 150, 0   , genList(UNIT_SORCERESS       , 3))
    new BTBuildingData(BUILDING_MAGE         , 300, 0   , genList(UNIT_MAGE            , 3))
    new BTBuildingData(BUILDING_SWORD_MASTER , 0  , 3000, genList(UNIT_SWORD_MASTER    , 4))
    new BTBuildingData(BUILDING_ELVEN_MAGE   , 0  , 3000, genList(UNIT_ELVEN_MAGE      , 3))
    new BTBuildingData(BUILDING_PALADIN      , 0  , 1500, asList (UNIT_PALADIN_1))
    new BTBuildingData(BUILDING_ARCHMAGE     , 0  , 2000, asList (UNIT_WATER_ELEMENTAL , UNIT_WATER_ELEMENTAL, UNIT_ARCHMAGE))

    new BTBuildingData(BUILDING_GRUNT                ,                      100 , 0    , genList(UNIT_GRUNT                , 5  ))
    new BTBuildingData(BUILDING_GRUNT                , BUILDING_BERSERKER , 0   , 500  , genList(UNIT_BERSERKER            , 5  ))
    new BTBuildingData(BUILDING_HEADHUNTER           ,                      150 , 0    , genList(UNIT_HEADHUNTER           , 10 ))
    new BTBuildingData(BUILDING_HEADHUNTER           , BUILDING_TRAPPER ,   0   , 1000 , genList(UNIT_TRAPPER              , 10 ))
    new BTBuildingData(BUILDING_RAIDER               ,                      250 , 0    , genList(UNIT_RAIDER               , 5  ))
    new BTBuildingData(BUILDING_WITCH_DOCTOR         ,                      150 , 0    , genList(UNIT_WITCH_DOCTOR         , 3  ))
    new BTBuildingData(BUILDING_SHAMAN               ,                      200 , 0    , genList(UNIT_SHAMAN               , 4  ))
    new BTBuildingData(BUILDING_OGRE                 ,                      300 , 0    , genList(UNIT_OGRE                 , 3  ))
    new BTBuildingData(BUILDING_WARLOCK              ,                      200 , 0    , genList(UNIT_WARLOCK              , 5  ))
    new BTBuildingData(BUILDING_TAUREN               ,                      200 , 0    , genList(UNIT_TAUREN               , 4  ))
    new BTBuildingData(BUILDING_OGRE_ARMORED         ,                      0   , 1200 , genList(UNIT_OGRE_ARMORED         , 3  ))
    new BTBuildingData(BUILDING_PACK_LEADER          ,                      0   , 800  , genList(UNIT_PACK_LEADER          , 7  ))
    new BTBuildingData(BUILDING_WARMONGER            ,                      0   , 1000 , genList(UNIT_WARMONGER            , 1  ))
    new BTBuildingData(BUILDING_FARSEER              ,                      0   , 1200 , genList(UNIT_FARSEER              , 1  ))
    new BTBuildingData(BUILDING_OCCULTIST            ,                      0   , 900  , genList(UNIT_OCCULTIST            , 5  ))
    new BTBuildingData(BUILDING_BLADE_MASTER         ,                      0   , 3000 , genList(UNIT_BLADE_MASTER         , 4  ))
    new BTBuildingData(BUILDING_SHADOW_HUNTER        ,                      0   , 3000 , genList(UNIT_SHADOW_HUNTER        , 3  ))
    new BTBuildingData(BUILDING_DEMOLISHER           ,                      0   , 3000 , genList(UNIT_DEMOLISHER           , 3  ))

    new BTBuildingData(BUILDING_ZOMBIE         , 50  , 0   , genList(UNIT_ZOMBIE          , 10 ))
    new BTBuildingData(BUILDING_ZOMBIE, BUILDING_PLAGUE_BEARER , 0   , 600 , genList(UNIT_PLAGUE_BEARER           , 10 ))
    new BTBuildingData(BUILDING_ZOMBIE, BUILDING_GHOUL          , 0   , 600 , genList(UNIT_GHOUL           , 10 ))
    new BTBuildingData(BUILDING_SKELETAL_ARCHER, 100 , 0   , genList(UNIT_SKELETAL_ARCHER , 10 ))
    new BTBuildingData(BUILDING_CRYPT_FIEND    , 150 , 0   , genList(UNIT_CRYPT_FIEND     , 5  ))
    new BTBuildingData(BUILDING_NERUBIAN       , 0   , 800 , genList(UNIT_NERUBIAN        , 5  ))
    new BTBuildingData(BUILDING_NECROMANCER    , 200 , 0   , genList(UNIT_NECROMANCER     , 5  ))
    new BTBuildingData(BUILDING_LICH           , 0   , 1000, genList(UNIT_LICH            , 1  ))
    new BTBuildingData(BUILDING_DEATH_KNIGHT   , 0   , 1200, genList(UNIT_DEATH_KNIGHT    , 1  ))
    new BTBuildingData(BUILDING_BANSHEE        , 150 , 0   , genList(UNIT_BANSHEE         , 3  ))
    new BTBuildingData(BUILDING_ABOMINATION    , 100 , 0   , genList(UNIT_ABOMINATION     , 1  ))
    new BTBuildingData(BUILDING_FLESH_GOLEM    , 0   , 1400, genList(UNIT_FLESH_GOLEM     , 4  ))
    new BTBuildingData(BUILDING_VAMPIRE        , 300 , 0   , genList(UNIT_VAMPIRE         , 3  ))
    new BTBuildingData(BUILDING_VAMPIRE_LORD   , 0   , 1000, genList(UNIT_VAMPIRE_LORD    , 1  ))
    new BTBuildingData(BUILDING_CRYPT_LORD     , 0   , 3000, genList(UNIT_CRYPT_LORD      , 3  ))
    new BTBuildingData(BUILDING_DARK_RANGER    , 0   , 3000, genList(UNIT_DARK_RANGER     , 5  ))
    new BTBuildingData(BUILDING_ARCHIMONDE     , 0   , 3000, genList(UNIT_ARCHIMONDE      , 1  ))

    new BTBuildingData(BUILDING_TREANT                , 100 , 0   , genList(UNIT_TREANT                , 10 ))
    new BTBuildingData(BUILDING_ARCHER                , 100 , 0   , genList(UNIT_ARCHER                , 10  ))
    new BTBuildingData(BUILDING_ARCHER, BUILDING_NE_RANGER , 0   , 2400, genList(UNIT_NE_RANGER             , 6  ))
    new BTBuildingData(BUILDING_HUNTRESS              , 200 , 0   , genList(UNIT_HUNTRESS              , 5  ))
    new BTBuildingData(BUILDING_DRUID_TALON           , 150 , 0   , genList(UNIT_DRUID_TALON           , 3  ))
    new BTBuildingData(BUILDING_DRUID_CLAW            , 250 , 0   , genList(UNIT_DRUID_CLAW            , 5  ))
    new BTBuildingData(BUILDING_OWLBEAR               , 0   , 1400, genList(UNIT_OWLBEAR               , 4  ))
    new BTBuildingData(BUILDING_DRYAD                 , 200 , 0   , genList(UNIT_DRYAD                 , 5  ))
    new BTBuildingData(BUILDING_ANCIENT_PROTECTOR     , 0   , 1600, genList(UNIT_ANCIENT_PROTECTOR     , 4  ))
    new BTBuildingData(BUILDING_MOUNTAIN_GIANT        , 300 , 0   , genList(UNIT_MOUNTAIN_GIANT        , 1  ))
    new BTBuildingData(BUILDING_SENTRY                , 150 , 0   , genList(UNIT_SENTRY                , 10 ))
    new BTBuildingData(BUILDING_SPECTRE               , 150   , 1000 , genList(UNIT_SPECTRE               , 10 ))
    new BTBuildingData(BUILDING_WARDEN                , 0   , 1500, genList(UNIT_WARDEN                , 3  ))
    new BTBuildingData(BUILDING_AVATAR_OF_VENGEANCE   , 0   , 2100, genList(UNIT_AVATAR_OF_VENGEANCE   , 3  ))
    new BTBuildingData(BUILDING_BALLISTA              , 0   , 3000, genList(UNIT_BALLISTA              , 2  ))
    new BTBuildingData(BUILDING_DAEMON_HUNTER         , 0   , 3000, genList(UNIT_DAEMON_HUNTER         , 3  ))
    new BTBuildingData(BUILDING_PRIESTESS_OF_THE_MOON , 0   , 3000, genList(UNIT_PRIESTESS_OF_THE_MOON , 3  ))

    new BTBuildingData(BUILDING_GNOLL         , 0, 0, asList (UNIT_GNOLL          , UNIT_RAZORMAN, UNIT_WOLF, UNIT_FURBOLG, UNIT_SASQUATCH                                ))
    new BTBuildingData(BUILDING_GNOLL_UPGRADE , 0, 0, asList (UNIT_GNOLL_UPGRADE  , UNIT_RAZORMAN_UPGRADE, UNIT_WOLF_UPGRADE, UNIT_FURBOLG_UPGRADE, UNIT_SASQUATCH_UPGRADE))
    new BTBuildingData(BUILDING_TAUREN        , 0, 0, genList(UNIT_TAUREN         , 5                                                                                     ))
    new BTBuildingData(BUILDING_THUNDER_LIZARD, 0, 0, genList(UNIT_THUNDER_LIZARD , 4                                                                                     ))
    new BTBuildingData(BUILDING_CENTAUR       , 0, 0, genList(UNIT_CENTAUR        , 10                                                                                    ))
    new BTBuildingData(BUILDING_HYDRA         , 0, 0, genList(UNIT_HYDRA          , 3                                                                                     ))
    new BTBuildingData(BUILDING_REXXAR        , 0, 0, genList(UNIT_REXXAR         , 1                                                                                     ))
    new BTBuildingData(BUILDING_CHEN          , 0, 0, genList(UNIT_CHEN           , 1                                                                                     ))


// Distance between units positioned in formation mode
@configurable constant FORMATION_WIDTH = 120.
@configurable constant FORMATION_HEIGHT = 80.
// Number of units allocated per dummy players
@configurable constant MAX_UNIT_PER_DUMMY_PLAYER = 80
        // 400 is kind of a random value
@configurable constant PORTAL_DIST_OFFSET = 500.

public let playerToArmySpawner = new HashMap<player, ArmySpawner>


public class ArmySpawner
    // TODO: remove once debug done
    static int count = 0

    SpawnZone spawnZone
    player _p
    angle spawnDirection
    int buildingIdx = 0
    int squadIdx = 0
    vec2 pos
    vec2 portalSpawnPos
    LinkedList<unit> buildingList
    int unitPerLine
    PlayerData pData
    EventListener reinforcementListener
    boolean spawnFinished = false
    // List of units spawned by a building
    LinkedList<int> squadIds = new LinkedList<int>

    // LinkedList<ItemModifier> unitModifierList = new LinkedList<ItemModifier>
    LinkedList<ItemModifier> unitModifierList = new LinkedList<ItemModifier>

    construct(player _p)
        this._p = _p
        this.pData = pDatas.get(_p)
        this.initReinforcementListener()

    function setBuildingList(LinkedList<unit> buildingList)
        this.buildingList = buildingList

    private function isBuildingSpawnOver() returns boolean
        return buildingIdx >= buildingList.size()

    private function isSquadSpawnOver() returns boolean
        if isBuildingSpawnOver()
            return true
        return squadIdx >= squadIds.size()

    /**
        Register callback defined in ItemCallbackDefinition.wurst with
    **/
    private function applyItemModifier(LinkedList<item> inv)
        for itm in inv
            // Log.debug("AitemModifyUnit :" + unitModifierList.size().toString())
            if itemAddUnitMap.has(itm.getTypeId())
                itemAddUnitMap.get(itm.getTypeId()).execute(squadIds, itm.getCharges())
            if itemModifyUnitMap.has(itm.getTypeId())
                unitModifierList.push(new ItemModifier(itemModifyUnitMap.get(itm.getTypeId()), itm.getCharges()))
            // Log.debug("BitemModifyUnit :" + unitModifierList.size().toString())

    function setSpawnZone(SpawnZone spawnZone)
        this.spawnZone = spawnZone

        // TODO: uber retarded way to properly get the angle I wanted with both jass and LUA
        // 1 < 1.00 in LUA -> true, false in JASS
        this.spawnDirection = (spawnZone.angle.cos().abs() < 0.99 ? 0 : 90).asAngleDegrees()
        // Log.debug((spawnZone.angle.cos().abs() < 0.99).toString() + " " +
        //  (spawnZone.angle.cos().abs().toString()) + " " + this.spawnDirection.degrees().toString())
        this.pos = spawnZone.initialPos
        let invertedAngle = (180 + spawnZone.angle.degrees() % 360).asAngleDegrees()
        this.portalSpawnPos = this.pos.polarOffset(invertedAngle, PORTAL_DIST_OFFSET * 2)

    private function executeUnitModifier(unit newUnit)
        // a being the callback defined in ItemCallbackDefinition.wurst
        unitModifierList.get(0).action.execute(newUnit)
        // b being the item charges
        unitModifierList.get(0).charges -= 1
        // Clean up the pair obj once it has been used
        if unitModifierList.get(0).charges <= 0
            destroy unitModifierList.dequeue()

    private function spawnUnit(int unitId, vec2 spawnPos) returns unit
        let armySize = pDatas.get(_p).spawnedUnits.size()
        // Log.debug("Army size : " + armySize.toString())
        // Need to spread unit owner over 2 dummy player, once it reaches MAX_UNIT_PER_PLAYER
        // change the idx to next dummy player
        let dummyPlayerIdx = armySize div MAX_UNIT_PER_DUMMY_PLAYER mod pDatas.get(_p).dummyPlayers.size()

        // Log.debug("pre spawn")
        let newUnit = createUnit(_p.getDummyPlayer(dummyPlayerIdx), unitId, spawnPos, spawnZone.angle)
        count += 1
        // Log.debug("Unit spawned " +  count.toString())
        if gameConfig.getHealthMultiplier() != 1.
            newUnit.setHP(newUnit.getHP() * gameConfig.getHealthMultiplier())
        if gameConfig.getDamageMultiplier() != 1.
            newUnit.setBaseDamage(
                (newUnit.getBaseDamage(0) * gameConfig.getDamageMultiplier()).toInt() , 0)

        // TODO: handle skin item separately
        // Apply Item modifier
        if not unitModifierList.isEmpty()
            // If unit is the last in the squad, apply all remaining modifier
            if squadIdx == squadIds.size() - 1
                while unitModifierList.size() > 0
                    executeUnitModifier(newUnit)
            else
                executeUnitModifier(newUnit)

        BlzShowUnitTeamGlow(newUnit, false)
        if newUnit.getName() == null
            Log.debug("Unknown unit spawned for " + _p.getDummyPlayer(dummyPlayerIdx).getName() + " id : " + newUnit.getTypeId().toString())
        else
            pData.spawnedUnits.push(newUnit)
        return newUnit

    function initSpawner()
        squadIds.clear()
        buildingIdx = 0
        squadIdx = 0
        spawnFinished = false


        // TODO: Add to gameConfig?
        // Determine number of unit per line
        unitPerLine = spawnDirection.degrees() == 0.
            ? (spawnZone.width /  FORMATION_WIDTH).round()
            : (spawnZone.height / FORMATION_WIDTH).round()

    function spawnArmy(boolean spawnFromPortal)
        var spawnCount = 0

        if buildingList.isEmpty()
            spawnUnit(UNIT_DUMMY_SOLDIER, pos)

        while buildingIdx < buildingList.size()
            and pData.spawnedUnits.size() < spawnZone.unitLimit
            and spawnCount < unitPerLine
            // Get list of unit mapped to the building
            let building = buildingList.get(buildingIdx)
            // Log.debug("Spawning " + building.getName())

            //
            squadIds.addAll(BTBuildingData.unitIdToDataMap.get(building.getTypeId()).unitToSpawn)
            // Log.debug("passed AddAll " + building.getName())

            applyItemModifier(building.getInventory())
            // Log.debug("passed executeItemBonus " + building.getName())

            // Spawn while there's something to spawn and unitLimit isn't reached
            while squadIdx < squadIds.size()
                and pData.spawnedUnits.size() < spawnZone.unitLimit
                and spawnCount < unitPerLine
                // Log.debug("Spawn start of idx: " + squadIdx.toString())

                if spawnFromPortal
                    spawnUnit(squadIds.get(squadIdx), portalSpawnPos)
                    ..issuePointOrder("attack", pos)
                    flashEffect(Abilities.blinkTarget,  portalSpawnPos)
                    portalSpawnPos = portalSpawnPos.polarOffset(spawnDirection, FORMATION_WIDTH)
                else
                    spawnUnit(squadIds.get(squadIdx), pos)
                    // Pause unit until battle start
                    ..pause()
                // Log.debug("Passed the spawn id: " + squadIdx.toString())

                // Update position for next unit
                // if spawnZone.spawnRect == gg_rct_Frontrank_EN
                //     Log.debug(pos.toString() + " " + spawnDirection.degrees().toString() + " " +  (pData.spawnedUnits.size() % unitPerLine).toString())
                pos = pos.polarOffset(spawnDirection, FORMATION_WIDTH)

                // Move to next line
                if pData.spawnedUnits.size() % unitPerLine == 0
                    pos = spawnZone.initialPos.polarOffset(
                        spawnZone.angle.op_minus(180..asAngleDegrees()),
                        FORMATION_HEIGHT * pData.spawnedUnits.size() / unitPerLine)

                    if spawnFromPortal
                        let invertedAngle = (180 + spawnZone.angle.degrees() % 360).asAngleDegrees()
                        let y = spawnDirection.degrees() == 0. ? spawnZone.initialPos.y : pos.y
                        let x = spawnDirection.degrees() == 0. ? pos.x :spawnZone.initialPos.x
                        portalSpawnPos = vec2(x, y).polarOffset(invertedAngle, PORTAL_DIST_OFFSET * 2)


                squadIdx++
                spawnCount++
            if pData.spawnedUnits.size() < spawnZone.unitLimit
                squadIdx = 0
                squadIds.clear()
                buildingIdx++
        if isBuildingSpawnOver() and isSquadSpawnOver()
            if gameConfig.isDisplayPortalEnabled()
                SetDoodadAnimationRect(this.pData.buildingRect, DOODAD_PORTAL, "death", false)
                spawnZone.closePortal()

            spawnFinished = true

        // Set position to the reinforcement spawn point
        if not spawnFromPortal
            setReinforcementPos()
        // if not isProdBuild
        //     createTTEx(pos.withZ(100.), invertedAngle.degrees().toString(), 10)
        //     createTTEx(pos.withZ(300.), invertedAngle.direction().toString(), 10)
        // Log.debug("Position reserve : " + pos.toString())

    function setReinforcementPos()
        let invertedAngle = (180 + spawnZone.angle.degrees() % 360).asAngleDegrees()
        pos = spawnZone.spawnRect.getCenter()
            .polarOffset(invertedAngle, PORTAL_DIST_OFFSET)

    private function getRandomReinforcementPos() returns vec2
        let spawnRect = spawnZone.spawnRect
        // TODO: uber retarded way to properly get the angle I wanted with both jass and LUA
        // 1 < 1.00 in LUA -> true, false in JASS
        let offset = (spawnZone.angle.cos().abs() < 0.99 ? spawnRect.width() / 2 : spawnRect.height() / 2)
        // Log.debug("offset : " + offset.toString() + " height : " + spawnRect.height().toString())

        if spawnZone.angle.cos().abs() < 0.99
            // vertical
            return pos + vec2(GetRandomReal(-offset, offset), 0)
        else
            // horizontal
            return pos + vec2(0, GetRandomReal(-offset, offset))

    private function spawnReinforcement()
        if squadIds.isEmpty()
            let building = buildingList.get(buildingIdx)
            squadIds.addAll(BTBuildingData.unitIdToDataMap.get(building.getTypeId()).unitToSpawn)
            applyItemModifier(building.getInventory())

        let unitId = squadIds.get(squadIdx)
        let u = spawnUnit(unitId, getRandomReinforcementPos())
        u.issuePointOrder("attack", CENTER)
        flashEffect(Abilities.blinkTarget, u.getPos())

        squadIdx++
        if isSquadSpawnOver()
            squadIdx = 0
            buildingIdx++
            squadIds.clear()
            if isBuildingSpawnOver()
                spawnFinished = true
                if gameConfig.isDisplayPortalEnabled()
                    SetDoodadAnimationRect(this.pData.buildingRect, DOODAD_PORTAL, "death", false)
                    spawnZone.closePortal()

    private function initReinforcementListener()
        reinforcementListener = EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
            let dying = EventData.getDyingUnit()
            let dyingOwner = dying.getOwner().getTruePlayerFromDummy()
            if dyingOwner == this._p
                and not spawnFinished
                and dying.getPointValue() > 0
                spawnReinforcement()


// TODO: replace with gamestate functional interface just like in ITTs
public function initArmySpawner()
    setupBuildingData()
    for i = 0 to 7
        playerToArmySpawner.put(players[i], new ArmySpawner(players[i]))
