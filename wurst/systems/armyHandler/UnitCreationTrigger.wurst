package UnitCreationTrigger

// Standard libs imports:
import ClosureEvents
import HashMap
import LinkedList

// Local imports:
import ArmyPreviewer
import ArmySpawner
import GameConstants
import GameStates
import ItemStockHandler
import LocalObjectIDs
import PlayerData
import PlayerExtension

public function insertBuilding(LinkedList<unit> buildingList, unit newBuilding)
    // Remove the building so we can re insert it in the list
    if buildingList.has(newBuilding)
        buildingList.remove(newBuilding)

    // Not need to find insertion index if list is empty
    if buildingList.size() == 0
        buildingList.add(newBuilding)
        return

    // Insert new building so the list is sorted by top left position
    // Descending
    for building in buildingList

        // TODO: refactor? Code seems a bit ugly
        // LogFor.info("u: " + u.getPos().x.toString() + " b : " + building.getPos().x.toString(), u.getOwner())
        if newBuilding.getPos().x > building.getPos().x
            if buildingList.indexOf(building) == 0
                buildingList.addtoStart(newBuilding)
            else
                // LogFor.info("Inserted (x) at " + (buildingList.indexOf(building) - 1).toString(), u.getOwner())
                buildingList.addAt(newBuilding, buildingList.indexOf(building))
            break
        else if newBuilding.getPos().x == building.getPos().x
            if newBuilding.getPos().y > building.getPos().y
                // LogFor.info("Inserted (y) at " + (buildingList.indexOf(building) - 1).toString(), u.getOwner())
                buildingList.addAt(newBuilding, buildingList.indexOf(building))
                break

    if not buildingList.has(newBuilding)
        buildingList.push(newBuilding)

    // Debugging
    // for building in buildingList
    //     createTTEx(building.getPos3Real().add(0, 0, 10), buildingList.indexOf(building).toString(), 10)
    //         ..setLifespan(2)
    //         ..setPermanent(false)

    updatePreviewer(newBuilding.getOwner())

function updatePreviewer(player _p)
    if playerToArmyPreviewer.has(_p)
        playerToArmyPreviewer.get(_p).shouldRefresh = true


init
    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SUMMON)
    ..addCondition(Condition(() -> GetSummonedUnit().getPointValue() > 0))
    ..addAction() ->
        let summonedUnit = GetSummonedUnit()
        if summonedUnit == null
            Log.debug("Unknown unit spawned for " + EventData.getTriggerPlayer().getName())
        else
            pDatas.get(summonedUnit.getOwner().getTruePlayerFromDummy()).spawnedUnits.push(summonedUnit)
            // To reduce pathing lag, assign the new unit to the last dummy player
            let newOwner = pDatas.get(summonedUnit.getOwner().getTruePlayerFromDummy()).dummyPlayers.getLast()
            summonedUnit.setOwner(newOwner, false)
            summonedUnit.issuePointOrder("attack", CENTER)

    GameStates.gameplay.onEnter() state ->

        EventListener.add(EVENT_PLAYER_UNIT_UPGRADE_FINISH) ->
            let newBuilding = EventData.getTriggerUnit()
            let pData = pDatas.get(newBuilding.getOwner())
            newBuilding.addType(UNIT_TYPE_ANCIENT)
            BlzShowUnitTeamGlow(newBuilding, false)
            pData.addArmyPoints(BTBuildingData.unitIdToDataMap.get(newBuilding.getTypeId()).upgradeBonusArmyPoints)
            updatePreviewer(newBuilding.getOwner())

            // Add stock items
            if unitItemSold.has(newBuilding.getTypeId())
                let itemStockHandler = new ItemStockHandler(newBuilding)
                unitItemSold.get(newBuilding.getTypeId()).forEach() (integer t) ->
                    let itm = createItem(t, vec2(0, 0))
                    let maxStock = itm.getLevel()
                    AddItemToStock(newBuilding, t, maxStock, maxStock)
                    itemStockHandler.addItem(itm.getTypeId(), maxStock)
                    itm.remove()

        EventListener.add(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH) ->
            let newBuilding = EventData.getTriggerUnit()
            let pData = pDatas.get(newBuilding.getOwner())
            let buildingList = pData.buildingList

            BlzShowUnitTeamGlow(newBuilding, false)
            pData.addArmyPoints(BTBuildingData.unitIdToDataMap.get(newBuilding.getTypeId()).buildingArmyPoints)

            // Check if is a building
            if BTBuildingData.unitIdToDataMap.has(newBuilding.getTypeId())
                insertBuilding(buildingList, newBuilding)

                // Add stock items
                if unitItemSold.has(newBuilding.getTypeId())
                    let itemStockHandler = new ItemStockHandler(newBuilding)
                    unitItemSold.get(newBuilding.getTypeId()).forEach() (integer t) ->
                        let itm = createItem(t, vec2(0, 0))
                        let maxStock = itm.getLevel()
                        AddItemToStock(newBuilding, t, maxStock, maxStock)
                        itemStockHandler.addItem(itm.getTypeId(), maxStock)
                        itm.remove()
