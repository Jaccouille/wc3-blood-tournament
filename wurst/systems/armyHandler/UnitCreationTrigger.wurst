package UnitCreationTrigger

// Standard libs imports:
import ClosureEvents
import HashMap
import LinkedList

import PlayerData
import GameConstants
import GameStates
import ArmySpawner
import ItemStockHandler


init
    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SUMMON)
    ..addCondition(Condition(() -> GetSummonedUnit().getPointValue() > 0))
    ..addAction() ->
        pDatas.get(GetSummonedUnit().getOwner()).spawnedUnits.push(GetSummonedUnit())
        GetSummonedUnit().issuePointOrder("attack", CENTER)

    GameStates.gameplay.onEnter() state ->

        EventListener.add(EVENT_PLAYER_UNIT_UPGRADE_FINISH) ->
            let u = EventData.getTriggerUnit()
            BlzShowUnitTeamGlow(u, false)

        EventListener.add(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH) ->
            let u = EventData.getTriggerUnit()
            let pData = pDatas.get(u.getOwner())
            let buildingList = pData.buildingList

            BlzShowUnitTeamGlow(u, false)
            pData.addArmyPoints(BTBuildingData.unitIdToDataMap.get(u.getTypeId()).buildingArmyPoints)

            // Check if is a building
            if BTBuildingData.unitIdToDataMap.has(u.getTypeId())
                // Not need to find insertion index if list is empty
                if buildingList.size() == 0
                    buildingList.add(u)

                // Insert new building so the list is sorted by top left position
                // Descending
                for building in buildingList

                    // TODO: refactor? Code seems a bit ugly
                    // LogFor.info("u: " + u.getPos().x.toString() + " b : " + building.getPos().x.toString(), u.getOwner())
                    if u.getPos().x > building.getPos().x
                        if buildingList.indexOf(building) == 0
                            buildingList.addtoStart(u)
                        else
                            // LogFor.info("Inserted (x) at " + (buildingList.indexOf(building) - 1).toString(), u.getOwner())
                            buildingList.addAt(u, buildingList.indexOf(building))
                        break
                    else if u.getPos().x == building.getPos().x
                        if u.getPos().y > building.getPos().y
                            // LogFor.info("Inserted (y) at " + (buildingList.indexOf(building) - 1).toString(), u.getOwner())
                            buildingList.addAt(u, buildingList.indexOf(building))
                            break

                if not buildingList.has(u)
                    buildingList.push(u)

                if unitItemSold.has(u.getTypeId())
                    let itemStockHandler = new ItemStockHandler(u)
                    unitItemSold.get(u.getTypeId()).forEach() (integer t) ->
                        let itm = createItem(t, vec2(0, 0))
                        let maxStock = itm.getLevel()
                        AddItemToStock(u, t, maxStock, maxStock)
                        itemStockHandler.addItem(itm.getTypeId(), maxStock)
                        itm.remove()
