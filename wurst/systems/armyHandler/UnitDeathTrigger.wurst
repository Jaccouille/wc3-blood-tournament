package UnitDeathTrigger

// Standard libs imports:
import Assets
import ClosureForGroups
import ClosureTimers
import OrderIds
import DummyRecycler

// Local imports:
import ArmyPreviewer
import ArmySpawner
import GameConfig
import ItemStockHandler
import LocalObjectIDs
import PlayerExtension
import RoundController
import SpawnZone
import UnitExtensions
import TextTagUtils

function fu() returns unit
    return GetFilterUnit()

unit tempUnit = null

function customAction(unit killer, unit dyingUnit, PlayerData pData)

    if (dyingUnit.getTypeId() == UNIT_PALADIN_1
        or dyingUnit.getTypeId() == UNIT_PALADIN_2
        or dyingUnit.getTypeId() == UNIT_PALADIN_3)
        and killer.getOwner() != players[PLAYER_NEUTRAL_AGGRESSIVE]
        doAfter(1) ->
            // if roundController.currentRound.
            flashEffect(Abilities.resurrecttarget, dyingUnit.getPos())
            let u = createUnit(dyingUnit.getOwner(), UNIT_GHOST_PALADIN,
                dyingUnit.getPos(), dyingUnit.getFacingAngle())
            ..issuePointOrder("attack", CENTER)
            if u == null
                Log.debug("Unknown unit spawned for" +
                dyingUnit.getOwner().getTruePlayerFromDummy().getName())
            else
                pData.spawnedUnits.push(u)

    else if dyingUnit.getTypeId() == UNIT_GHOST_PALADIN
        flashEffect(Abilities.holyBoltSpecialArt, dyingUnit.getPos())
        dyingUnit.remove()

    else if dyingUnit.getTypeId() == UNIT_ABOMINATION and dyingUnit.hasAbility(ABIL_SPAWN_GUT_CRAWLER)
        pData.spawnedUnits.push(
        createUnit(dyingUnit.getOwner(), UNIT_GUT_CRAWLER, dyingUnit.getPos(), dyingUnit.getFacingAngle())
            ..issuePointOrder("attack", CENTER)
        )
        pData.spawnedUnits.push(
        createUnit(dyingUnit.getOwner(), UNIT_GUT_CRAWLER, dyingUnit.getPos(), dyingUnit.getFacingAngle())
            ..issuePointOrder("attack", CENTER)
        )

    else if killer.getTypeId() == UNIT_DEATH_KNIGHT and killer.isAlive()
        let manaRestored = dyingUnit.getMaxHP() / 10
        flashEffect(Abilities.darkRitualTarget, dyingUnit, "origin")
        flashEffect(Abilities.replenishManaCaster, killer, "origin")
        killer.addMana(manaRestored)

    else if dyingUnit.getTypeId() == UNIT_WISP
        flashEffect(Units.wispExplode, dyingUnit.getPos())

    else if killer.getTypeId() == UNIT_TRAPPER
        and killer.getAbilityCooldownRemaining(ABIL_BERSERK) <= 0
        killer.issueImmediateOrderById(OrderIds.berserk)

    else if dyingUnit.getTypeId() == UNIT_MOUNTAIN_GIANT
        // Log.debug("MG DEAD")
        forUnitsInRange(dyingUnit.getPos(), 1500) (unit u) ->
            if u.isAlive() and u.isEnemyOf(dyingUnit)
                // Log.debug("Reordering " + u.getName())
                u.issuePointOrder("attack", CENTER)

    else if killer.getTypeId() == UNIT_WARMONGER and killer.hasAbility(ABIL_RAMPAGE)
        if not killer.hasAbility(BUFF_RAMPAGE)
            Log.debug("reset rampage")
            killer.setAbilityLevel(ABIL_RAMPAGE, 1)
        killer.issueImmediateOrderById(OrderIds.battleroar)
        Log.debug("Rampage lvl : " + IncUnitAbilityLevel(killer, ABIL_RAMPAGE).toString())

    else if killer.getTypeId() == UNIT_BERSERKER
        if not killer.hasAbility(BUFF_KILLING_SPREE)
            killer.setAbilityLevel(ABIL_KILLING_SPREE, 1)
        killer.issueImmediateOrderById(OrderIds.roar)
        killer.incAbilityLevel(ABIL_KILLING_SPREE)

    if IsUnitRace(dyingUnit, RACE_UNDEAD)
        and killer.getOwner() != ALTAR_PLAYER
        and BlzGetUnitBooleanField(dyingUnit, UNIT_BF_RAISABLE)
        tempUnit = dyingUnit
        forNearestUnit(dyingUnit.getPos(), 500,
            Filter(() -> (fu().getTypeId() == UNIT_VAMPIRE or fu().getTypeId() == UNIT_VAMPIRE_LORD)
            and fu().getAbilityLevel(ABIL_BLOOD_HARVEST) < 41
            and fu().getAbilityLevel(ABIL_BLOOD_HARVEST) > 0
            and fu().isAlive()
            and fu().isAllyOf(tempUnit)
        )) u ->
            if u != null
                let bounty = dyingUnit.getPointValue()
                let lvl = u.getAbilityLevel(ABIL_BLOOD_HARVEST)
                let newLvl = min(bounty div 5 + lvl, 41)
                // Ask chat gpt for a linear equation, max value is 100
                let newColor = max((-3.97 * newLvl + 258.97).toInt(), 0)
                u.setVertexColor(255, newColor, newColor, 255)
                let baseHP = u.getTypeId() == UNIT_VAMPIRE ? 1600 : 2000
                u.setMaxHP(baseHP + (newLvl - 1) * 50, true)
                // Ask chat gpt for a linear equation, max value is 1.2
                u.setScale(0.0051 * newLvl + 0.9949)
                // Log.info(u.getName() + " " + u.getAbilityLevel(ABIL_BLOOD_HARVEST).toString())
                u.setAbilityLevel(ABIL_BLOOD_HARVEST, newLvl)
                flashEffect(Abilities.aIsmTarget, u, "origin")
            tempUnit = null

function getBounty(unit dyingUnit) returns int
    return (dyingUnit.getPointValue() * gameConfig.getBountyMultiplier()).toInt()

function createBountyTag(unit dyingUnit, player killerOwner)
    createBloodPointTag(
        dyingUnit.getPos3Real(),
        "+" + getBounty(dyingUnit).toString(),
        8,
        killerOwner
    )

function spawnSpeedBanner(vec2 pos, player winner)
    flashEffect(Abilities.aIemTarget, pos, 2)
    createUnit(winner.getDummyPlayer(0), UNIT_SPEED_BANNER, pos, 270..asAngleDegrees())

function computeSpeedBannerPos(SpawnZone sp1, SpawnZone sp2) returns vec2
    let pos1 = sp1.spawnRect.getCenter()
    let pos2 = sp2.spawnRect.getCenter()
    let direction = pos1.angleTo(pos2)
    let dist = pos1.distanceTo(pos2) / 2
    let middle = pos1.polarOffset(direction, dist)
    return middle

function groupOrder(player _p, vec2 middle)
    nullTimer() ->
        // Group order works on 12 units max
        let orderUnitCount = 12
        let spawnedUnits = _p.getPlayerData().spawnedUnits
        let grpList = new LinkedList<group>()
        let grpNbr = (spawnedUnits.size() / orderUnitCount).toInt() + 1

        for i = 0 to grpNbr
            grpList.push(CreateGroup())

        var grp = grpList.get(0)
        var grpIdx = 0
        for u in spawnedUnits
            if u.isSoldier() and u.isAlive()
                grp.add(u)
            if (spawnedUnits.indexOf(u) % (orderUnitCount - 1) == 0 and spawnedUnits.indexOf(u) > 0)
                or spawnedUnits.indexOf(u) == spawnedUnits.size() - 1
                grp.pointOrderById(OrderIds.attack, middle)
                doAfter(4) ->
                    grp.pointOrderById(OrderIds.attack, CENTER)
                    if grpList != null
                        grpList.remove(grp)
                    grp.close()
                    if grpList.isEmpty()
                        destroy grpList
                grpIdx += 1
                grp = grpList.get(grpIdx)


public function checkIfPlayerDefeated(PlayerData pData, player killerOwner)
    if pData.spawnedUnits.isEmpty()
        Log.debug(EventData.getKillingUnit().getName() + " killed " + EventData.getDyingUnit().getName())
        let matchUpWinner = roundController.currentRound.getOpponent(pData._p)
        if matchUpWinner != null
            // Trying to fix taunted units being stuck
            // nullTimer() ->
            //     forUnitsOfPlayer(matchUpWinner) (unit u) ->
            //         if not u.isType(UNIT_TYPE_PEON) and not u.isType(UNIT_TYPE_STRUCTURE)
            //             u.issuePointOrder("attack", CENTER)

        if matchUpWinner == killerOwner
            if roundController.currentRound instanceof NormalRound
                let sp1 = playerToArmySpawner.get(matchUpWinner).spawnZone
                let sp2 = playerToArmySpawner.get(pData._p).spawnZone
                let middle = computeSpeedBannerPos(sp1, sp2)
                var hasSpawned = false
                // TODO: probably doesn't work
                forUnitsInRange(middle, 500) (unit u) ->
                    if u.getTypeId() == UNIT_SPEED_BANNER
                        hasSpawned = true
                if not hasSpawned
                    spawnSpeedBanner(middle, matchUpWinner)
                    let armySpawner = playerToArmySpawner.get(matchUpWinner)
                    let secondRectIdx = spawnZones.indexOf(armySpawner.spawnZone) div 2 + 10

                    armySpawner.spawnZone.closePortal()
                    if not armySpawner.hasSpawnFinished
                        armySpawner.spawnZone = spawnZones.get(secondRectIdx)
                        armySpawner.pos = armySpawner.spawnZone.spawnRect.getCenter()
                        armySpawner.spawnZone.openPortal()
                groupOrder(matchUpWinner, middle)
            else if roundController.currentRound instanceof FinalRound
                // Clear the reinforcement list of the winner since the round is over
                playerToArmySpawner.get(matchUpWinner).buildingList.clear()
                (roundController.currentRound castTo FinalRound).looser = pData._p

        roundController.currentRound.roundParticipant.remove(pData._p)

        let winner = killerOwner == ALTAR_PLAYER ? pData._p : killerOwner

        if roundController.currentRound.roundParticipant.size() == 1
            onLastArmyRemaining.execute()
        if roundController.currentRound.roundParticipant.isEmpty()
            onAllUnitDead.execute(winner)


public function initUnitDeathTrigger()
    OnRoundStart.add() (Round round) ->
        pDatas.forEach() (player key, PlayerData pData) ->
            if pData.buildingList.size() <= 0
                roundController.currentRound.roundParticipant.remove(pData._p)

    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
    ..addAction() ->
        let killer = EventData.getKillingUnit()
        let killerOwner = killer.getOwner().getTruePlayerFromDummy()
        let dyingUnit = EventData.getDyingUnit()

        let pData = pDatas.get(dyingUnit.getOwner().getTruePlayerFromDummy())

        // Is a building
        if BTBuildingData.unitIdToDataMap.has(dyingUnit.getTypeId())
            pData.subArmyPoints(BTBuildingData.unitIdToDataMap.get(dyingUnit.getTypeId()).buildingArmyPoints)
            pData.buildingList.remove(dyingUnit)

            if killer == pData.builder or killer.getTypeId() == DUMMY_UNIT_ID
                var goldAmount = dyingUnit.getMaxHP().toInt() - 100
                var bloodAmount = dyingUnit.getMaxMana().toInt()
                for t in dyingUnit.getInventory()
                    if t != null
                        let goldCost = getItemGoldCost(t.getTypeId()) * (t.getCharges() / BlzGetItemIntegerField(t, ITEM_IF_PRIORITY)).toInt()
                        goldAmount += goldCost
                        let lumberCost = getItemLumberCost(t.getTypeId()) *  (t.getCharges() / BlzGetItemIntegerField(t, ITEM_IF_PRIORITY)).toInt()
                        bloodAmount += lumberCost

                var pos = dyingUnit.getPos3Real()
                if goldAmount > 0
                    pData._p.addGold(goldAmount)
                    createGoldTag(pos, "+" + goldAmount.toString(), 12, pData._p)
                    pos = pos.add(0, 50, 0)
                if bloodAmount > 0
                    pData._p.addLumber(bloodAmount)
                    createBloodPointTag(pos, "+" + bloodAmount.toString(), 12, pData._p)

            if ItemStockHandler.hasUnit(dyingUnit)
                destroy ItemStockHandler.unitToItemStockMap.get(dyingUnit)
            if playerToArmyPreviewer.has(dyingUnit.getOwner())
                playerToArmyPreviewer.get(dyingUnit.getOwner()).shouldRefresh = true
        else if dyingUnit.getPointValue() > 0

            // Add blood points bounty
            if killerOwner != ALTAR_PLAYER
                and roundController.currentRound instanceof NormalRound
                and killerOwner != dyingUnit.getOwner()
                and not IsUnitIllusion(dyingUnit)
                if dyingUnit.getPointValue() > 0
                    if dyingUnit.getOwner() != killerOwner and killer != null
                        pDatas.get(killerOwner).addRoundBloodPoints(getBounty(dyingUnit))
                        createBountyTag(dyingUnit, killerOwner)

            if pData.spawnedUnits.has(dyingUnit)
                pData.spawnedUnits.remove(dyingUnit)
                checkIfPlayerDefeated(pData, killerOwner)
            else
                Log.debug("Cannot remove " + dyingUnit.getName())

            // Custom Action affecting killer unit
            customAction(killer, dyingUnit, pData)
