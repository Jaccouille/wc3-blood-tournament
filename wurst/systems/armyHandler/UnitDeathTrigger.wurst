package UnitDeathTrigger

// Local imports:
import ArmySpawner
import GameConfig
import PlayerExtension
import RoundController
import ClosureTimers
import LocalObjectIDs
import Assets

function customAction(unit killer, unit dying)
    if killer.getTypeId() == UNIT_DEATH_KNIGHT and killer.isAlive()
        let manaRestored = dying.getMaxHP() / 10
        flashEffect(Abilities.darkRitualTarget, dying, "origin")
        flashEffect(Abilities.replenishManaCaster, killer, "origin")
        killer.addMana(manaRestored)
    else if killer.getTypeId() == UNIT_VAMPIRE and killer.isAlive()
        let hpBonus = (dying.getMaxHP() / 10).toInt()
        killer.setMaxHP(killer.getMaxHP().toInt() + hpBonus, true)
        flashEffect(Abilities.aIsmTarget, killer, "origin")
    else if killer.getTypeId() == UNIT_VAMPIRE_LORD and killer.isAlive()
        let hpBonus = (dying.getMaxHP() / 20).toInt()
        killer.setMaxHP(killer.getMaxHP().toInt() + hpBonus, true)
        flashEffect(Abilities.aIsmTarget, killer, "origin")

function getBounty(unit dyingUnit) returns int
    return (dyingUnit.getPointValue() * gameConfig.getBountyMultiplier()).toInt()

function createBountyTag(unit dyingUnit, player killerOwner)
    createTTEx(
        dyingUnit.getPos3Real(),
        "+" + getBounty(dyingUnit).toString(),
        8,
        colorA(255, 0, 0, 255),
        killerOwner
    )
    ..setVelocity(0.0, 0.03)
    ..setFadepoint(1.5)
    ..setLifespan(2.0)
    ..setPermanent(false)

function checkIfPlayerDefeated(PlayerData pData)
    if pData.spawnedUnits.isEmpty()
        roundController.currentRound.roundParticipant.remove(pData._p)

        Log.info(pData._p.getName() + " has been eliminated")

        if roundController.currentRound.roundParticipant.size() == 1
            onLastArmyRemaining.execute()
        if roundController.currentRound.roundParticipant.isEmpty()
            onAllUnitDead.execute(pData._p)


public function initUnitDeathTrigger()
    OnRoundStart.add() (Round round) ->
        pDatas.forEach() (player key, PlayerData pData) ->
            if pData.buildingList.size() <= 0
                roundController.currentRound.roundParticipant.remove(pData._p)
                Log.info(pData._p.getName() + " has been eliminated")

    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
    ..addCondition(Condition(() -> GetDyingUnit().getPointValue() > 0))
    ..addAction() ->
        let killer = EventData.getKillingUnit()
        let killerOwner = killer.getOwner().getTruePlayerFromDummy()
        let dyingUnit = EventData.getDyingUnit()

        let pData = pDatas.get(dyingUnit.getOwner().getTruePlayerFromDummy())


        // Is a building
        if armyMap.has(dyingUnit.getTypeId())
            pData.subArmyPoints(armyMap.get(dyingUnit.getTypeId()).buildingPointValue)
            pData.buildingList.remove(dyingUnit)
        else
            // Custom Action affecting killer unit
            customAction(killer, dyingUnit)

            // Add blood points bounty
            if killerOwner != ALTAR_PLAYER and roundController.currentRound instanceof NormalRound
                if dyingUnit.getPointValue() > 0
                    pDatas.get(killerOwner).addBounty(getBounty(dyingUnit))
                    createBountyTag(dyingUnit, killerOwner)

            if pData.spawnedUnits.has(dyingUnit) == true
                pData.spawnedUnits.remove(dyingUnit)
                checkIfPlayerDefeated(pData)

        if dyingUnit.getTypeId() == UNIT_PALADIN_1
            or dyingUnit.getTypeId() == UNIT_PALADIN_2
            or dyingUnit.getTypeId() == UNIT_PALADIN_3
            doAfter(1) ->
                flashEffect(Abilities.resurrecttarget, dyingUnit.getPos())
                let u = createUnit(dyingUnit.getOwner(), UNIT_GHOST_PALADIN,
                    dyingUnit.getPos(), dyingUnit.getFacingAngle())
                ..issuePointOrder("attack", CENTER)
                pData.spawnedUnits.add(u)
