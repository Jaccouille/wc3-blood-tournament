package UnitDeathTrigger

// Local imports:
import ArmySpawner
import GameConfig
import PlayerExtension
import RoundController
import ClosureTimers
import LocalObjectIDs
import Assets
import OrderIds
import ItemStockHandler
import ClosureForGroups
import SpawnZone
import ArmyPreviewer

function customAction(unit killer, unit dyingUnit, PlayerData pData)

    if (dyingUnit.getTypeId() == UNIT_PALADIN_1
        or dyingUnit.getTypeId() == UNIT_PALADIN_2
        or dyingUnit.getTypeId() == UNIT_PALADIN_3)
        and killer.getOwner() != players[PLAYER_NEUTRAL_AGGRESSIVE]
        doAfter(1) ->
            // if roundController.currentRound.
            flashEffect(Abilities.resurrecttarget, dyingUnit.getPos())
            let u = createUnit(dyingUnit.getOwner(), UNIT_GHOST_PALADIN,
                dyingUnit.getPos(), dyingUnit.getFacingAngle())
            ..issuePointOrder("attack", CENTER)
            if u == null
                Log.debug("Unknown unit spawned for" +
                dyingUnit.getOwner().getTruePlayerFromDummy().getName())
            else
                pData.spawnedUnits.push(u)

    else if dyingUnit.getTypeId() == UNIT_GHOST_PALADIN
        flashEffect(Abilities.holyBoltSpecialArt, dyingUnit.getPos())
        dyingUnit.remove()

    else if dyingUnit.getTypeId() == UNIT_ABOMINATION and dyingUnit.hasAbility(ABIL_SPAWN_GUT_CRAWLER)
        pData.spawnedUnits.push(
        createUnit(dyingUnit.getOwner(), UNIT_GUT_CRAWLER, dyingUnit.getPos(), dyingUnit.getFacingAngle())
            ..issuePointOrder("attack", CENTER)
        )
        pData.spawnedUnits.push(
        createUnit(dyingUnit.getOwner(), UNIT_GUT_CRAWLER, dyingUnit.getPos(), dyingUnit.getFacingAngle())
            ..issuePointOrder("attack", CENTER)
        )

    else if killer.getTypeId() == UNIT_DEATH_KNIGHT and killer.isAlive()
        let manaRestored = dyingUnit.getMaxHP() / 10
        flashEffect(Abilities.darkRitualTarget, dyingUnit, "origin")
        flashEffect(Abilities.replenishManaCaster, killer, "origin")
        killer.addMana(manaRestored)

    else if killer.getTypeId() == UNIT_VAMPIRE and killer.isAlive()
        let hpBonus = (dyingUnit.getMaxHP() / 10).toInt()
        killer.setMaxHP(killer.getMaxHP().toInt() + hpBonus, true)
        flashEffect(Abilities.aIsmTarget, killer, "origin")

    else if killer.getTypeId() == UNIT_VAMPIRE_LORD and killer.isAlive()
        let hpBonus = (dyingUnit.getMaxHP() / 20).toInt()
        killer.setMaxHP(killer.getMaxHP().toInt() + hpBonus, true)
        flashEffect(Abilities.aIsmTarget, killer, "origin")

    else if dyingUnit.getTypeId() == UNIT_WISP
        flashEffect(Units.wispExplode, dyingUnit.getPos())

    else if killer.getTypeId() == UNIT_TRAPPER
        and killer.getAbilityCooldownRemaining(ABIL_BERSERK) <= 0
        killer.issueImmediateOrderById(OrderIds.berserk)

    else if dyingUnit.getTypeId() == UNIT_MOUNTAIN_GIANT
        // Log.debug("MG DEAD")
        forUnitsInRange(dyingUnit.getPos(), 1500) (unit u) ->
            if u.isAlive() and u.isEnemyOf(dyingUnit)
                // Log.debug("Reordering " + u.getName())
                u.issuePointOrder("attack", CENTER)

    else if killer.getTypeId() == UNIT_WARMONGER and killer.hasAbility(ABIL_RAMPAGE)
        if not killer.hasAbility(BUFF_RAMPAGE)
            Log.debug("reset rampage")
            killer.setAbilityLevel(ABIL_RAMPAGE, 1)
        killer.issueImmediateOrderById(OrderIds.battleroar)
        Log.debug("Rampage lvl : " + IncUnitAbilityLevel(killer, ABIL_RAMPAGE).toString())

    else if killer.getTypeId() == UNIT_BERSERKER
        if not killer.hasAbility(BUFF_KILLING_SPREE)
            killer.setAbilityLevel(ABIL_KILLING_SPREE, 1)
        killer.issueImmediateOrderById(OrderIds.roar)
        killer.incAbilityLevel(ABIL_KILLING_SPREE)

function getBounty(unit dyingUnit) returns int
    return (dyingUnit.getPointValue() * gameConfig.getBountyMultiplier()).toInt()

function createBountyTag(unit dyingUnit, player killerOwner)
    createTTEx(
        dyingUnit.getPos3Real(),
        "+" + getBounty(dyingUnit).toString(),
        8,
        colorA(255, 0, 0, 255),
        killerOwner
    )
    ..setVelocity(0.0, 0.03)
    ..setFadepoint(1.5)
    ..setLifespan(2.0)
    ..setPermanent(false)

function spawnSpeedBanner(vec2 pos, player winner)
    flashEffect(Abilities.levelupcaster, pos, 2)
    createUnit(winner.getDummyPlayer(0), UNIT_SPEED_BANNER, pos, 270..asAngleDegrees())

function computeSpeedBannerPos(SpawnZone sp1, SpawnZone sp2) returns vec2
    let pos1 = sp1.spawnRect.getCenter()
    let pos2 = sp2.spawnRect.getCenter()
    let direction = pos1.angleTo(pos2)
    let dist = pos1.distanceTo(pos2) / 2
    let middle = pos1.polarOffset(direction, dist)
    return middle

public function checkIfPlayerDefeated(PlayerData pData, player killerOwner)
    if pData.spawnedUnits.isEmpty()
        let matchUpWinner = roundController.currentRound.getOpponent(pData._p)
        if matchUpWinner != null
            // Trying to fix taunted units being stuck
            // nullTimer() ->
            //     forUnitsOfPlayer(matchUpWinner) (unit u) ->
            //         if not u.isType(UNIT_TYPE_PEON) and not u.isType(UNIT_TYPE_STRUCTURE)
            //             u.issuePointOrder("attack", CENTER)

        if matchUpWinner == killerOwner
            if roundController.currentRound instanceof NormalRound
                let sp1 = playerToArmySpawner.get(matchUpWinner).spawnZone
                let sp2 = playerToArmySpawner.get(pData._p).spawnZone
                let middle = computeSpeedBannerPos(sp1, sp2)
                var hasSpawned = false
                // TODO: probably doesn't work
                forUnitsInRange(middle, 500) (unit u) ->
                    if u.getTypeId() == UNIT_SPEED_BANNER
                        hasSpawned = true
                if not hasSpawned
                    spawnSpeedBanner(middle, matchUpWinner)

                nullTimer() ->
                    forUnitsOfPlayer(matchUpWinner) (unit u) ->
                        if not u.isType(UNIT_TYPE_PEON) and not u.isType(UNIT_TYPE_STRUCTURE)
                            // u.issuePointOrder("attack", CENTER)
                            u.issuePointOrder("attack", middle)
                            BlzQueuePointOrderById(u, OrderIds.attack, CENTER.x, CENTER.y)

            else if roundController.currentRound instanceof FinalRound
                (roundController.currentRound castTo FinalRound).looser = pData._p

        roundController.currentRound.roundParticipant.remove(pData._p)

        let winner = killerOwner == ALTAR_PLAYER ? pData._p : killerOwner

        if roundController.currentRound.roundParticipant.size() == 1
            onLastArmyRemaining.execute()
        if roundController.currentRound.roundParticipant.isEmpty()
            onAllUnitDead.execute(winner)


public function initUnitDeathTrigger()
    OnRoundStart.add() (Round round) ->
        pDatas.forEach() (player key, PlayerData pData) ->
            if pData.buildingList.size() <= 0
                roundController.currentRound.roundParticipant.remove(pData._p)

    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
    ..addAction() ->
        let killer = EventData.getKillingUnit()
        let killerOwner = killer.getOwner().getTruePlayerFromDummy()
        let dyingUnit = EventData.getDyingUnit()

        let pData = pDatas.get(dyingUnit.getOwner().getTruePlayerFromDummy())

        // Is a building
        if BTBuildingData.unitIdToDataMap.has(dyingUnit.getTypeId())
            pData.subArmyPoints(BTBuildingData.unitIdToDataMap.get(dyingUnit.getTypeId()).buildingArmyPoints)
            pData.buildingList.remove(dyingUnit)
            if ItemStockHandler.hasUnit(dyingUnit)
                destroy ItemStockHandler.unitToItemStockMap.get(dyingUnit)
            if playerToArmyPreviewer.has(dyingUnit.getOwner())
                playerToArmyPreviewer.get(dyingUnit.getOwner()).shouldRefresh = true
        else if dyingUnit.getPointValue() > 0

            // Add blood points bounty
            if killerOwner != ALTAR_PLAYER
                and roundController.currentRound instanceof NormalRound
                and killerOwner != dyingUnit.getOwner()
                and not IsUnitIllusion(dyingUnit)
                if dyingUnit.getPointValue() > 0
                    if dyingUnit.getOwner() != killerOwner and killer != null
                        pDatas.get(killerOwner).addBounty(getBounty(dyingUnit))
                        createBountyTag(dyingUnit, killerOwner)

            if pData.spawnedUnits.has(dyingUnit)
                pData.spawnedUnits.remove(dyingUnit)
                checkIfPlayerDefeated(pData, killerOwner)
            else
                Log.debug("Cannot remove " + dyingUnit.getName())

            // Custom Action affecting killer unit
            customAction(killer, dyingUnit, pData)
