package UnitDeathTrigger

// Local imports:
import ArmySpawner
import GameConfig
import PlayerExtension
import RoundController
import ClosureTimers
import LocalObjectIDs
import Assets
import OrderIds
import ItemStockHandler
import ClosureForGroups

function customAction(unit killer, unit dyingUnit, PlayerData pData)

    if dyingUnit.getTypeId() == UNIT_PALADIN_1
        or dyingUnit.getTypeId() == UNIT_PALADIN_2
        or dyingUnit.getTypeId() == UNIT_PALADIN_3
        doAfter(1) ->
            // if roundController.currentRound.
            flashEffect(Abilities.resurrecttarget, dyingUnit.getPos())
            let u = createUnit(dyingUnit.getOwner(), UNIT_GHOST_PALADIN,
                dyingUnit.getPos(), dyingUnit.getFacingAngle())
            ..issuePointOrder("attack", CENTER)
            if u == null
                Log.info("Unknown unit spawned for" + dyingUnit.getOwner().getName())
            else
                pData.spawnedUnits.push(u)

    else if dyingUnit.getTypeId() == UNIT_GHOST_PALADIN
        flashEffect(Abilities.holyBoltSpecialArt, dyingUnit.getPos())
        dyingUnit.remove()

    else if killer.getTypeId() == UNIT_DEATH_KNIGHT and killer.isAlive()
        let manaRestored = dyingUnit.getMaxHP() / 10
        flashEffect(Abilities.darkRitualTarget, dyingUnit, "origin")
        flashEffect(Abilities.replenishManaCaster, killer, "origin")
        killer.addMana(manaRestored)

    else if killer.getTypeId() == UNIT_VAMPIRE and killer.isAlive()
        let hpBonus = (dyingUnit.getMaxHP() / 10).toInt()
        killer.setMaxHP(killer.getMaxHP().toInt() + hpBonus, true)
        flashEffect(Abilities.aIsmTarget, killer, "origin")

    else if killer.getTypeId() == UNIT_VAMPIRE_LORD and killer.isAlive()
        let hpBonus = (dyingUnit.getMaxHP() / 20).toInt()
        killer.setMaxHP(killer.getMaxHP().toInt() + hpBonus, true)
        flashEffect(Abilities.aIsmTarget, killer, "origin")

    else if dyingUnit.getTypeId() == UNIT_WISP
        flashEffect(Units.wispExplode, dyingUnit.getPos())

    else if killer.getTypeId() == UNIT_TRAPPER
        and killer.getAbilityCooldownRemaining(ABIL_BERSERK) <= 0
        killer.issueImmediateOrderById(OrderIds.berserk)

    else if dyingUnit.getTypeId() == UNIT_MOUNTAIN_GIANT
        forUnitsInRange(dyingUnit.getPos(), 600) (unit u) ->
            u.issuePointOrder("attack", CENTER)

function getBounty(unit dyingUnit) returns int
    return (dyingUnit.getPointValue() * gameConfig.getBountyMultiplier()).toInt()

function createBountyTag(unit dyingUnit, player killerOwner)
    createTTEx(
        dyingUnit.getPos3Real(),
        "+" + getBounty(dyingUnit).toString(),
        8,
        colorA(255, 0, 0, 255),
        killerOwner
    )
    ..setVelocity(0.0, 0.03)
    ..setFadepoint(1.5)
    ..setLifespan(2.0)
    ..setPermanent(false)

public function checkIfPlayerDefeated(PlayerData pData)
    if pData.spawnedUnits.isEmpty()
        let matchUpWinner = roundController.currentRound.getOpponent(pData._p)
        if matchUpWinner != null
            forUnitsOfPlayer(matchUpWinner) (unit u) ->
                u.issuePointOrder("attack", CENTER)

        roundController.currentRound.roundParticipant.remove(pData._p)
        roundController.currentRound.loosers.add(pData._p)

        // Log.info(pData._p.getName() + " has been eliminated")

        if roundController.currentRound.roundParticipant.size() == 1
            onLastArmyRemaining.execute()
        if roundController.currentRound.roundParticipant.isEmpty()
            onAllUnitDead.execute(pData._p)


public function initUnitDeathTrigger()
    OnRoundStart.add() (Round round) ->
        pDatas.forEach() (player key, PlayerData pData) ->
            if pData.buildingList.size() <= 0
                roundController.currentRound.roundParticipant.remove(pData._p)
                // Log.info(pData._p.getName() + " has been eliminated")

    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
    ..addAction() ->
        let killer = EventData.getKillingUnit()
        let killerOwner = killer.getOwner().getTruePlayerFromDummy()
        let dyingUnit = EventData.getDyingUnit()

        let pData = pDatas.get(dyingUnit.getOwner().getTruePlayerFromDummy())

        // Is a building
        if BTBuildingData.unitIdToDataMap.has(dyingUnit.getTypeId())
            pData.subArmyPoints(BTBuildingData.unitIdToDataMap.get(dyingUnit.getTypeId()).buildingArmyPoints)
            pData.buildingList.remove(dyingUnit)
            if ItemStockHandler.hasUnit(dyingUnit)
                destroy ItemStockHandler.unitToItemStockMap.get(dyingUnit)
        else if dyingUnit.getPointValue() > 0

            // Add blood points bounty
            if killerOwner != ALTAR_PLAYER
                and roundController.currentRound instanceof NormalRound
                and killerOwner != dyingUnit.getOwner()
                if dyingUnit.getPointValue() > 0
                    if dyingUnit.getOwner() != killerOwner and killer != null
                        pDatas.get(killerOwner).addBounty(getBounty(dyingUnit))
                        createBountyTag(dyingUnit, killerOwner)

            if pData.spawnedUnits.has(dyingUnit)
                pData.spawnedUnits.remove(dyingUnit)
                checkIfPlayerDefeated(pData)
            else
                Log.info("Cannot remove " + dyingUnit.getName())

            // Custom Action affecting killer unit
            customAction(killer, dyingUnit, pData)
