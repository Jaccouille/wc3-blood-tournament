package Round

// Standard libs imports:
import ClosureForGroups
import public ClosureKeyPresses
import public LinkedList
import ClosureTimers

// Third party imports:
import public Lodash

// Local imports:
import OrderBlocker
import public PlayerData
import ScoreBoard
import public GameConstants
import SpawnZone
import ArmySpawner


// Distance between units positioned in formation mode
@configurable constant FORMATION_WIDTH = 120.
@configurable constant FORMATION_HEIGHT = 80.

// Max number of unit per line
@configurable constant UNIT_PER_LINE = 4

@configurable constant UNIT_CAP = 80


interface LastArmyRemaining
    abstract function execute()

public LastArmyRemaining onLastArmyRemaining

interface AllUnitDead
    abstract function execute(player winner)

public AllUnitDead onAllUnitDead

interface OnRoundStart
    function onStart(Round round)

OnRoundStart onStartListener

public function onRoundStart(OnRoundStart onStart)
    onStartListener = onStart

interface OnRoundFinish
    function onFinish(Round round)

OnRoundFinish onFinishListener

public function onRoundFinish(OnRoundFinish onFinish)
    onFinishListener = onFinish

public abstract class Round
    LinkedList<player> roundParticipant = new LinkedList<player>
    int goldReward = 0
    int bloodPointReward = 0
    constant matchUp = new LinkedList<Pair<int, int>>
    player winner

    function addMatchup(Pair<int, int> matchUp)
        this.matchUp.add(matchUp)
        this.roundParticipant.add(players[matchUp.a], players[matchUp.b])

    function start()
        // Log.info("[Round][start]")
        onStartListener.onStart(this)
        doBeforeSpawn()
        spawnArmies()
        doAfterSpawn()

    function doBeforeSpawn()
        onOrder.disable()
        preventOrder = false

    function doAfterSpawn()
        doAfter(2) ->
            forUnitsAll() (unit u) ->
                if u.getMoveSpeed() > 1 and not u.isType(UNIT_TYPE_PEON)
                    u.unpause()
                    u.issuePointOrder("attack", CENTER)
            nullTimer() ->
                preventOrder = true
                onOrder.enable()

    function setRewards(int gold, int bloodPoint)
        this.goldReward = gold
        this.bloodPointReward = bloodPoint

    function finish(player winner)
        this.winner = winner
        onFinishListener.onFinish(this)

    abstract function spawnArmies()

    // Todo: rename
    function spawnArmy(SpawnZone spawnZone, LinkedList<LinkedList<int>> army, player _p)
        // Log.info("[Round][spawnArmy]")
        if roundParticipant.has(_p) == false
            roundParticipant.add(_p)

        new ArmySpawner(_p)
            ..setArmy(army)
            ..setSpawnZone(spawnZone)
            ..spawnArmy()

public class NormalRound extends Round
    override function spawnArmies()
        var zoneIdx = 0
        for contestantPair in matchUp
            let p1 = players[contestantPair.a]
            let p2 = players[contestantPair.b]

            scoreBoardEntries.get("ArmyPoints").setEntry(p1, "0", "")
            scoreBoardEntries.get("ArmyPoints").setEntry(p2, "0", "")
            scoreBoardEntries.get("BloodPoints").setEntry(p1, "0", "")
            scoreBoardEntries.get("BloodPoints").setEntry(p2, "0", "")

            pDatas.get(p1).parseArmy()
            pDatas.get(p2).parseArmy()
            spawnArmy(spawnZones.get(zoneIdx), pDatas.get(p1).army, p1)
            spawnArmy(spawnZones.get(zoneIdx + 1), pDatas.get(p2).army, p2)
            zoneIdx += 2

constant FINAL_ROUND_WEST_ZONE_IDX = 8
constant FINAL_ROUND_EAST_ZONE_IDX = 9

public class FinalRound extends Round
    override function spawnArmies()
        for contestantPair in matchUp
            let p1 = players[contestantPair.a]
            let p2 = players[contestantPair.b]

            scoreBoardEntries.get("ArmyPoints").setEntry(p1, "0", "")
            scoreBoardEntries.get("ArmyPoints").setEntry(p2, "0", "")
            scoreBoardEntries.get("BloodPoints").setEntry(p1, "0", "")
            scoreBoardEntries.get("BloodPoints").setEntry(p2, "0", "")

            pDatas.get(p1).parseArmy()
            pDatas.get(p2).parseArmy()

            spawnArmy(spawnZones.get(FINAL_ROUND_WEST_ZONE_IDX), pDatas.get(p1).army, p1)
            spawnArmy(spawnZones.get(FINAL_ROUND_EAST_ZONE_IDX), pDatas.get(p2).army, p2)

            let msg = "{0} {1} units VS {2} {3} units"
                .format(
                    p1.getNameColored(true), pDatas.get(p1).spawnedUnits.size().toString(),
                    p2.getNameColored(true), pDatas.get(p2).spawnedUnits.size().toString()
                )
            Log.info(msg)
