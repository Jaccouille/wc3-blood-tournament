package Round

// Standard libs imports:
import ClosureForGroups
import public ClosureKeyPresses
import public LinkedList

// Third party imports:
import public Lodash

// Local imports:
import ArmySpawner
import public PlayerData
import ScoreBoard
import public GameConstants

interface OnRoundStart
    function onStart(Round round)

OnRoundStart onStartListener

public function onRoundStart(OnRoundStart onStart)
    onStartListener = onStart

interface OnRoundFinish
    function onFinish(Round round)

OnRoundFinish onFinishListener

public function onRoundFinish(OnRoundFinish onFinish)
    onFinishListener = onFinish

public class Round
    int goldReward = 0
    int bloodPointReward = 0
    constant matchUp = new LinkedList<Pair<int, int>>
    player winner

    function addMatchup(Pair<int, int> matchUp)
        this.matchUp.add(matchUp)

    function start()
        onStartListener.onStart(this)
        spawnArmies()

    function spawnArmies()
        var zoneIdx = 0
        for contestantPair in matchUp
            let p1 = players[contestantPair.a]
            let p2 = players[contestantPair.b]

            scoreBoardEntries.get("ArmyPoints").setEntry(p1, "0", "")
            scoreBoardEntries.get("ArmyPoints").setEntry(p2, "0", "")
            scoreBoardEntries.get("BloodPoints").setEntry(p1, "0", "")
            scoreBoardEntries.get("BloodPoints").setEntry(p2, "0", "")

            pData.get(p1).parseArmy()
            pData.get(p2).parseArmy()
            spawnArmy(spawnZones.get(zoneIdx), pData.get(p1).army, p1)
            spawnArmy(spawnZones.get(zoneIdx + 1), pData.get(p2).army, p2)
            forUnitsAll() (unit u) ->
                if u.getMoveSpeed() > 1 and not u.isType(UNIT_TYPE_PEON)
                    u.issuePointOrder("move", CENTER)
            zoneIdx += 2

    function setRewards(int gold, int bloodPoint)
        this.goldReward = gold
        this.bloodPointReward = bloodPoint

    function finish(player winner)
        this.winner = winner
        onFinishListener.onFinish(this)
