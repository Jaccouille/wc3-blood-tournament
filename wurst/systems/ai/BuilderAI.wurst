package BuilderAI

// Standard libs imports:
import ClosureTimers
import HashMap
import LinkedListModule
import ClosureEvents

// Local imports:
import GameConfig
import GameStates
import IDListConstant
import LocalObjectIDs
import Players
import Round
import ChatCommands
import TerrainUtils
import ItemStockHandler
import BuffObjEditing
import Assets

let playerToBuilderAI = new HashMap<player, BuilderAI>
let botEnabled = compiletime(createDummyBuffObject("Bot enabled", "This player is being controlled by a bot",
     Icons.bTNMagicalSentry, Abilities.magicSentryCaster, "overhead"))

let BUILDER_OPTION = new HashMap<int, LinkedList<int>>
    ..put(UNIT_HUMAN_BUILDER, asList(
        BUILDING_FOOTMAN,
        BUILDING_ELVEN_ARCHER,
        BUILDING_KNIGHT,
        BUILDING_PRIEST,
        BUILDING_PALADIN,
        BUILDING_SORCERESS,
        BUILDING_SWORD_MASTER,
        BUILDING_ELVEN_MAGE,
        BUILDING_RIFLEMAN
    ))
    ..put(UNIT_ORC_BUILDER, asList(
        BUILDING_GRUNT,
        BUILDING_HEADHUNTER,
        BUILDING_RAIDER,
        BUILDING_WITCH_DOCTOR,
        BUILDING_SHAMAN,
        BUILDING_OGRE,
        BUILDING_WARMONGER,
        BUILDING_FARSEER,
        BUILDING_BLADE_MASTER,
        BUILDING_SHADOW_HUNTER,
        BUILDING_DEMOLISHER
    ))
    ..put(UNIT_UNDEAD_BUILDER, asList(
        BUILDING_ZOMBIE,
        BUILDING_SKELETAL_ARCHER,
        BUILDING_NECROMANCER,
        BUILDING_DEATH_KNIGHT,
        BUILDING_BANSHEE,
        BUILDING_ABOMINATION,
        BUILDING_VAMPIRE,
        BUILDING_CRYPT_LORD,
        BUILDING_ARCHIMONDE
    ))
    ..put(UNIT_NIGHT_ELF_BUILDER, asList(
        BUILDING_ARCHER,
        BUILDING_HUNTRESS,
        BUILDING_DRYAD,
        BUILDING_MOUNTAIN_GIANT,
        BUILDING_SPECTRE,
        BUILDING_AVATAR_OF_VENGEANCE,
        BUILDING_DRUID_TALON,
        BUILDING_DRUID_CLAW,
        BUILDING_DAEMON_HUNTER,
        BUILDING_PRIESTESS_OF_THE_MOON,
        BUILDING_BALLISTA
    ))

public let UPGRADE_OPTIONS = new HashMap<int, LinkedList<int>>
    ..put(BUILDING_KNIGHT, asList(BUILDING_CRUSADER))
    ..put(BUILDING_HEADHUNTER, asList(BUILDING_TRAPPER))
    ..put(BUILDING_ZOMBIE, asList(BUILDING_PLAGUE_BEARER))
    ..put(BUILDING_CRYPT_FIEND, asList(BUILDING_NERUBIAN))
    ..put(BUILDING_ARCHER, asList(BUILDING_NE_RANGER))

class BuilderAI
    use LinkedListModule
    player _player
    PlayerData pData
    CallbackPeriodic cb
    boolean isEnabled = false
    boolean enableForHumanPlayer = false

    construct(player _player)
        this._player = _player
        playerToBuilderAI.put(_player, this)
        pData = pDatas.get(_player)

    function pickBuilder()
        if pData.builder == null
            pData.racePicker.issueImmediateOrder(UnitId2String(BUILDER_LIST.getRandomElement()))

    private function tryToBuyItems(LinkedList<unit> buildingList)
        let buildingWithItemsToBuy = buildingList
            .lodashFilter(building -> ItemStockHandler.unitToItemStockMap.has(building))
        if buildingWithItemsToBuy.size() > 0
            let randomBuilding = buildingWithItemsToBuy.getRandomElement()
            let stockHandler = ItemStockHandler.unitToItemStockMap.get(randomBuilding)
            var choseUpgrade = false
            while not choseUpgrade
                Log.debug("name = " + randomBuilding.getName() + " for player " + randomBuilding.getOwner().getName())
                Log.debug("name = " + randomBuilding.getName() + " size: " + " " + unitItemSold.get(randomBuilding.getTypeId()).size().toString())
                let randomItem = unitItemSold.get(randomBuilding.getTypeId()).getRandomElement()
                if stockHandler.hasItem(randomItem)
                    randomBuilding.issueImmediateOrderById(randomItem)
                    choseUpgrade = true

    // TODO: learn how to do AI
    function startAI()
        isEnabled = true
        pData.racePicker.addAbility(botEnabled.abilId)
        pickBuilder()

        cb = doPeriodically(2) (CallbackPeriodic cb) ->
            if not isEnabled
                destroy cb

            // Try to upgrade existing units
            if pData._p.getLumber() >= 50 and pData.buildingList.size() > 0
                let buildingList = pData.buildingList.copy()

                // Get existing building that can be upgraded
                let upgradableBuildings = buildingList
                    .lodashFilter(building -> UPGRADE_OPTIONS.has(building.getTypeId()))

                // Try to upgrade building, if not, try to buy items
                if upgradableBuildings.size() > 0
                    let unitToUpgrade = upgradableBuildings.getRandomElement()
                    let upgradeChoice = UPGRADE_OPTIONS.get(unitToUpgrade.getTypeId()).getRandomElement()

                    if OrderId2StringBJ(upgradeChoice)  != ""
                        unitToUpgrade.issueImmediateOrder(OrderId2StringBJ(upgradeChoice))
                else
                    tryToBuyItems(buildingList)


            if pData.builder != null and pData._p.getGold() >= 100
                let unitToBuild = BUILDER_OPTION.get(pData.builder.getTypeId()).getRandomElement()
                var pos = pData.buildingRect.randomPoint()
                while pos.isTerrainPathable(PATHING_TYPE_BUILDABILITY)
                    pos = pData.buildingRect.randomPoint()
                BlzQueueBuildOrderById(pData.builder, unitToBuild, pos.x, pos.y)
            // trade blood points for gold
            else if pData.builder != null and pData._p.getLumber() >= 1500
                pData.builder.issueImmediateOrder("berserk")



    function stopAI()
        pData.racePicker.removeAbility(botEnabled.abilId)
        BlzUnitForceStopOrder(pData.builder, true)
        isEnabled = false

    function toggleAI()
        if isEnabled and enableForHumanPlayer
            enableForHumanPlayer = false
            stopAI()
            if _player.isHuman()
                printTimed("Bot controller disabled for {0}".format(_player.getNameColored()), 5)
            Log.debug("stop builder AI for " + _player.getName())
        else
            enableForHumanPlayer = true
            startAI()
            if _player.isHuman()
                printTimed("Bot controller enabled for {0}".format(_player.getNameColored()), 5)
            Log.debug("start builder AI for " + _player.getName())

function startAI()
    Log.debug("Start builder AI")
    for aiInstance in BuilderAI
        // TODO: only enable if player isn't bot
        if aiInstance.enableForHumanPlayer and not aiInstance.isEnabled
            aiInstance.startAI()

function stopAI()
    Log.debug("Stop builder AI")
    for aiInstance in BuilderAI
        if aiInstance.isEnabled
            aiInstance.stopAI()

function toggleAI()
    Log.debug("Toggle builder AI")
    for aiInstance in BuilderAI
        if not aiInstance._player.isIngame()
            aiInstance.toggleAI()


init
    GameStates.gameplay.onEnter() state ->
        // TODO: enable for computer by default
        if gameConfig.isBotAIEnabled()
            ALL_PLAYERS.forEach() (player _player) ->
                let aiInstance = new BuilderAI(_player)
                if not _player.isIngame()
                    aiInstance.startAI()
                    aiInstance.enableForHumanPlayer = true

            // TODO: gameconfig parameters
            OnRoundFinish.add() (Round round) ->
                if round instanceof NormalRound
                    startAI()

            OnRoundStart.add() (Round round) ->
                stopAI()


        EventListener.add(EVENT_PLAYER_LEAVE) ->
            if gameConfig.isBotAIEnabled()
                playerToBuilderAI.get(GetTriggerPlayer()).toggleAI()

    registerCommandAll("bot") (triggerPlayer, args) ->
        // let aiInstance = playerToBuilderAI.get(triggerPlayer)
        // aiInstance.enableForHumanPlayer = aiInstance.enableForHumanPlayer == false ? true : false
        playerToBuilderAI.get(triggerPlayer).toggleAI()
