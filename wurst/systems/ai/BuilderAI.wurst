package BuilderAI

// Standard libs imports:
import ClosureTimers
import HashMap
import LinkedListModule

// Local imports:
import GameConfig
import GameStates
import IDListConstant
import LocalObjectIDs
import Players
import Round
import Toolkit

let playerToBuilderAI = new HashMap<player, BuilderAI>







let BUILDER_OPTION = new HashMap<int, LinkedList<int>>
    ..put(UNIT_HUMAN_BUILDER, asList(
        BUILDING_FOOTMAN,
        BUILDING_ELVEN_ARCHER,
        BUILDING_KNIGHT,
        BUILDING_PRIEST,
        BUILDING_SORCERESS,
        BUILDING_MAGE,
        BUILDING_SWORD_MASTER,
        BUILDING_ELVEN_MAGE,
        BUILDING_RIFLEMAN
    ))
    ..put(UNIT_ORC_BUILDER, asList(
        BUILDING_GRUNT,
        BUILDING_HEADHUNTER,
        BUILDING_SHAMAN,
        BUILDING_WARLOCK,
        BUILDING_RAIDER,
        BUILDING_OGRE,
        BUILDING_BLADE_MASTER,
        BUILDING_SHADOW_HUNTER,
        BUILDING_DEMOLISHER
    ))
    ..put(UNIT_UNDEAD_BUILDER, asList(
        BUILDING_ZOMBIE,
        BUILDING_CRYPT_FIEND,
        BUILDING_NECROMANCER,
        BUILDING_BANSHEE,
        BUILDING_ABOMINATION,
        BUILDING_VAMPIRE,
        BUILDING_CRYPT_LORD,
        BUILDING_DEATH_KNIGHT,
        BUILDING_ARCHIMONDE
    ))
    ..put(UNIT_NIGHT_ELF_BUILDER, asList(
        BUILDING_TREANT,
        BUILDING_SENTRY,
        BUILDING_ARCHER,
        BUILDING_DRUID_TALON,
        BUILDING_DRUID_CLAW_BEAR,
        BUILDING_WARDEN,
        BUILDING_DAEMON_HUNTER,
        BUILDING_PRIESTESS_OF_THE_MOON,
        BUILDING_BALLISTA
    ))

let UPGRADE_OPTION = new HashMap<int, LinkedList<int>>
    ..put(BUILDING_FOOTMAN, asList(BUILDING_ROYAL_GUARD))
    ..put(BUILDING_ELVEN_ARCHER, asList(BUILDING_RANGER))
    ..put(BUILDING_KNIGHT, asList(BUILDING_CRUSADER, BUILDING_PALADIN))
    ..put(BUILDING_PRIEST, asList(BUILDING_SPELL_BREAKER))
    ..put(BUILDING_SORCERESS, asList(BUILDING_SORCERESS_UPGRADE))
    ..put(BUILDING_MAGE, asList(BUILDING_ARCHMAGE))

    ..put(BUILDING_GRUNT, asList(BUILDING_BERSERKER))
    ..put(BUILDING_HEADHUNTER, asList(BUILDING_HEADHUNTER_BERSERKER, BUILDING_TRAPPER))
    ..put(BUILDING_SHAMAN, asList(BUILDING_SHAMAN))
    ..put(BUILDING_WARLOCK, asList(BUILDING_OCCULTIST))
    ..put(BUILDING_RAIDER, asList(BUILDING_RAIDER))
    ..put(BUILDING_OGRE, asList(BUILDING_OGRE))

    ..put(BUILDING_ZOMBIE, asList(BUILDING_GHOUL, BUILDING_REVENANT))
    ..put(BUILDING_CRYPT_FIEND, asList(BUILDING_NERUBIAN))
    ..put(BUILDING_NECROMANCER, asList(BUILDING_LICH))
    ..put(BUILDING_BANSHEE, asList(BUILDING_DARK_RANGER))
    ..put(BUILDING_ABOMINATION, asList(BUILDING_FLESH_GOLEM))
    ..put(BUILDING_VAMPIRE, asList(BUILDING_VAMPIRE_LORD))

    ..put(BUILDING_TREANT, asList(BUILDING_ANCIENT_PROTECTOR))
    ..put(BUILDING_SENTRY, asList(BUILDING_HUNTRESS, BUILDING_SPECTRE))
    ..put(BUILDING_ARCHER, asList(BUILDING_NE_RANGER))
    ..put(BUILDING_DRUID_TALON, asList(BUILDING_FURION))
    ..put(BUILDING_DRUID_CLAW_BEAR, asList(BUILDING_OWLBEAR))
    ..put(BUILDING_WARDEN, asList(BUILDING_AVATAR_OF_VENGEANCE))

class BuilderAI
    use LinkedListModule
    player _player
    PlayerData pData
    CallbackPeriodic cb
    boolean isEnabled = false
    boolean enableForHumanPlayer = false

    construct(player _player)
        this._player = _player
        playerToBuilderAI.put(_player, this)
        pData = pDatas.get(_player)

    function pickBuilder()
        if pData.builder == null
            pData.racePicker.issueImmediateOrder(UnitId2String(BUILDER_LIST.getRandomElement()))

    // TODO: learn how to do AI
    function startAI()
        isEnabled = true
        pickBuilder()

        cb = doPeriodically(2) (CallbackPeriodic cb) ->
            // Try to upgrade existing units
            if pData._p.getLumber() > 100
                let buildingList = pData.buildingList.copy()
                let upgradeOptions = buildingList
                    .lodashFilter(x -> UPGRADE_OPTION.has(x.getTypeId()))
                if upgradeOptions.size() > 0
                    let unitToUpgrade = upgradeOptions.getRandomElement()
                    let upgradeChoice = UPGRADE_OPTION.get(unitToUpgrade.getTypeId()).getRandomElement()
                    unitToUpgrade.issueImmediateOrder(OrderId2StringBJ(upgradeChoice))

            if pData.builder != null
                let unitToBuild = BUILDER_OPTION.get(pData.builder.getTypeId()).getRandomElement()
                let pos = pData.buildingRect.randomPoint()
                BlzQueueBuildOrderById(pData.builder, unitToBuild, pos.x, pos.y)
            if not isEnabled
                destroy cb

    function stopAI()
        BlzUnitForceStopOrder(pData.builder, true)
        isEnabled = false

    function toggleAI()
        if isEnabled and enableForHumanPlayer
            stopAI()
            Log.info("stop builder AI for " + _player.getName())
        else if enableForHumanPlayer
            startAI()
            Log.info("start builder AI for " + _player.getName())

function startAI()
    Log.debug("Start builder AI")
    for aiInstance in BuilderAI
        // TODO: only enable if player isn't bot
        if aiInstance.enableForHumanPlayer
            aiInstance.startAI()

function stopAI()
    Log.debug("Stop builder AI")
    for aiInstance in BuilderAI
        aiInstance.stopAI()

function toggleAI()
    Log.debug("Toggle builder AI")
    for aiInstance in BuilderAI
        if not aiInstance._player.isIngame()
            aiInstance.toggleAI()


init
    GameStates.gameplay.onEnter() state ->
        // TODO: enable for computer by default
        if gameConfig.isBotAIEnabled()
            ALL_PLAYERS.forEach() (player _player) ->
                let aiInstance = new BuilderAI(_player)
                if not _player.isIngame()
                    aiInstance.startAI()
                    aiInstance.enableForHumanPlayer = true

            // TODO: gameconfig parameters
            OnRoundFinish.add() (Round round) ->
                if round instanceof NormalRound
                    startAI()

            OnRoundStart.add() (Round round) ->
                stopAI()

    registerToolkitCommand("ai") (player triggerPlayer, LinkedList<string> arguments) ->
        let aiInstance = playerToBuilderAI.get(triggerPlayer)
        aiInstance.enableForHumanPlayer = aiInstance.enableForHumanPlayer == false ? true : false
        playerToBuilderAI.get(triggerPlayer).toggleAI()
