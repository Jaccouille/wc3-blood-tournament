package ScoreBoard

// Standard libs imports:
import ClosureEvents
import ClosureTimers
import HashMap
import LinkedListModule
import Icons

// Local imports:
import Boards
import ColorUtils
import GameConstants
import Players
import public PlayerData
import ArmySpawner
import PlayerExtension

let KILL_COLUMN_WIDTH = 0.055
let STAT_LABEL_WIDTH = 0.1
let NAME_LABEL_WIDTH = 0.18
let LEVEL_LABEL_WIDTH = 0.07

let iconPlayerInGame = Icons.bTNSelectHeroOn

public let scoreBoardEntries =  new HashMap<string, ScoreBoardColumnEntries>

class BoardColumn
    string text
    string icon
    real width
    color color

    construct(string text, string icon, real width, color color)
        this.text = text
        this.icon = icon
        this.width = width
        this.color = color

// ScoreBoard category listed
let boardColumns = asList(
    new BoardColumn("PlayerName"   , null , NAME_LABEL_WIDTH  , HIGHLIGHT_COLOR ),
    new BoardColumn("ArmyPoints"  , null , LEVEL_LABEL_WIDTH , HIGHLIGHT_COLOR ),
    new BoardColumn("BloodPoints" , null , LEVEL_LABEL_WIDTH , HIGHLIGHT_COLOR )
)

public class ScoreBoardColumnEntries
    use LinkedListModule
    static int column = 0
    BoardColumn boardColumn
    int entryColumn = 0

    static function clear()
        for elem in ScoreBoardColumnEntries
            scoreBoardEntries.remove(elem.boardColumn.text)
            destroy elem

        scoreBoard.board.clear()

    static function loadBuildLayout()
        column = 0
        // TODO: Handle dynamic player
        var rowCount = ALL_PLAYERS.size() * 1

        // Trying to display a multiboard with 0 row result in wc3 crashing
        if rowCount == 0
            rowCount = 1
        if scoreBoard == null
            Log.debug("Board null")
            scoreBoard = new Board(rowCount, boardColumns.size())
        else
            scoreBoard.board.clear()
            scoreBoard.board.setRowCount(rowCount)

        Log.debug("scoreBoardEntries size :" + scoreBoardEntries.size().toString())
        for boardColumn in boardColumns
            scoreBoardEntries.put(boardColumn.text, new ScoreBoardColumnEntries(ALL_PLAYERS))

    static function orderRowsForNextRound(LinkedList<player> playerList)
        var row = 1

        if scoreBoard == null
            loadRoundLayout(playerList)
        else
            playerList.forEach() (player _p) ->
                let currentRow = scoreBoard.getPlayerPos(_p.getName(true))
                if currentRow != row
                    scoreBoard.swapRow(row, currentRow)
                scoreBoard.board.setItemValueColor(row, 0, _p.getColor().toColor().withAlpha(0))
                row += 2
            let expectedRow = playerList.size() * 2
            if scoreBoard.board.getRowCount() > expectedRow
                scoreBoard.board.setRowCount(expectedRow)

    static function loadRoundLayout(LinkedList<player> playerList)
        column = 0
        // TODO: Handle dynamic player
        var rowCount = playerList.size() * 2

        // Trying to display a multiboard with 0 row result in wc3 crashing
        if rowCount == 0
            rowCount = 1
        if scoreBoard == null
            scoreBoard = new Board(rowCount, boardColumns.size())
            for boardColumn in boardColumns
                scoreBoardEntries.put(boardColumn.text, new ScoreBoardColumnEntries(playerList))
            scoreBoard.board.display(true)
        else
            ScoreBoardColumnEntries.orderRowsForNextRound(playerList)


    construct(LinkedList<player> playerList)
        this.boardColumn = boardColumns.get(column)
        this.entryColumn = boardColumns.indexOf(boardColumn)
        initRow(0, boardColumn.text, boardColumn.icon)

        var value = "0"
        string icon = null
        if boardColumn.text == "PlayerName"
            value = "PlayerName"

        initForPlayer(value, icon, playerList)
        column++

    function initForPlayer(string value, string icon, LinkedList<player> playerList)
        var row = 0
        playerList.forEach() (player _player) ->
            row++
            if value == "PlayerName"
                initRow(row, _player.getName(), iconPlayerInGame)
                scoreBoard.setColor(row, entryColumn, _player.getColor().toColor())
                // TODO: uncomment later maybe
                // In case player leave before board Init
                // if _player.isIngame()
                //     scoreBoard.setColor(row, entryColumn, _player.getColor().toColor())
                // else
                //     scoreBoard.setColor(row, entryColumn, COLOR_GRAY)
            else
                initRow(row, value, icon)
            row++
            if row % 4 == 0
                this.initEmptyRow(row)
            else
                this.initVersusRow(row)

    function initVersusRow(int row)
        initRow(row, column == 0 ? "          VS" : "", null)

    function initEmptyRow(int row)
        initRow(row, "", null)

    function initRow(int row, string value, string icon)
        scoreBoard.getItem(row, entryColumn)
            ..setWidth(boardColumn.width)
            ..setValueColor(boardColumn.color.withAlpha(0))
        scoreBoard.setNewItem(row, entryColumn, value, icon)
        scoreBoard.setItem(row, entryColumn, value, icon)

        if row != 0 and boardColumn.color == HIGHLIGHT_COLOR
            scoreBoard.setColor(row, entryColumn, COLOR_WHITE.withoutAlpha())

    function setEntry(player _player, string value, string icon)
        let entryRow = scoreBoard.getPlayerPos(_player.getName())

        scoreBoard.setValue(entryRow, entryColumn, value)
        if icon != null
            scoreBoard.setIcon(entryRow, entryColumn, icon)

    function setEntryIcon(player _player, string icon)
        let entryRow = scoreBoard.getPlayerPos(_player.getName())
        scoreBoard.setIcon(entryRow, entryColumn, icon)

    function setEntryColor(player _player, color color)
        let entryRow = scoreBoard.getPlayerPos(_player.getName())
        scoreBoard.setColor(entryRow, entryColumn, color)

    function addValue(player _player, int value)
        let playerRow = scoreBoard.getPlayerPos(_player.getName())
        let currentValue = scoreBoard.getValue(playerRow, entryColumn)
        let newValue = (currentValue.toInt() + value)
        setEntry(_player, newValue.toString(), null)

public var BOARD_TITLE_PREFIX = ""


public function setBoardTitle(string title)
    scoreBoard.board.setTitle(title)

public function initScoreBoard()
    scoreBoard.board.setTitle("Game init")

    // Scoreboard timer refresh
    doPeriodically(1) (CallbackPeriodic cb) ->
        scoreBoard.board.setTitle(BOARD_TITLE_PREFIX)

    EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
        let owner = EventData.getKillingUnit().getOwner()
        let dyingUnit = EventData.getDyingUnit()
        let pData = pDatas.get(dyingUnit.getOwner().getTruePlayerFromDummy())
        if owner != ALTAR_PLAYER
            // Is a building
            if armyMap.has(dyingUnit.getTypeId())
                scoreBoardEntries.get("ArmyPoints")
                    .addValue(pData._p, -armyMap.get(dyingUnit.getTypeId()).pointValue)
            else
                scoreBoardEntries.get("BloodPoints")
                    .addValue(pData._p, dyingUnit.getPointValue())

    EventListener.add(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH) ->
        let u = EventData.getTriggerUnit()
        let pData = pDatas.get(u.getOwner())

        if armyMap.has(u.getTypeId())
            scoreBoardEntries.get("ArmyPoints")
                .addValue(pData._p, armyMap.get(u.getTypeId()).pointValue)
