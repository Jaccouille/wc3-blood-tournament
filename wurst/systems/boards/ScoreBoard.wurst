package ScoreBoard

// Standard libs imports:
import ClosureTimers
import HashMap
import Icons
import LinkedListModule

// Local imports:
import Boards
import ColorUtils
import GameStates
import Players
import public PlayerData

let KILL_COLUMN_WIDTH = 0.055
let STAT_LABEL_WIDTH = 0.1
let NAME_LABEL_WIDTH = 0.18
let COL_LABEL_WIDTH = 0.06

let COL_ARMY_PTS = "ArmyPts"
let COL_BLOOD_PTS = "BloodPts"
let COL_TOTAL_BLOOD_PTS = "Total BP"

let iconPlayerInGame = Icons.bTNSelectHeroOn

public let scoreBoardEntries =  new HashMap<string, ScoreBoardColumnEntries>

class BoardColumn
    string text
    string icon
    real width
    color color

    construct(string text, string icon, real width, color color)
        this.text = text
        this.icon = icon
        this.width = width
        this.color = color

// ScoreBoard category listed
let boardColumns = asList(
    new BoardColumn("PlayerName"   , null , NAME_LABEL_WIDTH  , HIGHLIGHT_COLOR ),
    new BoardColumn(COL_ARMY_PTS  , null , COL_LABEL_WIDTH , HIGHLIGHT_COLOR ),
    new BoardColumn(COL_BLOOD_PTS , null , COL_LABEL_WIDTH , HIGHLIGHT_COLOR ),
    new BoardColumn(COL_TOTAL_BLOOD_PTS , null , 0.05 , HIGHLIGHT_COLOR )
)

public class ScoreBoardColumnEntries
    use LinkedListModule
    static int column = 0
    BoardColumn boardColumn
    int entryColumn = 0

    static function clear()
        for elem in ScoreBoardColumnEntries
            scoreBoardEntries.remove(elem.boardColumn.text)
            destroy elem

        scoreBoard.board.clear()

    static function loadBuildLayout()
        column = 0
        // TODO: Handle dynamic player
        var rowCount = ALL_PLAYERS.size() * 1

        // Trying to display a multiboard with 0 row result in wc3 crashing
        if rowCount == 0
            rowCount = 1
        if scoreBoard == null
            Log.debug("Board null")
            scoreBoard = new Board(rowCount, boardColumns.size())
        else
            scoreBoard.board.clear()
            scoreBoard.board.setRowCount(rowCount)

        Log.debug("scoreBoardEntries size :" + scoreBoardEntries.size().toString())
        for boardColumn in boardColumns
            scoreBoardEntries.put(boardColumn.text, new ScoreBoardColumnEntries(ALL_PLAYERS))

    static function loadRoundLayout(LinkedList<player> playerList)
        column = 0
        // TODO: Handle dynamic player
        var rowCount = playerList.size() * 2

        // Trying to display a multiboard with 0 row result in wc3 crashing
        if rowCount == 0
            rowCount = 1
        if scoreBoard == null
            scoreBoard = new Board(rowCount, boardColumns.size())
            for boardColumn in boardColumns
                scoreBoardEntries.put(boardColumn.text, new ScoreBoardColumnEntries(playerList))
            scoreBoard.board.display(true)
        else
            ScoreBoardColumnEntries.orderRowsForNextRound(playerList)

    static function orderRowsForNextRound(LinkedList<player> playerList)
        int row = 1

        if scoreBoard == null
            loadRoundLayout(playerList)
        else
            for _p in playerList
                let currentRow = scoreBoard.getPlayerPos(_p.getName(true))
                if currentRow != row
                    scoreBoard.swapRow(row, currentRow)
                scoreBoard.board.setItemValueColor(row, 0, _p.getColor().toColor().withAlpha(0))
                row += 2
            let expectedRow = playerList.size() * 2
            if scoreBoard.board.getRowCount() > expectedRow
                scoreBoard.board.setRowCount(expectedRow)


    construct(LinkedList<player> playerList)
        this.boardColumn = boardColumns.get(column)
        this.entryColumn = boardColumns.indexOf(boardColumn)
        initRow(0, boardColumn.text, boardColumn.icon)

        var value = "0"
        if boardColumn.text == "PlayerName"
            value = "PlayerName"

        initForPlayer(value, null, playerList)
        column++

    function initForPlayer(string value, string icon, LinkedList<player> playerList)
        var row = 0
        playerList.forEach() (player _player) ->
            row++
            if value == "PlayerName"
                initRow(row, _player.getName(true), iconPlayerInGame)
                scoreBoard.setColor(row, entryColumn, _player.getColor().toColor())
                // TODO: uncomment later maybe
                // In case player leave before board Init
                // if _player.isIngame()
                //     scoreBoard.setColor(row, entryColumn, _player.getColor().toColor())
                // else
                //     scoreBoard.setColor(row, entryColumn, COLOR_GRAY)
            else
                initRow(row, value, icon)
            row++
            if row % 4 == 0
                this.initEmptyRow(row)
            else
                this.initVersusRow(row)

    function initVersusRow(int row)
        initRow(row, column == 0 ? "          VS" : "", null)

    function initEmptyRow(int row)
        initRow(row, null, null)
        // Necessary to remove default grey eye icon
        scoreBoard.board.getItem(row, 0).setStyle(false, false)

    function initRow(int row, string value, string icon)
        scoreBoard.getItem(row, entryColumn)
            ..setWidth(boardColumn.width)
            ..setValueColor(boardColumn.color.withAlpha(0))
        scoreBoard.setNewItem(row, entryColumn, value, icon)
        scoreBoard.setItem(row, entryColumn, value, icon)

        if row != 0 and boardColumn.color == HIGHLIGHT_COLOR
            scoreBoard.setColor(row, entryColumn, COLOR_WHITE.withoutAlpha())

    function setEntry(player _player, string value, string icon)
        let entryRow = scoreBoard.getPlayerPos(_player.getName(true))

        if entryRow > 0
            scoreBoard.setValue(entryRow, entryColumn, value)
            if icon != null
                scoreBoard.setIcon(entryRow, entryColumn, icon)

    function setEntryIcon(player _player, string icon)
        let entryRow = scoreBoard.getPlayerPos(_player.getName(true))
        scoreBoard.setIcon(entryRow, entryColumn, icon)

    function setEntryColor(player _player, color color)
        let entryRow = scoreBoard.getPlayerPos(_player.getName(true))
        scoreBoard.setColor(entryRow, entryColumn, color)

    function addValue(player _player, int value)
        let playerRow = scoreBoard.getPlayerPos(_player.getName(true))
        let currentValue = scoreBoard.getValue(playerRow, entryColumn)
        let newValue = (currentValue.toInt() + value)
        setEntry(_player, newValue.toString(), null)

public var BOARD_TITLE_PREFIX = ""


public function setBoardTitle(string title)
    scoreBoard.board.setTitle(title)

function refreshScoreBoard()
    for i = 0 to 7
        let _p = players[i]
        let ap = pDatas.get(_p).armyPoints
        let bp = pDatas.get(_p).roundBloodPoints
        let tbp = pDatas.get(_p).totalBloodPoints
        scoreBoardEntries.get(COL_ARMY_PTS).setEntry(_p, ap.toString(), null)
        scoreBoardEntries.get(COL_BLOOD_PTS).setEntry(_p, bp.toString(), null)
        scoreBoardEntries.get(COL_TOTAL_BLOOD_PTS).setEntry(_p, tbp.toString(), null)

// To format time elapsed
function toTimeString(int numSecs) returns string
    let sec = numSecs mod 60
    let min = (numSecs div 60) mod 60
    let hrs = numSecs div 3600
    var str = ""

    if hrs > 0
        str += hrs.toString() + ":"

    if min < 10
        str += "0"
    str += min.toString() + ":"

    if sec < 10
        str += "0"
    str += sec.toString()

    return str

public function initScoreBoard()
    // Scoreboard timer refresh
    GameStates.modesSelection.onExit() (state) ->
        doPeriodically(1) (CallbackPeriodic cb) ->
            scoreBoard.board.setTitle(BOARD_TITLE_PREFIX)
            refreshScoreBoard()
