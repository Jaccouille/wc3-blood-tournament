package UnitExtensions

// Standard library imports:
import LinkedList

// Local imports:
import HashMap
import GameConstants


public function unit.freeSlots() returns int
    int result = 0
    for slot = 0 to this.inventorySize() - 1
        if this.itemInSlot(slot) == null
            result++
    return result

public function unit.itemCount(int itemTypeId) returns int
    var count = 0
    for i = 0 to 5
        if this.itemInSlot(i).getTypeId() == itemTypeId
            count++
    return count

public function unit.getInventoryItemCountMap() returns HashMap<int, int>
    let map = new HashMap<int, int>()
    for i = 0 to 5
        let id = this.itemInSlot(i).getTypeId()
        if map.has(id)
            map.put(id, map.get(id) + 1)
        else
            map.put(id, 1)
    return map

public function unit.getInventory() returns LinkedList<item>
    let list = new LinkedList<item>
    let size = this.inventorySize()
    for i = 0 to size - 1
        list.add(this.itemInSlot(i))
    return list

public function unit.isItemInSlot(int slot) returns bool
    return this.itemInSlot(slot) != null

public function unit.isItemInSlot(int slot, int id) returns bool
    let target = this.itemInSlot(slot)
    return target != null and target.getTypeId() == id

public function unit.isSoldier() returns bool
    return not this.isType(UNIT_TYPE_STRUCTURE)
            and not this.isType(UNIT_TYPE_PEON)
            and this.getOwner() != ALTAR_PLAYER
