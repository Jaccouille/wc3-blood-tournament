package MatchUpGenerator

import ClosureForGroups
import LinkedList
import HashMap
import ClosureTimers
import Lodash
import ClosureEvents
import ClosureKeyPresses
import Texttag
import ObjectIds
import Wurstunit
import Printing

import Players
import gameConstants


function generate(int n, int r) returns LinkedList<LinkedList<int>>
    let combinations = new LinkedList<LinkedList<int>>
    let combination = new LinkedList<int>

    for i = 0 to r - 1
        combination.push(i)

    while combination.get(r - 1) < n
        // Log.info(combination.toString())
        combinations.push(combination.copy())

        var t = r - 1
        while t != 0 and combination.get(t) == n - r + t
            t--
        combination.set(t, combination.get(t) + 1)
        for i = t + 1 to r - 1
            combination.set(i, combination.get(i - 1) + 1)
    return combinations

init
    // let playerList = new LinkedList<player>()
    // let humanPlayers = ALL_PLAYERS.filter((player p) -> p != ENEMY_PLAYER)
    // humanPlayers.forEach() p ->
    //     playerList.add(p)
    // Log.info(testGen(5, 2).toString())
    // let merde = generate(8, 2)
    // merde.forEach() (LinkedList<integer> t) ->
    //     Log.info(t.toString())
    // Log.info(merde.size().toString())
