package PlayerData

// Standard libs imports:
import HashMap
import LinkedList

// Local imports:
import GameConfig
import GameStates

public constant pDatas = new IterableMap<player, PlayerData>


public class PlayerData
    // let army = new LinkedList<LinkedList<int>>
    let buildingList = new LinkedList<unit>
    let spawnedUnits = new LinkedList<unit>
    rect buildingRect = null
    player _p
    int roundBountySum = 0
    int armyPoints = 0
    unit racePicker
    unit builder
    LinkedList<player> dummyPlayers = new LinkedList<player>

    construct(player p, rect buildingRect)
        this._p = p
        this.buildingRect = buildingRect
        pDatas.put(p, this)
        // TODO: replace 8 by human player size
        initDummyPlayer(_p.getId() + 8)
        initDummyPlayer(_p.getId() + 16)

    function initDummyPlayer(int playerId)
        let dummyPlayer = players[playerId]

        SetPlayerAllianceStateBJ(_p, dummyPlayer, bj_ALLIANCE_ALLIED_VISION)
        dummyPlayers.forEach() (player t) ->
            SetPlayerAllianceStateBJ(t, dummyPlayer, bj_ALLIANCE_ALLIED_VISION)
            SetPlayerAllianceStateBJ(dummyPlayer, t, bj_ALLIANCE_ALLIED_VISION)

        dummyPlayer.setColor(_p.getColor())
        dummyPlayers.push(dummyPlayer)
        dummyPlayer.setName(_p.getName() + " " + dummyPlayers.size().toString())

    function getDummyPlayer(int idx) returns player
        return dummyPlayers.get(idx)

    function addBounty(int value)
        roundBountySum += value
        _p.addLumber(value)

    function addArmyPoints(int value)
        armyPoints += value

    function subArmyPoints(int value)
        armyPoints -= value

    function giveReward()
        let msg = "You acquired " +
            armyPoints.toString() +
            " + " +
            roundBountySum.toString() +
            " points"
        printTimedToPlayer(msg, 15, _p)
        _p.addLumber(armyPoints)
        roundBountySum = 0


public function initPlayers()
    let botNames = new LinkedList<string>
        ..add("Carbonara Sorcerer")
        ..add("Hummus Heroic Diviner")
        ..add("Mashed Potato Messiah")
        ..add("The Falafel Fighter")
        ..add("Bagel Baron")
        ..add("Macaroni Fencer")
        ..add("Shawarma Shogun")
        ..add("Biscuit Bandit")
        ..add("Croissant Conqueror")
        ..add("Donut Despot")
        ..add("Teriyaki Titan")
        ..add("Beef Noodle Bodyguard")
        ..add("Noodle Alchemist")
        ..add("Sashimi Sect Master")
        ..add("Immortal Paella Cultivator")
        ..add("Cantonese Cuisine Crusader")
        ..add("Soy Sauce Summoner")
        ..add("Meatball Emperor")
        ..add("Wasabi Warlock")
        ..add("Nacho Ninja")
        ..add("Pad Thai Prodigy")
        ..add("Fried Chicken Fanatic")
        ..add("Popcorn Prophet")
        ..add("Milkshake Mastermind")
        ..add("Fruit Frenzy Fighter")
        ..add("Pasta Punisher")
        ..add("Cabbage Rascal")
        ..add("Ice Cream Illusionist")
        ..add("Jellybean Juggernaut")
        ..add("Pickle Paladin")
        ..add("Ravioli Peacemaker")
        ..add("Curry Sovereign")
    botNames.shuffle()

    // TODO: refactor for release
    new PlayerData(players[0], gg_rct_Red)
    players[1].setName(botNames.pop())
    new PlayerData(players[1], gg_rct_Blue)
    players[2].setName(botNames.pop())
    new PlayerData(players[2], gg_rct_Teal)
    players[3].setName(botNames.pop())
    new PlayerData(players[3], gg_rct_Purple)
    players[4].setName(botNames.pop())
    new PlayerData(players[4], gg_rct_Yellow)
    players[5].setName(botNames.pop())
    new PlayerData(players[5], gg_rct_Orange)
    players[6].setName(botNames.pop())
    new PlayerData(players[6], gg_rct_Green)
    players[7].setName(botNames.pop())
    new PlayerData(players[7], gg_rct_Pink)


    GameStates.gameplay.onEnter() state ->
        pDatas.forEach() (player _p, PlayerData _) ->
            _p.addGold(gameConfig.getStartingGold())
